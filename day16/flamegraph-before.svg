<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="79489"><g><title>[unknown] (8 samples, 0.01%)</title><rect x="0.0126%" y="741" width="0.0101%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="8"/><text x="0.2626%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="0.0277%" y="437" width="0.0101%" height="15" fill="rgb(217,0,24)" fg:x="22" fg:w="8"/><text x="0.2777%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="0.0277%" y="421" width="0.0101%" height="15" fill="rgb(221,193,54)" fg:x="22" fg:w="8"/><text x="0.2777%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.01%)</title><rect x="0.0277%" y="405" width="0.0101%" height="15" fill="rgb(248,212,6)" fg:x="22" fg:w="8"/><text x="0.2777%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.01%)</title><rect x="0.0277%" y="389" width="0.0101%" height="15" fill="rgb(208,68,35)" fg:x="22" fg:w="8"/><text x="0.2777%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.01%)</title><rect x="0.0277%" y="373" width="0.0101%" height="15" fill="rgb(232,128,0)" fg:x="22" fg:w="8"/><text x="0.2777%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.01%)</title><rect x="0.0277%" y="357" width="0.0101%" height="15" fill="rgb(207,160,47)" fg:x="22" fg:w="8"/><text x="0.2777%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.01%)</title><rect x="0.0277%" y="341" width="0.0101%" height="15" fill="rgb(228,23,34)" fg:x="22" fg:w="8"/><text x="0.2777%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.01%)</title><rect x="0.0277%" y="325" width="0.0101%" height="15" fill="rgb(218,30,26)" fg:x="22" fg:w="8"/><text x="0.2777%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.01%)</title><rect x="0.0277%" y="309" width="0.0101%" height="15" fill="rgb(220,122,19)" fg:x="22" fg:w="8"/><text x="0.2777%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.01%)</title><rect x="0.0277%" y="293" width="0.0101%" height="15" fill="rgb(250,228,42)" fg:x="22" fg:w="8"/><text x="0.2777%" y="303.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.01%)</title><rect x="0.0277%" y="277" width="0.0101%" height="15" fill="rgb(240,193,28)" fg:x="22" fg:w="8"/><text x="0.2777%" y="287.50"></text></g><g><title>malloc (8 samples, 0.01%)</title><rect x="0.0277%" y="261" width="0.0101%" height="15" fill="rgb(216,20,37)" fg:x="22" fg:w="8"/><text x="0.2777%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 0.02%)</title><rect x="0.0428%" y="293" width="0.0226%" height="15" fill="rgb(206,188,39)" fg:x="34" fg:w="18"/><text x="0.2928%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 0.02%)</title><rect x="0.0428%" y="277" width="0.0226%" height="15" fill="rgb(217,207,13)" fg:x="34" fg:w="18"/><text x="0.2928%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 0.02%)</title><rect x="0.0428%" y="261" width="0.0226%" height="15" fill="rgb(231,73,38)" fg:x="34" fg:w="18"/><text x="0.2928%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.02%)</title><rect x="0.0440%" y="245" width="0.0214%" height="15" fill="rgb(225,20,46)" fg:x="35" fg:w="17"/><text x="0.2940%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.02%)</title><rect x="0.0440%" y="229" width="0.0214%" height="15" fill="rgb(210,31,41)" fg:x="35" fg:w="17"/><text x="0.2940%" y="239.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.02%)</title><rect x="0.0440%" y="213" width="0.0214%" height="15" fill="rgb(221,200,47)" fg:x="35" fg:w="17"/><text x="0.2940%" y="223.50"></text></g><g><title>malloc (13 samples, 0.02%)</title><rect x="0.0491%" y="197" width="0.0164%" height="15" fill="rgb(226,26,5)" fg:x="39" fg:w="13"/><text x="0.2991%" y="207.50"></text></g><g><title>[libc.so.6] (10 samples, 0.01%)</title><rect x="0.0528%" y="181" width="0.0126%" height="15" fill="rgb(249,33,26)" fg:x="42" fg:w="10"/><text x="0.3028%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (28 samples, 0.04%)</title><rect x="0.0377%" y="373" width="0.0352%" height="15" fill="rgb(235,183,28)" fg:x="30" fg:w="28"/><text x="0.2877%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (24 samples, 0.03%)</title><rect x="0.0428%" y="357" width="0.0302%" height="15" fill="rgb(221,5,38)" fg:x="34" fg:w="24"/><text x="0.2928%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (24 samples, 0.03%)</title><rect x="0.0428%" y="341" width="0.0302%" height="15" fill="rgb(247,18,42)" fg:x="34" fg:w="24"/><text x="0.2928%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (24 samples, 0.03%)</title><rect x="0.0428%" y="325" width="0.0302%" height="15" fill="rgb(241,131,45)" fg:x="34" fg:w="24"/><text x="0.2928%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (24 samples, 0.03%)</title><rect x="0.0428%" y="309" width="0.0302%" height="15" fill="rgb(249,31,29)" fg:x="34" fg:w="24"/><text x="0.2928%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (46 samples, 0.06%)</title><rect x="0.0377%" y="437" width="0.0579%" height="15" fill="rgb(225,111,53)" fg:x="30" fg:w="46"/><text x="0.2877%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (46 samples, 0.06%)</title><rect x="0.0377%" y="421" width="0.0579%" height="15" fill="rgb(238,160,17)" fg:x="30" fg:w="46"/><text x="0.2877%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (46 samples, 0.06%)</title><rect x="0.0377%" y="405" width="0.0579%" height="15" fill="rgb(214,148,48)" fg:x="30" fg:w="46"/><text x="0.2877%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (46 samples, 0.06%)</title><rect x="0.0377%" y="389" width="0.0579%" height="15" fill="rgb(232,36,49)" fg:x="30" fg:w="46"/><text x="0.2877%" y="399.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (11 samples, 0.01%)</title><rect x="0.0818%" y="373" width="0.0138%" height="15" fill="rgb(209,103,24)" fg:x="65" fg:w="11"/><text x="0.3318%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.02%)</title><rect x="0.1132%" y="277" width="0.0201%" height="15" fill="rgb(229,88,8)" fg:x="90" fg:w="16"/><text x="0.3632%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.02%)</title><rect x="0.1132%" y="261" width="0.0201%" height="15" fill="rgb(213,181,19)" fg:x="90" fg:w="16"/><text x="0.3632%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.02%)</title><rect x="0.1132%" y="245" width="0.0201%" height="15" fill="rgb(254,191,54)" fg:x="90" fg:w="16"/><text x="0.3632%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.02%)</title><rect x="0.1132%" y="229" width="0.0201%" height="15" fill="rgb(241,83,37)" fg:x="90" fg:w="16"/><text x="0.3632%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.02%)</title><rect x="0.1132%" y="213" width="0.0201%" height="15" fill="rgb(233,36,39)" fg:x="90" fg:w="16"/><text x="0.3632%" y="223.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.02%)</title><rect x="0.1132%" y="197" width="0.0201%" height="15" fill="rgb(226,3,54)" fg:x="90" fg:w="16"/><text x="0.3632%" y="207.50"></text></g><g><title>malloc (15 samples, 0.02%)</title><rect x="0.1145%" y="181" width="0.0189%" height="15" fill="rgb(245,192,40)" fg:x="91" fg:w="15"/><text x="0.3645%" y="191.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="0.1170%" y="165" width="0.0164%" height="15" fill="rgb(238,167,29)" fg:x="93" fg:w="13"/><text x="0.3670%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (26 samples, 0.03%)</title><rect x="0.1044%" y="357" width="0.0327%" height="15" fill="rgb(232,182,51)" fg:x="83" fg:w="26"/><text x="0.3544%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.02%)</title><rect x="0.1132%" y="341" width="0.0239%" height="15" fill="rgb(231,60,39)" fg:x="90" fg:w="19"/><text x="0.3632%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (19 samples, 0.02%)</title><rect x="0.1132%" y="325" width="0.0239%" height="15" fill="rgb(208,69,12)" fg:x="90" fg:w="19"/><text x="0.3632%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.02%)</title><rect x="0.1132%" y="309" width="0.0239%" height="15" fill="rgb(235,93,37)" fg:x="90" fg:w="19"/><text x="0.3632%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (19 samples, 0.02%)</title><rect x="0.1132%" y="293" width="0.0239%" height="15" fill="rgb(213,116,39)" fg:x="90" fg:w="19"/><text x="0.3632%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.01%)</title><rect x="0.1371%" y="357" width="0.0126%" height="15" fill="rgb(222,207,29)" fg:x="109" fg:w="10"/><text x="0.3871%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.01%)</title><rect x="0.1384%" y="341" width="0.0113%" height="15" fill="rgb(206,96,30)" fg:x="110" fg:w="9"/><text x="0.3884%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.01%)</title><rect x="0.1384%" y="325" width="0.0113%" height="15" fill="rgb(218,138,4)" fg:x="110" fg:w="9"/><text x="0.3884%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.01%)</title><rect x="0.1384%" y="309" width="0.0113%" height="15" fill="rgb(250,191,14)" fg:x="110" fg:w="9"/><text x="0.3884%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.01%)</title><rect x="0.1384%" y="293" width="0.0113%" height="15" fill="rgb(239,60,40)" fg:x="110" fg:w="9"/><text x="0.3884%" y="303.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.01%)</title><rect x="0.1384%" y="277" width="0.0113%" height="15" fill="rgb(206,27,48)" fg:x="110" fg:w="9"/><text x="0.3884%" y="287.50"></text></g><g><title>malloc (9 samples, 0.01%)</title><rect x="0.1384%" y="261" width="0.0113%" height="15" fill="rgb(225,35,8)" fg:x="110" fg:w="9"/><text x="0.3884%" y="271.50"></text></g><g><title>[libc.so.6] (9 samples, 0.01%)</title><rect x="0.1384%" y="245" width="0.0113%" height="15" fill="rgb(250,213,24)" fg:x="110" fg:w="9"/><text x="0.3884%" y="255.50"></text></g><g><title>&lt;day16::MazeState as core::clone::Clone&gt;::clone (54 samples, 0.07%)</title><rect x="0.0956%" y="437" width="0.0679%" height="15" fill="rgb(247,123,22)" fg:x="76" fg:w="54"/><text x="0.3456%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (48 samples, 0.06%)</title><rect x="0.1032%" y="421" width="0.0604%" height="15" fill="rgb(231,138,38)" fg:x="82" fg:w="48"/><text x="0.3532%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (48 samples, 0.06%)</title><rect x="0.1032%" y="405" width="0.0604%" height="15" fill="rgb(231,145,46)" fg:x="82" fg:w="48"/><text x="0.3532%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (48 samples, 0.06%)</title><rect x="0.1032%" y="389" width="0.0604%" height="15" fill="rgb(251,118,11)" fg:x="82" fg:w="48"/><text x="0.3532%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (48 samples, 0.06%)</title><rect x="0.1032%" y="373" width="0.0604%" height="15" fill="rgb(217,147,25)" fg:x="82" fg:w="48"/><text x="0.3532%" y="383.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (11 samples, 0.01%)</title><rect x="0.1497%" y="357" width="0.0138%" height="15" fill="rgb(247,81,37)" fg:x="119" fg:w="11"/><text x="0.3997%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (13 samples, 0.02%)</title><rect x="0.1635%" y="437" width="0.0164%" height="15" fill="rgb(209,12,38)" fg:x="130" fg:w="13"/><text x="0.4135%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (13 samples, 0.02%)</title><rect x="0.1635%" y="421" width="0.0164%" height="15" fill="rgb(227,1,9)" fg:x="130" fg:w="13"/><text x="0.4135%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (13 samples, 0.02%)</title><rect x="0.1635%" y="405" width="0.0164%" height="15" fill="rgb(248,47,43)" fg:x="130" fg:w="13"/><text x="0.4135%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (13 samples, 0.02%)</title><rect x="0.1635%" y="389" width="0.0164%" height="15" fill="rgb(221,10,30)" fg:x="130" fg:w="13"/><text x="0.4135%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (8 samples, 0.01%)</title><rect x="0.1824%" y="437" width="0.0101%" height="15" fill="rgb(210,229,1)" fg:x="145" fg:w="8"/><text x="0.4324%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (8 samples, 0.01%)</title><rect x="0.1824%" y="421" width="0.0101%" height="15" fill="rgb(222,148,37)" fg:x="145" fg:w="8"/><text x="0.4324%" y="431.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop::{{closure}} (8 samples, 0.01%)</title><rect x="0.1824%" y="405" width="0.0101%" height="15" fill="rgb(234,67,33)" fg:x="145" fg:w="8"/><text x="0.4324%" y="415.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (16 samples, 0.02%)</title><rect x="0.1925%" y="421" width="0.0201%" height="15" fill="rgb(247,98,35)" fg:x="153" fg:w="16"/><text x="0.4425%" y="431.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (16 samples, 0.02%)</title><rect x="0.1925%" y="405" width="0.0201%" height="15" fill="rgb(247,138,52)" fg:x="153" fg:w="16"/><text x="0.4425%" y="415.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (16 samples, 0.02%)</title><rect x="0.1925%" y="389" width="0.0201%" height="15" fill="rgb(213,79,30)" fg:x="153" fg:w="16"/><text x="0.4425%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (17 samples, 0.02%)</title><rect x="0.1925%" y="437" width="0.0214%" height="15" fill="rgb(246,177,23)" fg:x="153" fg:w="17"/><text x="0.4425%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.02%)</title><rect x="0.2176%" y="389" width="0.0164%" height="15" fill="rgb(230,62,27)" fg:x="173" fg:w="13"/><text x="0.4676%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (13 samples, 0.02%)</title><rect x="0.2176%" y="373" width="0.0164%" height="15" fill="rgb(216,154,8)" fg:x="173" fg:w="13"/><text x="0.4676%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (13 samples, 0.02%)</title><rect x="0.2176%" y="357" width="0.0164%" height="15" fill="rgb(244,35,45)" fg:x="173" fg:w="13"/><text x="0.4676%" y="367.50"></text></g><g><title>alloc::alloc::realloc (13 samples, 0.02%)</title><rect x="0.2176%" y="341" width="0.0164%" height="15" fill="rgb(251,115,12)" fg:x="173" fg:w="13"/><text x="0.4676%" y="351.50"></text></g><g><title>realloc (13 samples, 0.02%)</title><rect x="0.2176%" y="325" width="0.0164%" height="15" fill="rgb(240,54,50)" fg:x="173" fg:w="13"/><text x="0.4676%" y="335.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="0.2176%" y="309" width="0.0164%" height="15" fill="rgb(233,84,52)" fg:x="173" fg:w="13"/><text x="0.4676%" y="319.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="0.2176%" y="293" width="0.0164%" height="15" fill="rgb(207,117,47)" fg:x="173" fg:w="13"/><text x="0.4676%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (17 samples, 0.02%)</title><rect x="0.2139%" y="437" width="0.0214%" height="15" fill="rgb(249,43,39)" fg:x="170" fg:w="17"/><text x="0.4639%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.02%)</title><rect x="0.2139%" y="421" width="0.0214%" height="15" fill="rgb(209,38,44)" fg:x="170" fg:w="17"/><text x="0.4639%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (17 samples, 0.02%)</title><rect x="0.2139%" y="405" width="0.0214%" height="15" fill="rgb(236,212,23)" fg:x="170" fg:w="17"/><text x="0.4639%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.02%)</title><rect x="0.2453%" y="325" width="0.0226%" height="15" fill="rgb(242,79,21)" fg:x="195" fg:w="18"/><text x="0.4953%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.02%)</title><rect x="0.2453%" y="309" width="0.0226%" height="15" fill="rgb(211,96,35)" fg:x="195" fg:w="18"/><text x="0.4953%" y="319.50"></text></g><g><title>cfree (18 samples, 0.02%)</title><rect x="0.2453%" y="293" width="0.0226%" height="15" fill="rgb(253,215,40)" fg:x="195" fg:w="18"/><text x="0.4953%" y="303.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="0.2478%" y="277" width="0.0201%" height="15" fill="rgb(211,81,21)" fg:x="197" fg:w="16"/><text x="0.4978%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.03%)</title><rect x="0.2441%" y="421" width="0.0252%" height="15" fill="rgb(208,190,38)" fg:x="194" fg:w="20"/><text x="0.4941%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (20 samples, 0.03%)</title><rect x="0.2441%" y="405" width="0.0252%" height="15" fill="rgb(235,213,38)" fg:x="194" fg:w="20"/><text x="0.4941%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (19 samples, 0.02%)</title><rect x="0.2453%" y="389" width="0.0239%" height="15" fill="rgb(237,122,38)" fg:x="195" fg:w="19"/><text x="0.4953%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (19 samples, 0.02%)</title><rect x="0.2453%" y="373" width="0.0239%" height="15" fill="rgb(244,218,35)" fg:x="195" fg:w="19"/><text x="0.4953%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (19 samples, 0.02%)</title><rect x="0.2453%" y="357" width="0.0239%" height="15" fill="rgb(240,68,47)" fg:x="195" fg:w="19"/><text x="0.4953%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="0.2453%" y="341" width="0.0239%" height="15" fill="rgb(210,16,53)" fg:x="195" fg:w="19"/><text x="0.4953%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (22 samples, 0.03%)</title><rect x="0.2441%" y="437" width="0.0277%" height="15" fill="rgb(235,124,12)" fg:x="194" fg:w="22"/><text x="0.4941%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (26 samples, 0.03%)</title><rect x="0.2743%" y="213" width="0.0327%" height="15" fill="rgb(224,169,11)" fg:x="218" fg:w="26"/><text x="0.5243%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (26 samples, 0.03%)</title><rect x="0.2743%" y="197" width="0.0327%" height="15" fill="rgb(250,166,2)" fg:x="218" fg:w="26"/><text x="0.5243%" y="207.50"></text></g><g><title>cfree (26 samples, 0.03%)</title><rect x="0.2743%" y="181" width="0.0327%" height="15" fill="rgb(242,216,29)" fg:x="218" fg:w="26"/><text x="0.5243%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (29 samples, 0.04%)</title><rect x="0.2743%" y="277" width="0.0365%" height="15" fill="rgb(230,116,27)" fg:x="218" fg:w="29"/><text x="0.5243%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (29 samples, 0.04%)</title><rect x="0.2743%" y="261" width="0.0365%" height="15" fill="rgb(228,99,48)" fg:x="218" fg:w="29"/><text x="0.5243%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (29 samples, 0.04%)</title><rect x="0.2743%" y="245" width="0.0365%" height="15" fill="rgb(253,11,6)" fg:x="218" fg:w="29"/><text x="0.5243%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.04%)</title><rect x="0.2743%" y="229" width="0.0365%" height="15" fill="rgb(247,143,39)" fg:x="218" fg:w="29"/><text x="0.5243%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (66 samples, 0.08%)</title><rect x="0.3107%" y="165" width="0.0830%" height="15" fill="rgb(236,97,10)" fg:x="247" fg:w="66"/><text x="0.5607%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (66 samples, 0.08%)</title><rect x="0.3107%" y="149" width="0.0830%" height="15" fill="rgb(233,208,19)" fg:x="247" fg:w="66"/><text x="0.5607%" y="159.50"></text></g><g><title>cfree (65 samples, 0.08%)</title><rect x="0.3120%" y="133" width="0.0818%" height="15" fill="rgb(216,164,2)" fg:x="248" fg:w="65"/><text x="0.5620%" y="143.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="0.3736%" y="117" width="0.0201%" height="15" fill="rgb(220,129,5)" fg:x="297" fg:w="16"/><text x="0.6236%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (73 samples, 0.09%)</title><rect x="0.3107%" y="261" width="0.0918%" height="15" fill="rgb(242,17,10)" fg:x="247" fg:w="73"/><text x="0.5607%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (73 samples, 0.09%)</title><rect x="0.3107%" y="245" width="0.0918%" height="15" fill="rgb(242,107,0)" fg:x="247" fg:w="73"/><text x="0.5607%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (73 samples, 0.09%)</title><rect x="0.3107%" y="229" width="0.0918%" height="15" fill="rgb(251,28,31)" fg:x="247" fg:w="73"/><text x="0.5607%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (73 samples, 0.09%)</title><rect x="0.3107%" y="213" width="0.0918%" height="15" fill="rgb(233,223,10)" fg:x="247" fg:w="73"/><text x="0.5607%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (73 samples, 0.09%)</title><rect x="0.3107%" y="197" width="0.0918%" height="15" fill="rgb(215,21,27)" fg:x="247" fg:w="73"/><text x="0.5607%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (73 samples, 0.09%)</title><rect x="0.3107%" y="181" width="0.0918%" height="15" fill="rgb(232,23,21)" fg:x="247" fg:w="73"/><text x="0.5607%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;day16::MazeState&gt;&gt; (105 samples, 0.13%)</title><rect x="0.2717%" y="437" width="0.1321%" height="15" fill="rgb(244,5,23)" fg:x="216" fg:w="105"/><text x="0.5217%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;day16::MazeState,std::collections::hash::map::RandomState&gt;&gt; (105 samples, 0.13%)</title><rect x="0.2717%" y="421" width="0.1321%" height="15" fill="rgb(226,81,46)" fg:x="216" fg:w="105"/><text x="0.5217%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;day16::MazeState,(),std::collections::hash::map::RandomState&gt;&gt; (105 samples, 0.13%)</title><rect x="0.2717%" y="405" width="0.1321%" height="15" fill="rgb(247,70,30)" fg:x="216" fg:w="105"/><text x="0.5217%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(day16::MazeState,())&gt;&gt; (105 samples, 0.13%)</title><rect x="0.2717%" y="389" width="0.1321%" height="15" fill="rgb(212,68,19)" fg:x="216" fg:w="105"/><text x="0.5217%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 0.13%)</title><rect x="0.2717%" y="373" width="0.1321%" height="15" fill="rgb(240,187,13)" fg:x="216" fg:w="105"/><text x="0.5217%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (105 samples, 0.13%)</title><rect x="0.2717%" y="357" width="0.1321%" height="15" fill="rgb(223,113,26)" fg:x="216" fg:w="105"/><text x="0.5217%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (103 samples, 0.13%)</title><rect x="0.2743%" y="341" width="0.1296%" height="15" fill="rgb(206,192,2)" fg:x="218" fg:w="103"/><text x="0.5243%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (103 samples, 0.13%)</title><rect x="0.2743%" y="325" width="0.1296%" height="15" fill="rgb(241,108,4)" fg:x="218" fg:w="103"/><text x="0.5243%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day16::MazeState,())&gt; (103 samples, 0.13%)</title><rect x="0.2743%" y="309" width="0.1296%" height="15" fill="rgb(247,173,49)" fg:x="218" fg:w="103"/><text x="0.5243%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;day16::MazeState&gt; (103 samples, 0.13%)</title><rect x="0.2743%" y="293" width="0.1296%" height="15" fill="rgb(224,114,35)" fg:x="218" fg:w="103"/><text x="0.5243%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (74 samples, 0.09%)</title><rect x="0.3107%" y="277" width="0.0931%" height="15" fill="rgb(245,159,27)" fg:x="247" fg:w="74"/><text x="0.5607%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (13 samples, 0.02%)</title><rect x="0.4038%" y="437" width="0.0164%" height="15" fill="rgb(245,172,44)" fg:x="321" fg:w="13"/><text x="0.6538%" y="447.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (13 samples, 0.02%)</title><rect x="0.4038%" y="421" width="0.0164%" height="15" fill="rgb(236,23,11)" fg:x="321" fg:w="13"/><text x="0.6538%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (13 samples, 0.02%)</title><rect x="0.4038%" y="405" width="0.0164%" height="15" fill="rgb(205,117,38)" fg:x="321" fg:w="13"/><text x="0.6538%" y="415.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (13 samples, 0.02%)</title><rect x="0.4038%" y="389" width="0.0164%" height="15" fill="rgb(237,72,25)" fg:x="321" fg:w="13"/><text x="0.6538%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (13 samples, 0.02%)</title><rect x="0.4038%" y="373" width="0.0164%" height="15" fill="rgb(244,70,9)" fg:x="321" fg:w="13"/><text x="0.6538%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (13 samples, 0.02%)</title><rect x="0.4038%" y="357" width="0.0164%" height="15" fill="rgb(217,125,39)" fg:x="321" fg:w="13"/><text x="0.6538%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.02%)</title><rect x="0.4038%" y="341" width="0.0164%" height="15" fill="rgb(235,36,10)" fg:x="321" fg:w="13"/><text x="0.6538%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (13 samples, 0.02%)</title><rect x="0.4038%" y="325" width="0.0164%" height="15" fill="rgb(251,123,47)" fg:x="321" fg:w="13"/><text x="0.6538%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (13 samples, 0.02%)</title><rect x="0.4038%" y="309" width="0.0164%" height="15" fill="rgb(221,13,13)" fg:x="321" fg:w="13"/><text x="0.6538%" y="319.50"></text></g><g><title>[libc.so.6] (11 samples, 0.01%)</title><rect x="0.4063%" y="293" width="0.0138%" height="15" fill="rgb(238,131,9)" fg:x="323" fg:w="11"/><text x="0.6563%" y="303.50"></text></g><g><title>core::hash::Hash::hash_slice (10 samples, 0.01%)</title><rect x="0.4252%" y="277" width="0.0126%" height="15" fill="rgb(211,50,8)" fg:x="338" fg:w="10"/><text x="0.6752%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (10 samples, 0.01%)</title><rect x="0.4252%" y="261" width="0.0126%" height="15" fill="rgb(245,182,24)" fg:x="338" fg:w="10"/><text x="0.6752%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (10 samples, 0.01%)</title><rect x="0.4252%" y="245" width="0.0126%" height="15" fill="rgb(242,14,37)" fg:x="338" fg:w="10"/><text x="0.6752%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (10 samples, 0.01%)</title><rect x="0.4252%" y="229" width="0.0126%" height="15" fill="rgb(246,228,12)" fg:x="338" fg:w="10"/><text x="0.6752%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (10 samples, 0.01%)</title><rect x="0.4252%" y="213" width="0.0126%" height="15" fill="rgb(213,55,15)" fg:x="338" fg:w="10"/><text x="0.6752%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (10 samples, 0.01%)</title><rect x="0.4252%" y="197" width="0.0126%" height="15" fill="rgb(209,9,3)" fg:x="338" fg:w="10"/><text x="0.6752%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (12 samples, 0.02%)</title><rect x="0.4252%" y="309" width="0.0151%" height="15" fill="rgb(230,59,30)" fg:x="338" fg:w="12"/><text x="0.6752%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (12 samples, 0.02%)</title><rect x="0.4252%" y="293" width="0.0151%" height="15" fill="rgb(209,121,21)" fg:x="338" fg:w="12"/><text x="0.6752%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (17 samples, 0.02%)</title><rect x="0.4202%" y="373" width="0.0214%" height="15" fill="rgb(220,109,13)" fg:x="334" fg:w="17"/><text x="0.6702%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (17 samples, 0.02%)</title><rect x="0.4202%" y="357" width="0.0214%" height="15" fill="rgb(232,18,1)" fg:x="334" fg:w="17"/><text x="0.6702%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (14 samples, 0.02%)</title><rect x="0.4240%" y="341" width="0.0176%" height="15" fill="rgb(215,41,42)" fg:x="337" fg:w="14"/><text x="0.6740%" y="351.50"></text></g><g><title>&lt;day16::MazeState as core::hash::Hash&gt;::hash (14 samples, 0.02%)</title><rect x="0.4240%" y="325" width="0.0176%" height="15" fill="rgb(224,123,36)" fg:x="337" fg:w="14"/><text x="0.6740%" y="335.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (25 samples, 0.03%)</title><rect x="0.4202%" y="437" width="0.0315%" height="15" fill="rgb(240,125,3)" fg:x="334" fg:w="25"/><text x="0.6702%" y="447.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (25 samples, 0.03%)</title><rect x="0.4202%" y="421" width="0.0315%" height="15" fill="rgb(205,98,50)" fg:x="334" fg:w="25"/><text x="0.6702%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (25 samples, 0.03%)</title><rect x="0.4202%" y="405" width="0.0315%" height="15" fill="rgb(205,185,37)" fg:x="334" fg:w="25"/><text x="0.6702%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (25 samples, 0.03%)</title><rect x="0.4202%" y="389" width="0.0315%" height="15" fill="rgb(238,207,15)" fg:x="334" fg:w="25"/><text x="0.6702%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (8 samples, 0.01%)</title><rect x="0.4416%" y="373" width="0.0101%" height="15" fill="rgb(213,199,42)" fg:x="351" fg:w="8"/><text x="0.6916%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.01%)</title><rect x="0.4416%" y="357" width="0.0101%" height="15" fill="rgb(235,201,11)" fg:x="351" fg:w="8"/><text x="0.6916%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (8 samples, 0.01%)</title><rect x="0.4416%" y="341" width="0.0101%" height="15" fill="rgb(207,46,11)" fg:x="351" fg:w="8"/><text x="0.6916%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (9 samples, 0.01%)</title><rect x="0.4567%" y="325" width="0.0113%" height="15" fill="rgb(241,35,35)" fg:x="363" fg:w="9"/><text x="0.7067%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (9 samples, 0.01%)</title><rect x="0.4567%" y="309" width="0.0113%" height="15" fill="rgb(243,32,47)" fg:x="363" fg:w="9"/><text x="0.7067%" y="319.50"></text></g><g><title>hashbrown::map::make_insert_hash (18 samples, 0.02%)</title><rect x="0.4516%" y="389" width="0.0226%" height="15" fill="rgb(247,202,23)" fg:x="359" fg:w="18"/><text x="0.7016%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (18 samples, 0.02%)</title><rect x="0.4516%" y="373" width="0.0226%" height="15" fill="rgb(219,102,11)" fg:x="359" fg:w="18"/><text x="0.7016%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (18 samples, 0.02%)</title><rect x="0.4516%" y="357" width="0.0226%" height="15" fill="rgb(243,110,44)" fg:x="359" fg:w="18"/><text x="0.7016%" y="367.50"></text></g><g><title>&lt;day16::MazeState as core::hash::Hash&gt;::hash (18 samples, 0.02%)</title><rect x="0.4516%" y="341" width="0.0226%" height="15" fill="rgb(222,74,54)" fg:x="359" fg:w="18"/><text x="0.7016%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (47 samples, 0.06%)</title><rect x="0.4894%" y="133" width="0.0591%" height="15" fill="rgb(216,99,12)" fg:x="389" fg:w="47"/><text x="0.7394%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (44 samples, 0.06%)</title><rect x="0.4931%" y="117" width="0.0554%" height="15" fill="rgb(226,22,26)" fg:x="392" fg:w="44"/><text x="0.7431%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (48 samples, 0.06%)</title><rect x="0.4894%" y="213" width="0.0604%" height="15" fill="rgb(217,163,10)" fg:x="389" fg:w="48"/><text x="0.7394%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (48 samples, 0.06%)</title><rect x="0.4894%" y="197" width="0.0604%" height="15" fill="rgb(213,25,53)" fg:x="389" fg:w="48"/><text x="0.7394%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (48 samples, 0.06%)</title><rect x="0.4894%" y="181" width="0.0604%" height="15" fill="rgb(252,105,26)" fg:x="389" fg:w="48"/><text x="0.7394%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (48 samples, 0.06%)</title><rect x="0.4894%" y="165" width="0.0604%" height="15" fill="rgb(220,39,43)" fg:x="389" fg:w="48"/><text x="0.7394%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (48 samples, 0.06%)</title><rect x="0.4894%" y="149" width="0.0604%" height="15" fill="rgb(229,68,48)" fg:x="389" fg:w="48"/><text x="0.7394%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (65 samples, 0.08%)</title><rect x="0.5661%" y="85" width="0.0818%" height="15" fill="rgb(252,8,32)" fg:x="450" fg:w="65"/><text x="0.8161%" y="95.50"></text></g><g><title>core::hash::sip::u8to64_le (59 samples, 0.07%)</title><rect x="0.5737%" y="69" width="0.0742%" height="15" fill="rgb(223,20,43)" fg:x="456" fg:w="59"/><text x="0.8237%" y="79.50"></text></g><g><title>core::hash::Hash::hash_slice (87 samples, 0.11%)</title><rect x="0.5498%" y="181" width="0.1094%" height="15" fill="rgb(229,81,49)" fg:x="437" fg:w="87"/><text x="0.7998%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (78 samples, 0.10%)</title><rect x="0.5611%" y="165" width="0.0981%" height="15" fill="rgb(236,28,36)" fg:x="446" fg:w="78"/><text x="0.8111%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (78 samples, 0.10%)</title><rect x="0.5611%" y="149" width="0.0981%" height="15" fill="rgb(249,185,26)" fg:x="446" fg:w="78"/><text x="0.8111%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (78 samples, 0.10%)</title><rect x="0.5611%" y="133" width="0.0981%" height="15" fill="rgb(249,174,33)" fg:x="446" fg:w="78"/><text x="0.8111%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (78 samples, 0.10%)</title><rect x="0.5611%" y="117" width="0.0981%" height="15" fill="rgb(233,201,37)" fg:x="446" fg:w="78"/><text x="0.8111%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (78 samples, 0.10%)</title><rect x="0.5611%" y="101" width="0.0981%" height="15" fill="rgb(221,78,26)" fg:x="446" fg:w="78"/><text x="0.8111%" y="111.50"></text></g><g><title>core::hash::Hasher::write_u8 (9 samples, 0.01%)</title><rect x="0.6479%" y="85" width="0.0113%" height="15" fill="rgb(250,127,30)" fg:x="515" fg:w="9"/><text x="0.8979%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (89 samples, 0.11%)</title><rect x="0.5498%" y="213" width="0.1120%" height="15" fill="rgb(230,49,44)" fg:x="437" fg:w="89"/><text x="0.7998%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (89 samples, 0.11%)</title><rect x="0.5498%" y="197" width="0.1120%" height="15" fill="rgb(229,67,23)" fg:x="437" fg:w="89"/><text x="0.7998%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (144 samples, 0.18%)</title><rect x="0.4818%" y="309" width="0.1812%" height="15" fill="rgb(249,83,47)" fg:x="383" fg:w="144"/><text x="0.7318%" y="319.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (144 samples, 0.18%)</title><rect x="0.4818%" y="293" width="0.1812%" height="15" fill="rgb(215,43,3)" fg:x="383" fg:w="144"/><text x="0.7318%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (144 samples, 0.18%)</title><rect x="0.4818%" y="277" width="0.1812%" height="15" fill="rgb(238,154,13)" fg:x="383" fg:w="144"/><text x="0.7318%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (144 samples, 0.18%)</title><rect x="0.4818%" y="261" width="0.1812%" height="15" fill="rgb(219,56,2)" fg:x="383" fg:w="144"/><text x="0.7318%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (138 samples, 0.17%)</title><rect x="0.4894%" y="245" width="0.1736%" height="15" fill="rgb(233,0,4)" fg:x="389" fg:w="138"/><text x="0.7394%" y="255.50"></text></g><g><title>&lt;day16::MazeState as core::hash::Hash&gt;::hash (138 samples, 0.17%)</title><rect x="0.4894%" y="229" width="0.1736%" height="15" fill="rgb(235,30,7)" fg:x="389" fg:w="138"/><text x="0.7394%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (155 samples, 0.19%)</title><rect x="0.4781%" y="373" width="0.1950%" height="15" fill="rgb(250,79,13)" fg:x="380" fg:w="155"/><text x="0.7281%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (155 samples, 0.19%)</title><rect x="0.4781%" y="357" width="0.1950%" height="15" fill="rgb(211,146,34)" fg:x="380" fg:w="155"/><text x="0.7281%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (155 samples, 0.19%)</title><rect x="0.4781%" y="341" width="0.1950%" height="15" fill="rgb(228,22,38)" fg:x="380" fg:w="155"/><text x="0.7281%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (155 samples, 0.19%)</title><rect x="0.4781%" y="325" width="0.1950%" height="15" fill="rgb(235,168,5)" fg:x="380" fg:w="155"/><text x="0.7281%" y="335.50"></text></g><g><title>day16::compute (518 samples, 0.65%)</title><rect x="0.0226%" y="453" width="0.6517%" height="15" fill="rgb(221,155,16)" fg:x="18" fg:w="518"/><text x="0.2726%" y="463.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (177 samples, 0.22%)</title><rect x="0.4516%" y="437" width="0.2227%" height="15" fill="rgb(215,215,53)" fg:x="359" fg:w="177"/><text x="0.7016%" y="447.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (177 samples, 0.22%)</title><rect x="0.4516%" y="421" width="0.2227%" height="15" fill="rgb(223,4,10)" fg:x="359" fg:w="177"/><text x="0.7016%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (177 samples, 0.22%)</title><rect x="0.4516%" y="405" width="0.2227%" height="15" fill="rgb(234,103,6)" fg:x="359" fg:w="177"/><text x="0.7016%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (157 samples, 0.20%)</title><rect x="0.4768%" y="389" width="0.1975%" height="15" fill="rgb(227,97,0)" fg:x="379" fg:w="157"/><text x="0.7268%" y="399.50"></text></g><g><title>day16::solve_part_one (522 samples, 0.66%)</title><rect x="0.0226%" y="469" width="0.6567%" height="15" fill="rgb(234,150,53)" fg:x="18" fg:w="522"/><text x="0.2726%" y="479.50"></text></g><g><title>&lt;itertools::combinations::Combinations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.01%)</title><rect x="0.6856%" y="453" width="0.0101%" height="15" fill="rgb(228,201,54)" fg:x="545" fg:w="8"/><text x="0.9356%" y="463.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (9 samples, 0.01%)</title><rect x="0.7045%" y="197" width="0.0113%" height="15" fill="rgb(222,22,37)" fg:x="560" fg:w="9"/><text x="0.9545%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (9 samples, 0.01%)</title><rect x="0.7045%" y="181" width="0.0113%" height="15" fill="rgb(237,53,32)" fg:x="560" fg:w="9"/><text x="0.9545%" y="191.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (9 samples, 0.01%)</title><rect x="0.7045%" y="165" width="0.0113%" height="15" fill="rgb(233,25,53)" fg:x="560" fg:w="9"/><text x="0.9545%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9 samples, 0.01%)</title><rect x="0.7045%" y="149" width="0.0113%" height="15" fill="rgb(210,40,34)" fg:x="560" fg:w="9"/><text x="0.9545%" y="159.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (9 samples, 0.01%)</title><rect x="0.7045%" y="133" width="0.0113%" height="15" fill="rgb(241,220,44)" fg:x="560" fg:w="9"/><text x="0.9545%" y="143.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (9 samples, 0.01%)</title><rect x="0.7045%" y="117" width="0.0113%" height="15" fill="rgb(235,28,35)" fg:x="560" fg:w="9"/><text x="0.9545%" y="127.50"></text></g><g><title>[libc.so.6] (9 samples, 0.01%)</title><rect x="0.7045%" y="101" width="0.0113%" height="15" fill="rgb(210,56,17)" fg:x="560" fg:w="9"/><text x="0.9545%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.02%)</title><rect x="0.6995%" y="341" width="0.0176%" height="15" fill="rgb(224,130,29)" fg:x="556" fg:w="14"/><text x="0.9495%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (14 samples, 0.02%)</title><rect x="0.6995%" y="325" width="0.0176%" height="15" fill="rgb(235,212,8)" fg:x="556" fg:w="14"/><text x="0.9495%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14 samples, 0.02%)</title><rect x="0.6995%" y="309" width="0.0176%" height="15" fill="rgb(223,33,50)" fg:x="556" fg:w="14"/><text x="0.9495%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (13 samples, 0.02%)</title><rect x="0.7007%" y="293" width="0.0164%" height="15" fill="rgb(219,149,13)" fg:x="557" fg:w="13"/><text x="0.9507%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (13 samples, 0.02%)</title><rect x="0.7007%" y="277" width="0.0164%" height="15" fill="rgb(250,156,29)" fg:x="557" fg:w="13"/><text x="0.9507%" y="287.50"></text></g><g><title>day16::solve_part_two::{{closure}} (13 samples, 0.02%)</title><rect x="0.7007%" y="261" width="0.0164%" height="15" fill="rgb(216,193,19)" fg:x="557" fg:w="13"/><text x="0.9507%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (13 samples, 0.02%)</title><rect x="0.7007%" y="245" width="0.0164%" height="15" fill="rgb(216,135,14)" fg:x="557" fg:w="13"/><text x="0.9507%" y="255.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (13 samples, 0.02%)</title><rect x="0.7007%" y="229" width="0.0164%" height="15" fill="rgb(241,47,5)" fg:x="557" fg:w="13"/><text x="0.9507%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (13 samples, 0.02%)</title><rect x="0.7007%" y="213" width="0.0164%" height="15" fill="rgb(233,42,35)" fg:x="557" fg:w="13"/><text x="0.9507%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.03%)</title><rect x="0.6995%" y="357" width="0.0289%" height="15" fill="rgb(231,13,6)" fg:x="556" fg:w="23"/><text x="0.9495%" y="367.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (9 samples, 0.01%)</title><rect x="0.7171%" y="341" width="0.0113%" height="15" fill="rgb(207,181,40)" fg:x="570" fg:w="9"/><text x="0.9671%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="0.7183%" y="325" width="0.0101%" height="15" fill="rgb(254,173,49)" fg:x="571" fg:w="8"/><text x="0.9683%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (58 samples, 0.07%)</title><rect x="0.6970%" y="373" width="0.0730%" height="15" fill="rgb(221,1,38)" fg:x="554" fg:w="58"/><text x="0.9470%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (33 samples, 0.04%)</title><rect x="0.7284%" y="357" width="0.0415%" height="15" fill="rgb(206,124,46)" fg:x="579" fg:w="33"/><text x="0.9784%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (33 samples, 0.04%)</title><rect x="0.7284%" y="341" width="0.0415%" height="15" fill="rgb(249,21,11)" fg:x="579" fg:w="33"/><text x="0.9784%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (33 samples, 0.04%)</title><rect x="0.7284%" y="325" width="0.0415%" height="15" fill="rgb(222,201,40)" fg:x="579" fg:w="33"/><text x="0.9784%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (33 samples, 0.04%)</title><rect x="0.7284%" y="309" width="0.0415%" height="15" fill="rgb(235,61,29)" fg:x="579" fg:w="33"/><text x="0.9784%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (32 samples, 0.04%)</title><rect x="0.7297%" y="293" width="0.0403%" height="15" fill="rgb(219,207,3)" fg:x="580" fg:w="32"/><text x="0.9797%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (32 samples, 0.04%)</title><rect x="0.7297%" y="277" width="0.0403%" height="15" fill="rgb(222,56,46)" fg:x="580" fg:w="32"/><text x="0.9797%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (32 samples, 0.04%)</title><rect x="0.7297%" y="261" width="0.0403%" height="15" fill="rgb(239,76,54)" fg:x="580" fg:w="32"/><text x="0.9797%" y="271.50"></text></g><g><title>alloc::alloc::realloc (32 samples, 0.04%)</title><rect x="0.7297%" y="245" width="0.0403%" height="15" fill="rgb(231,124,27)" fg:x="580" fg:w="32"/><text x="0.9797%" y="255.50"></text></g><g><title>realloc (32 samples, 0.04%)</title><rect x="0.7297%" y="229" width="0.0403%" height="15" fill="rgb(249,195,6)" fg:x="580" fg:w="32"/><text x="0.9797%" y="239.50"></text></g><g><title>[libc.so.6] (31 samples, 0.04%)</title><rect x="0.7309%" y="213" width="0.0390%" height="15" fill="rgb(237,174,47)" fg:x="581" fg:w="31"/><text x="0.9809%" y="223.50"></text></g><g><title>[libc.so.6] (30 samples, 0.04%)</title><rect x="0.7322%" y="197" width="0.0377%" height="15" fill="rgb(206,201,31)" fg:x="582" fg:w="30"/><text x="0.9822%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (64 samples, 0.08%)</title><rect x="0.6970%" y="389" width="0.0805%" height="15" fill="rgb(231,57,52)" fg:x="554" fg:w="64"/><text x="0.9470%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (71 samples, 0.09%)</title><rect x="0.6957%" y="437" width="0.0893%" height="15" fill="rgb(248,177,22)" fg:x="553" fg:w="71"/><text x="0.9457%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (71 samples, 0.09%)</title><rect x="0.6957%" y="421" width="0.0893%" height="15" fill="rgb(215,211,37)" fg:x="553" fg:w="71"/><text x="0.9457%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (71 samples, 0.09%)</title><rect x="0.6957%" y="405" width="0.0893%" height="15" fill="rgb(241,128,51)" fg:x="553" fg:w="71"/><text x="0.9457%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (221 samples, 0.28%)</title><rect x="0.6957%" y="453" width="0.2780%" height="15" fill="rgb(227,165,31)" fg:x="553" fg:w="221"/><text x="0.9457%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (150 samples, 0.19%)</title><rect x="0.7850%" y="437" width="0.1887%" height="15" fill="rgb(228,167,24)" fg:x="624" fg:w="150"/><text x="1.0350%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (150 samples, 0.19%)</title><rect x="0.7850%" y="421" width="0.1887%" height="15" fill="rgb(228,143,12)" fg:x="624" fg:w="150"/><text x="1.0350%" y="431.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (150 samples, 0.19%)</title><rect x="0.7850%" y="405" width="0.1887%" height="15" fill="rgb(249,149,8)" fg:x="624" fg:w="150"/><text x="1.0350%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (150 samples, 0.19%)</title><rect x="0.7850%" y="389" width="0.1887%" height="15" fill="rgb(243,35,44)" fg:x="624" fg:w="150"/><text x="1.0350%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (150 samples, 0.19%)</title><rect x="0.7850%" y="373" width="0.1887%" height="15" fill="rgb(246,89,9)" fg:x="624" fg:w="150"/><text x="1.0350%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (150 samples, 0.19%)</title><rect x="0.7850%" y="357" width="0.1887%" height="15" fill="rgb(233,213,13)" fg:x="624" fg:w="150"/><text x="1.0350%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (150 samples, 0.19%)</title><rect x="0.7850%" y="341" width="0.1887%" height="15" fill="rgb(233,141,41)" fg:x="624" fg:w="150"/><text x="1.0350%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (150 samples, 0.19%)</title><rect x="0.7850%" y="325" width="0.1887%" height="15" fill="rgb(239,167,4)" fg:x="624" fg:w="150"/><text x="1.0350%" y="335.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (150 samples, 0.19%)</title><rect x="0.7850%" y="309" width="0.1887%" height="15" fill="rgb(209,217,16)" fg:x="624" fg:w="150"/><text x="1.0350%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (150 samples, 0.19%)</title><rect x="0.7850%" y="293" width="0.1887%" height="15" fill="rgb(219,88,35)" fg:x="624" fg:w="150"/><text x="1.0350%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (150 samples, 0.19%)</title><rect x="0.7850%" y="277" width="0.1887%" height="15" fill="rgb(220,193,23)" fg:x="624" fg:w="150"/><text x="1.0350%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (150 samples, 0.19%)</title><rect x="0.7850%" y="261" width="0.1887%" height="15" fill="rgb(230,90,52)" fg:x="624" fg:w="150"/><text x="1.0350%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (150 samples, 0.19%)</title><rect x="0.7850%" y="245" width="0.1887%" height="15" fill="rgb(252,106,19)" fg:x="624" fg:w="150"/><text x="1.0350%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (150 samples, 0.19%)</title><rect x="0.7850%" y="229" width="0.1887%" height="15" fill="rgb(206,74,20)" fg:x="624" fg:w="150"/><text x="1.0350%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (150 samples, 0.19%)</title><rect x="0.7850%" y="213" width="0.1887%" height="15" fill="rgb(230,138,44)" fg:x="624" fg:w="150"/><text x="1.0350%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (150 samples, 0.19%)</title><rect x="0.7850%" y="197" width="0.1887%" height="15" fill="rgb(235,182,43)" fg:x="624" fg:w="150"/><text x="1.0350%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (150 samples, 0.19%)</title><rect x="0.7850%" y="181" width="0.1887%" height="15" fill="rgb(242,16,51)" fg:x="624" fg:w="150"/><text x="1.0350%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (150 samples, 0.19%)</title><rect x="0.7850%" y="165" width="0.1887%" height="15" fill="rgb(248,9,4)" fg:x="624" fg:w="150"/><text x="1.0350%" y="175.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (150 samples, 0.19%)</title><rect x="0.7850%" y="149" width="0.1887%" height="15" fill="rgb(210,31,22)" fg:x="624" fg:w="150"/><text x="1.0350%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (150 samples, 0.19%)</title><rect x="0.7850%" y="133" width="0.1887%" height="15" fill="rgb(239,54,39)" fg:x="624" fg:w="150"/><text x="1.0350%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (150 samples, 0.19%)</title><rect x="0.7850%" y="117" width="0.1887%" height="15" fill="rgb(230,99,41)" fg:x="624" fg:w="150"/><text x="1.0350%" y="127.50"></text></g><g><title>alloc::alloc::alloc (150 samples, 0.19%)</title><rect x="0.7850%" y="101" width="0.1887%" height="15" fill="rgb(253,106,12)" fg:x="624" fg:w="150"/><text x="1.0350%" y="111.50"></text></g><g><title>malloc (150 samples, 0.19%)</title><rect x="0.7850%" y="85" width="0.1887%" height="15" fill="rgb(213,46,41)" fg:x="624" fg:w="150"/><text x="1.0350%" y="95.50"></text></g><g><title>[libc.so.6] (150 samples, 0.19%)</title><rect x="0.7850%" y="69" width="0.1887%" height="15" fill="rgb(215,133,35)" fg:x="624" fg:w="150"/><text x="1.0350%" y="79.50"></text></g><g><title>[libc.so.6] (150 samples, 0.19%)</title><rect x="0.7850%" y="53" width="0.1887%" height="15" fill="rgb(213,28,5)" fg:x="624" fg:w="150"/><text x="1.0350%" y="63.50"></text></g><g><title>[libc.so.6] (73 samples, 0.09%)</title><rect x="0.8819%" y="37" width="0.0918%" height="15" fill="rgb(215,77,49)" fg:x="701" fg:w="73"/><text x="1.1319%" y="47.50"></text></g><g><title>__rdl_alloc (68 samples, 0.09%)</title><rect x="1.9651%" y="261" width="0.0855%" height="15" fill="rgb(248,100,22)" fg:x="1562" fg:w="68"/><text x="2.2151%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (43 samples, 0.05%)</title><rect x="1.9965%" y="245" width="0.0541%" height="15" fill="rgb(208,67,9)" fg:x="1587" fg:w="43"/><text x="2.2465%" y="255.50"></text></g><g><title>__rust_alloc (32 samples, 0.04%)</title><rect x="2.0506%" y="261" width="0.0403%" height="15" fill="rgb(219,133,21)" fg:x="1630" fg:w="32"/><text x="2.3006%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (731 samples, 0.92%)</title><rect x="1.9349%" y="357" width="0.9196%" height="15" fill="rgb(246,46,29)" fg:x="1538" fg:w="731"/><text x="2.1849%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (731 samples, 0.92%)</title><rect x="1.9349%" y="341" width="0.9196%" height="15" fill="rgb(246,185,52)" fg:x="1538" fg:w="731"/><text x="2.1849%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (731 samples, 0.92%)</title><rect x="1.9349%" y="325" width="0.9196%" height="15" fill="rgb(252,136,11)" fg:x="1538" fg:w="731"/><text x="2.1849%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (712 samples, 0.90%)</title><rect x="1.9588%" y="309" width="0.8957%" height="15" fill="rgb(219,138,53)" fg:x="1557" fg:w="712"/><text x="2.2088%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (712 samples, 0.90%)</title><rect x="1.9588%" y="293" width="0.8957%" height="15" fill="rgb(211,51,23)" fg:x="1557" fg:w="712"/><text x="2.2088%" y="303.50"></text></g><g><title>alloc::alloc::alloc (712 samples, 0.90%)</title><rect x="1.9588%" y="277" width="0.8957%" height="15" fill="rgb(247,221,28)" fg:x="1557" fg:w="712"/><text x="2.2088%" y="287.50"></text></g><g><title>malloc (607 samples, 0.76%)</title><rect x="2.0909%" y="261" width="0.7636%" height="15" fill="rgb(251,222,45)" fg:x="1662" fg:w="607"/><text x="2.3409%" y="271.50"></text></g><g><title>[libc.so.6] (414 samples, 0.52%)</title><rect x="2.3337%" y="245" width="0.5208%" height="15" fill="rgb(217,162,53)" fg:x="1855" fg:w="414"/><text x="2.5837%" y="255.50"></text></g><g><title>[libc.so.6] (19 samples, 0.02%)</title><rect x="2.8306%" y="229" width="0.0239%" height="15" fill="rgb(229,93,14)" fg:x="2250" fg:w="19"/><text x="3.0806%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (982 samples, 1.24%)</title><rect x="1.7826%" y="437" width="1.2354%" height="15" fill="rgb(209,67,49)" fg:x="1417" fg:w="982"/><text x="2.0326%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (861 samples, 1.08%)</title><rect x="1.9349%" y="421" width="1.0832%" height="15" fill="rgb(213,87,29)" fg:x="1538" fg:w="861"/><text x="2.1849%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (861 samples, 1.08%)</title><rect x="1.9349%" y="405" width="1.0832%" height="15" fill="rgb(205,151,52)" fg:x="1538" fg:w="861"/><text x="2.1849%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (861 samples, 1.08%)</title><rect x="1.9349%" y="389" width="1.0832%" height="15" fill="rgb(253,215,39)" fg:x="1538" fg:w="861"/><text x="2.1849%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (861 samples, 1.08%)</title><rect x="1.9349%" y="373" width="1.0832%" height="15" fill="rgb(221,220,41)" fg:x="1538" fg:w="861"/><text x="2.1849%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (130 samples, 0.16%)</title><rect x="2.8545%" y="357" width="0.1635%" height="15" fill="rgb(218,133,21)" fg:x="2269" fg:w="130"/><text x="3.1045%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (130 samples, 0.16%)</title><rect x="2.8545%" y="341" width="0.1635%" height="15" fill="rgb(221,193,43)" fg:x="2269" fg:w="130"/><text x="3.1045%" y="351.50"></text></g><g><title>[libc.so.6] (122 samples, 0.15%)</title><rect x="2.8645%" y="325" width="0.1535%" height="15" fill="rgb(240,128,52)" fg:x="2277" fg:w="122"/><text x="3.1145%" y="335.50"></text></g><g><title>__rdl_alloc (302 samples, 0.38%)</title><rect x="5.1441%" y="197" width="0.3799%" height="15" fill="rgb(253,114,12)" fg:x="4089" fg:w="302"/><text x="5.3941%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (75 samples, 0.09%)</title><rect x="5.4297%" y="181" width="0.0944%" height="15" fill="rgb(215,223,47)" fg:x="4316" fg:w="75"/><text x="5.6797%" y="191.50"></text></g><g><title>__rust_alloc (495 samples, 0.62%)</title><rect x="5.5240%" y="197" width="0.6227%" height="15" fill="rgb(248,225,23)" fg:x="4391" fg:w="495"/><text x="5.7740%" y="207.50"></text></g><g><title>[libc.so.6] (128 samples, 0.16%)</title><rect x="11.4871%" y="165" width="0.1610%" height="15" fill="rgb(250,108,0)" fg:x="9131" fg:w="128"/><text x="11.7371%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5,490 samples, 6.91%)</title><rect x="4.7428%" y="293" width="6.9066%" height="15" fill="rgb(228,208,7)" fg:x="3770" fg:w="5490"/><text x="4.9928%" y="303.50">alloc::ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,490 samples, 6.91%)</title><rect x="4.7428%" y="277" width="6.9066%" height="15" fill="rgb(244,45,10)" fg:x="3770" fg:w="5490"/><text x="4.9928%" y="287.50">alloc::ra..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5,490 samples, 6.91%)</title><rect x="4.7428%" y="261" width="6.9066%" height="15" fill="rgb(207,125,25)" fg:x="3770" fg:w="5490"/><text x="4.9928%" y="271.50">alloc::ra..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,217 samples, 6.56%)</title><rect x="5.0862%" y="245" width="6.5632%" height="15" fill="rgb(210,195,18)" fg:x="4043" fg:w="5217"/><text x="5.3362%" y="255.50">&lt;alloc::a..</text></g><g><title>alloc::alloc::Global::alloc_impl (5,217 samples, 6.56%)</title><rect x="5.0862%" y="229" width="6.5632%" height="15" fill="rgb(249,80,12)" fg:x="4043" fg:w="5217"/><text x="5.3362%" y="239.50">alloc::al..</text></g><g><title>alloc::alloc::alloc (5,217 samples, 6.56%)</title><rect x="5.0862%" y="213" width="6.5632%" height="15" fill="rgb(221,65,9)" fg:x="4043" fg:w="5217"/><text x="5.3362%" y="223.50">alloc::al..</text></g><g><title>malloc (4,374 samples, 5.50%)</title><rect x="6.1468%" y="197" width="5.5026%" height="15" fill="rgb(235,49,36)" fg:x="4886" fg:w="4374"/><text x="6.3968%" y="207.50">malloc</text></g><g><title>[libc.so.6] (2,788 samples, 3.51%)</title><rect x="8.1420%" y="181" width="3.5074%" height="15" fill="rgb(225,32,20)" fg:x="6472" fg:w="2788"/><text x="8.3920%" y="191.50">[li..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8,158 samples, 10.26%)</title><rect x="3.1250%" y="373" width="10.2631%" height="15" fill="rgb(215,141,46)" fg:x="2484" fg:w="8158"/><text x="3.3750%" y="383.50">&lt;alloc::string:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6,872 samples, 8.65%)</title><rect x="4.7428%" y="357" width="8.6452%" height="15" fill="rgb(250,160,47)" fg:x="3770" fg:w="6872"/><text x="4.9928%" y="367.50">&lt;alloc::vec:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6,872 samples, 8.65%)</title><rect x="4.7428%" y="341" width="8.6452%" height="15" fill="rgb(216,222,40)" fg:x="3770" fg:w="6872"/><text x="4.9928%" y="351.50">alloc::slice..</text></g><g><title>alloc::slice::hack::to_vec (6,872 samples, 8.65%)</title><rect x="4.7428%" y="325" width="8.6452%" height="15" fill="rgb(234,217,39)" fg:x="3770" fg:w="6872"/><text x="4.9928%" y="335.50">alloc::slice..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6,872 samples, 8.65%)</title><rect x="4.7428%" y="309" width="8.6452%" height="15" fill="rgb(207,178,40)" fg:x="3770" fg:w="6872"/><text x="4.9928%" y="319.50">&lt;T as alloc:..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,382 samples, 1.74%)</title><rect x="11.6494%" y="293" width="1.7386%" height="15" fill="rgb(221,136,13)" fg:x="9260" fg:w="1382"/><text x="11.8994%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,382 samples, 1.74%)</title><rect x="11.6494%" y="277" width="1.7386%" height="15" fill="rgb(249,199,10)" fg:x="9260" fg:w="1382"/><text x="11.8994%" y="287.50"></text></g><g><title>[libc.so.6] (1,245 samples, 1.57%)</title><rect x="11.8218%" y="261" width="1.5663%" height="15" fill="rgb(249,222,13)" fg:x="9397" fg:w="1245"/><text x="12.0718%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (638 samples, 0.80%)</title><rect x="13.3893%" y="373" width="0.8026%" height="15" fill="rgb(244,185,38)" fg:x="10643" fg:w="638"/><text x="13.6393%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="14.1806%" y="357" width="0.0113%" height="15" fill="rgb(236,202,9)" fg:x="11272" fg:w="9"/><text x="14.4306%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="14.1806%" y="341" width="0.0113%" height="15" fill="rgb(250,229,37)" fg:x="11272" fg:w="9"/><text x="14.4306%" y="351.50"></text></g><g><title>__rdl_alloc (93 samples, 0.12%)</title><rect x="14.3278%" y="277" width="0.1170%" height="15" fill="rgb(206,174,23)" fg:x="11389" fg:w="93"/><text x="14.5778%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (72 samples, 0.09%)</title><rect x="14.3542%" y="261" width="0.0906%" height="15" fill="rgb(211,33,43)" fg:x="11410" fg:w="72"/><text x="14.6042%" y="271.50"></text></g><g><title>__rust_alloc (56 samples, 0.07%)</title><rect x="14.4448%" y="277" width="0.0704%" height="15" fill="rgb(245,58,50)" fg:x="11482" fg:w="56"/><text x="14.6948%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (935 samples, 1.18%)</title><rect x="14.3114%" y="325" width="1.1763%" height="15" fill="rgb(244,68,36)" fg:x="11376" fg:w="935"/><text x="14.5614%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (935 samples, 1.18%)</title><rect x="14.3114%" y="309" width="1.1763%" height="15" fill="rgb(232,229,15)" fg:x="11376" fg:w="935"/><text x="14.5614%" y="319.50"></text></g><g><title>alloc::alloc::alloc (934 samples, 1.18%)</title><rect x="14.3127%" y="293" width="1.1750%" height="15" fill="rgb(254,30,23)" fg:x="11377" fg:w="934"/><text x="14.5627%" y="303.50"></text></g><g><title>malloc (773 samples, 0.97%)</title><rect x="14.5152%" y="277" width="0.9725%" height="15" fill="rgb(235,160,14)" fg:x="11538" fg:w="773"/><text x="14.7652%" y="287.50"></text></g><g><title>[libc.so.6] (515 samples, 0.65%)</title><rect x="14.8398%" y="261" width="0.6479%" height="15" fill="rgb(212,155,44)" fg:x="11796" fg:w="515"/><text x="15.0898%" y="271.50"></text></g><g><title>[libc.so.6] (44 samples, 0.06%)</title><rect x="15.4323%" y="245" width="0.0554%" height="15" fill="rgb(226,2,50)" fg:x="12267" fg:w="44"/><text x="15.6823%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,080 samples, 1.36%)</title><rect x="14.1919%" y="373" width="1.3587%" height="15" fill="rgb(234,177,6)" fg:x="11281" fg:w="1080"/><text x="14.4419%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,044 samples, 1.31%)</title><rect x="14.2372%" y="357" width="1.3134%" height="15" fill="rgb(217,24,9)" fg:x="11317" fg:w="1044"/><text x="14.4872%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,044 samples, 1.31%)</title><rect x="14.2372%" y="341" width="1.3134%" height="15" fill="rgb(220,13,46)" fg:x="11317" fg:w="1044"/><text x="14.4872%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::array (50 samples, 0.06%)</title><rect x="15.4877%" y="325" width="0.0629%" height="15" fill="rgb(239,221,27)" fg:x="12311" fg:w="50"/><text x="15.7377%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (50 samples, 0.06%)</title><rect x="15.4877%" y="309" width="0.0629%" height="15" fill="rgb(222,198,25)" fg:x="12311" fg:w="50"/><text x="15.7377%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15,091 samples, 18.99%)</title><rect x="3.0180%" y="437" width="18.9850%" height="15" fill="rgb(211,99,13)" fg:x="2399" fg:w="15091"/><text x="3.2680%" y="447.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15,040 samples, 18.92%)</title><rect x="3.0822%" y="421" width="18.9209%" height="15" fill="rgb(232,111,31)" fg:x="2450" fg:w="15040"/><text x="3.3322%" y="431.50">alloc::slice::&lt;impl [T]&gt;::to_v..</text></g><g><title>alloc::slice::hack::to_vec (15,040 samples, 18.92%)</title><rect x="3.0822%" y="405" width="18.9209%" height="15" fill="rgb(245,82,37)" fg:x="2450" fg:w="15040"/><text x="3.3322%" y="415.50">alloc::slice::hack::to_vec</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15,040 samples, 18.92%)</title><rect x="3.0822%" y="389" width="18.9209%" height="15" fill="rgb(227,149,46)" fg:x="2450" fg:w="15040"/><text x="3.3322%" y="399.50">&lt;T as alloc::slice::hack::Conv..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (5,129 samples, 6.45%)</title><rect x="15.5506%" y="373" width="6.4525%" height="15" fill="rgb(218,36,50)" fg:x="12361" fg:w="5129"/><text x="15.8006%" y="383.50">core::me..</text></g><g><title>__rdl_alloc (27 samples, 0.03%)</title><rect x="22.2207%" y="245" width="0.0340%" height="15" fill="rgb(226,80,48)" fg:x="17663" fg:w="27"/><text x="22.4707%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14 samples, 0.02%)</title><rect x="22.2370%" y="229" width="0.0176%" height="15" fill="rgb(238,224,15)" fg:x="17676" fg:w="14"/><text x="22.4870%" y="239.50"></text></g><g><title>__rust_alloc (35 samples, 0.04%)</title><rect x="22.2547%" y="245" width="0.0440%" height="15" fill="rgb(241,136,10)" fg:x="17690" fg:w="35"/><text x="22.5047%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (543 samples, 0.68%)</title><rect x="22.2031%" y="341" width="0.6831%" height="15" fill="rgb(208,32,45)" fg:x="17649" fg:w="543"/><text x="22.4531%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (543 samples, 0.68%)</title><rect x="22.2031%" y="325" width="0.6831%" height="15" fill="rgb(207,135,9)" fg:x="17649" fg:w="543"/><text x="22.4531%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (543 samples, 0.68%)</title><rect x="22.2031%" y="309" width="0.6831%" height="15" fill="rgb(206,86,44)" fg:x="17649" fg:w="543"/><text x="22.4531%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (534 samples, 0.67%)</title><rect x="22.2144%" y="293" width="0.6718%" height="15" fill="rgb(245,177,15)" fg:x="17658" fg:w="534"/><text x="22.4644%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (534 samples, 0.67%)</title><rect x="22.2144%" y="277" width="0.6718%" height="15" fill="rgb(206,64,50)" fg:x="17658" fg:w="534"/><text x="22.4644%" y="287.50"></text></g><g><title>alloc::alloc::alloc (534 samples, 0.67%)</title><rect x="22.2144%" y="261" width="0.6718%" height="15" fill="rgb(234,36,40)" fg:x="17658" fg:w="534"/><text x="22.4644%" y="271.50"></text></g><g><title>malloc (467 samples, 0.59%)</title><rect x="22.2987%" y="245" width="0.5875%" height="15" fill="rgb(213,64,8)" fg:x="17725" fg:w="467"/><text x="22.5487%" y="255.50"></text></g><g><title>[libc.so.6] (300 samples, 0.38%)</title><rect x="22.5088%" y="229" width="0.3774%" height="15" fill="rgb(210,75,36)" fg:x="17892" fg:w="300"/><text x="22.7588%" y="239.50"></text></g><g><title>[libc.so.6] (10 samples, 0.01%)</title><rect x="22.8736%" y="213" width="0.0126%" height="15" fill="rgb(229,88,21)" fg:x="18182" fg:w="10"/><text x="23.1236%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (765 samples, 0.96%)</title><rect x="22.1175%" y="421" width="0.9624%" height="15" fill="rgb(252,204,47)" fg:x="17581" fg:w="765"/><text x="22.3675%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (697 samples, 0.88%)</title><rect x="22.2031%" y="405" width="0.8769%" height="15" fill="rgb(208,77,27)" fg:x="17649" fg:w="697"/><text x="22.4531%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (697 samples, 0.88%)</title><rect x="22.2031%" y="389" width="0.8769%" height="15" fill="rgb(221,76,26)" fg:x="17649" fg:w="697"/><text x="22.4531%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (697 samples, 0.88%)</title><rect x="22.2031%" y="373" width="0.8769%" height="15" fill="rgb(225,139,18)" fg:x="17649" fg:w="697"/><text x="22.4531%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (697 samples, 0.88%)</title><rect x="22.2031%" y="357" width="0.8769%" height="15" fill="rgb(230,137,11)" fg:x="17649" fg:w="697"/><text x="22.4531%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (154 samples, 0.19%)</title><rect x="22.8862%" y="341" width="0.1937%" height="15" fill="rgb(212,28,1)" fg:x="18192" fg:w="154"/><text x="23.1362%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (154 samples, 0.19%)</title><rect x="22.8862%" y="325" width="0.1937%" height="15" fill="rgb(248,164,17)" fg:x="18192" fg:w="154"/><text x="23.1362%" y="335.50"></text></g><g><title>[libc.so.6] (153 samples, 0.19%)</title><rect x="22.8874%" y="309" width="0.1925%" height="15" fill="rgb(222,171,42)" fg:x="18193" fg:w="153"/><text x="23.1374%" y="319.50"></text></g><g><title>__rdl_alloc (213 samples, 0.27%)</title><rect x="24.4072%" y="181" width="0.2680%" height="15" fill="rgb(243,84,45)" fg:x="19401" fg:w="213"/><text x="24.6572%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (88 samples, 0.11%)</title><rect x="24.5644%" y="165" width="0.1107%" height="15" fill="rgb(252,49,23)" fg:x="19526" fg:w="88"/><text x="24.8144%" y="175.50"></text></g><g><title>__rust_alloc (230 samples, 0.29%)</title><rect x="24.6751%" y="181" width="0.2893%" height="15" fill="rgb(215,19,7)" fg:x="19614" fg:w="230"/><text x="24.9251%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,295 samples, 5.40%)</title><rect x="24.1933%" y="277" width="5.4033%" height="15" fill="rgb(238,81,41)" fg:x="19231" fg:w="4295"/><text x="24.4433%" y="287.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,295 samples, 5.40%)</title><rect x="24.1933%" y="261" width="5.4033%" height="15" fill="rgb(210,199,37)" fg:x="19231" fg:w="4295"/><text x="24.4433%" y="271.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4,295 samples, 5.40%)</title><rect x="24.1933%" y="245" width="5.4033%" height="15" fill="rgb(244,192,49)" fg:x="19231" fg:w="4295"/><text x="24.4433%" y="255.50">alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,158 samples, 5.23%)</title><rect x="24.3656%" y="229" width="5.2309%" height="15" fill="rgb(226,211,11)" fg:x="19368" fg:w="4158"/><text x="24.6156%" y="239.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (4,158 samples, 5.23%)</title><rect x="24.3656%" y="213" width="5.2309%" height="15" fill="rgb(236,162,54)" fg:x="19368" fg:w="4158"/><text x="24.6156%" y="223.50">alloc:..</text></g><g><title>alloc::alloc::alloc (4,158 samples, 5.23%)</title><rect x="24.3656%" y="197" width="5.2309%" height="15" fill="rgb(220,229,9)" fg:x="19368" fg:w="4158"/><text x="24.6156%" y="207.50">alloc:..</text></g><g><title>malloc (3,682 samples, 4.63%)</title><rect x="24.9645%" y="181" width="4.6321%" height="15" fill="rgb(250,87,22)" fg:x="19844" fg:w="3682"/><text x="25.2145%" y="191.50">malloc</text></g><g><title>[libc.so.6] (2,755 samples, 3.47%)</title><rect x="26.1307%" y="165" width="3.4659%" height="15" fill="rgb(239,43,17)" fg:x="20771" fg:w="2755"/><text x="26.3807%" y="175.50">[li..</text></g><g><title>[libc.so.6] (128 samples, 0.16%)</title><rect x="29.4355%" y="149" width="0.1610%" height="15" fill="rgb(231,177,25)" fg:x="23398" fg:w="128"/><text x="29.6855%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,237 samples, 6.59%)</title><rect x="24.1933%" y="341" width="6.5883%" height="15" fill="rgb(219,179,1)" fg:x="19231" fg:w="5237"/><text x="24.4433%" y="351.50">&lt;alloc::v..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,237 samples, 6.59%)</title><rect x="24.1933%" y="325" width="6.5883%" height="15" fill="rgb(238,219,53)" fg:x="19231" fg:w="5237"/><text x="24.4433%" y="335.50">alloc::sl..</text></g><g><title>alloc::slice::hack::to_vec (5,237 samples, 6.59%)</title><rect x="24.1933%" y="309" width="6.5883%" height="15" fill="rgb(232,167,36)" fg:x="19231" fg:w="5237"/><text x="24.4433%" y="319.50">alloc::sl..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5,237 samples, 6.59%)</title><rect x="24.1933%" y="293" width="6.5883%" height="15" fill="rgb(244,19,51)" fg:x="19231" fg:w="5237"/><text x="24.4433%" y="303.50">&lt;T as all..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (942 samples, 1.19%)</title><rect x="29.5965%" y="277" width="1.1851%" height="15" fill="rgb(224,6,22)" fg:x="23526" fg:w="942"/><text x="29.8465%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (942 samples, 1.19%)</title><rect x="29.5965%" y="261" width="1.1851%" height="15" fill="rgb(224,145,5)" fg:x="23526" fg:w="942"/><text x="29.8465%" y="271.50"></text></g><g><title>[libc.so.6] (899 samples, 1.13%)</title><rect x="29.6506%" y="245" width="1.1310%" height="15" fill="rgb(234,130,49)" fg:x="23569" fg:w="899"/><text x="29.9006%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6,004 samples, 7.55%)</title><rect x="23.2296%" y="357" width="7.5532%" height="15" fill="rgb(254,6,2)" fg:x="18465" fg:w="6004"/><text x="23.4796%" y="367.50">&lt;alloc::st..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (361 samples, 0.45%)</title><rect x="30.7829%" y="357" width="0.4542%" height="15" fill="rgb(208,96,46)" fg:x="24469" fg:w="361"/><text x="31.0329%" y="367.50"></text></g><g><title>__rdl_alloc (76 samples, 0.10%)</title><rect x="31.3087%" y="261" width="0.0956%" height="15" fill="rgb(239,3,39)" fg:x="24887" fg:w="76"/><text x="31.5587%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (64 samples, 0.08%)</title><rect x="31.3238%" y="245" width="0.0805%" height="15" fill="rgb(233,210,1)" fg:x="24899" fg:w="64"/><text x="31.5738%" y="255.50"></text></g><g><title>__rust_alloc (68 samples, 0.09%)</title><rect x="31.4043%" y="261" width="0.0855%" height="15" fill="rgb(244,137,37)" fg:x="24963" fg:w="68"/><text x="31.6543%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,215 samples, 1.53%)</title><rect x="31.2962%" y="309" width="1.5285%" height="15" fill="rgb(240,136,2)" fg:x="24877" fg:w="1215"/><text x="31.5462%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,215 samples, 1.53%)</title><rect x="31.2962%" y="293" width="1.5285%" height="15" fill="rgb(239,18,37)" fg:x="24877" fg:w="1215"/><text x="31.5462%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1,206 samples, 1.52%)</title><rect x="31.3075%" y="277" width="1.5172%" height="15" fill="rgb(218,185,22)" fg:x="24886" fg:w="1206"/><text x="31.5575%" y="287.50"></text></g><g><title>malloc (1,061 samples, 1.33%)</title><rect x="31.4899%" y="261" width="1.3348%" height="15" fill="rgb(225,218,4)" fg:x="25031" fg:w="1061"/><text x="31.7399%" y="271.50"></text></g><g><title>[libc.so.6] (816 samples, 1.03%)</title><rect x="31.7981%" y="245" width="1.0266%" height="15" fill="rgb(230,182,32)" fg:x="25276" fg:w="816"/><text x="32.0481%" y="255.50"></text></g><g><title>[libc.so.6] (50 samples, 0.06%)</title><rect x="32.7618%" y="229" width="0.0629%" height="15" fill="rgb(242,56,43)" fg:x="26042" fg:w="50"/><text x="33.0118%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,272 samples, 1.60%)</title><rect x="31.2370%" y="357" width="1.6002%" height="15" fill="rgb(233,99,24)" fg:x="24830" fg:w="1272"/><text x="31.4870%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,235 samples, 1.55%)</title><rect x="31.2836%" y="341" width="1.5537%" height="15" fill="rgb(234,209,42)" fg:x="24867" fg:w="1235"/><text x="31.5336%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,235 samples, 1.55%)</title><rect x="31.2836%" y="325" width="1.5537%" height="15" fill="rgb(227,7,12)" fg:x="24867" fg:w="1235"/><text x="31.5336%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::array (10 samples, 0.01%)</title><rect x="32.8247%" y="309" width="0.0126%" height="15" fill="rgb(245,203,43)" fg:x="26092" fg:w="10"/><text x="33.0747%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (10 samples, 0.01%)</title><rect x="32.8247%" y="293" width="0.0126%" height="15" fill="rgb(238,205,33)" fg:x="26092" fg:w="10"/><text x="33.0747%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10,120 samples, 12.73%)</title><rect x="23.0799%" y="421" width="12.7313%" height="15" fill="rgb(231,56,7)" fg:x="18346" fg:w="10120"/><text x="23.3299%" y="431.50">&lt;alloc::vec::Vec&lt;T,..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10,027 samples, 12.61%)</title><rect x="23.1969%" y="405" width="12.6143%" height="15" fill="rgb(244,186,29)" fg:x="18439" fg:w="10027"/><text x="23.4469%" y="415.50">alloc::slice::&lt;impl..</text></g><g><title>alloc::slice::hack::to_vec (10,027 samples, 12.61%)</title><rect x="23.1969%" y="389" width="12.6143%" height="15" fill="rgb(234,111,31)" fg:x="18439" fg:w="10027"/><text x="23.4469%" y="399.50">alloc::slice::hack:..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10,027 samples, 12.61%)</title><rect x="23.1969%" y="373" width="12.6143%" height="15" fill="rgb(241,149,10)" fg:x="18439" fg:w="10027"/><text x="23.4469%" y="383.50">&lt;T as alloc::slice:..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (2,364 samples, 2.97%)</title><rect x="32.8372%" y="357" width="2.9740%" height="15" fill="rgb(249,206,44)" fg:x="26102" fg:w="2364"/><text x="33.0872%" y="367.50">cor..</text></g><g><title>&lt;day16::MazeState as core::clone::Clone&gt;::clone (10,980 samples, 13.81%)</title><rect x="22.0030%" y="437" width="13.8132%" height="15" fill="rgb(251,153,30)" fg:x="17490" fg:w="10980"/><text x="22.2530%" y="447.50">&lt;day16::MazeState as ..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.02%)</title><rect x="36.0452%" y="277" width="0.0239%" height="15" fill="rgb(239,152,38)" fg:x="28652" fg:w="19"/><text x="36.2952%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (65 samples, 0.08%)</title><rect x="36.0289%" y="293" width="0.0818%" height="15" fill="rgb(249,139,47)" fg:x="28639" fg:w="65"/><text x="36.2789%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (33 samples, 0.04%)</title><rect x="36.0691%" y="277" width="0.0415%" height="15" fill="rgb(244,64,35)" fg:x="28671" fg:w="33"/><text x="36.3191%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (97 samples, 0.12%)</title><rect x="36.1522%" y="277" width="0.1220%" height="15" fill="rgb(216,46,15)" fg:x="28737" fg:w="97"/><text x="36.4022%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (340 samples, 0.43%)</title><rect x="35.9056%" y="341" width="0.4277%" height="15" fill="rgb(250,74,19)" fg:x="28541" fg:w="340"/><text x="36.1556%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (340 samples, 0.43%)</title><rect x="35.9056%" y="325" width="0.4277%" height="15" fill="rgb(249,42,33)" fg:x="28541" fg:w="340"/><text x="36.1556%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (340 samples, 0.43%)</title><rect x="35.9056%" y="309" width="0.4277%" height="15" fill="rgb(242,149,17)" fg:x="28541" fg:w="340"/><text x="36.1556%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (177 samples, 0.22%)</title><rect x="36.1107%" y="293" width="0.2227%" height="15" fill="rgb(244,29,21)" fg:x="28704" fg:w="177"/><text x="36.3607%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (47 samples, 0.06%)</title><rect x="36.2742%" y="277" width="0.0591%" height="15" fill="rgb(220,130,37)" fg:x="28834" fg:w="47"/><text x="36.5242%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (104 samples, 0.13%)</title><rect x="36.3333%" y="341" width="0.1308%" height="15" fill="rgb(211,67,2)" fg:x="28881" fg:w="104"/><text x="36.5833%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (25 samples, 0.03%)</title><rect x="36.4327%" y="325" width="0.0315%" height="15" fill="rgb(235,68,52)" fg:x="28960" fg:w="25"/><text x="36.6827%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (25 samples, 0.03%)</title><rect x="36.4327%" y="309" width="0.0315%" height="15" fill="rgb(246,142,3)" fg:x="28960" fg:w="25"/><text x="36.6827%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (25 samples, 0.03%)</title><rect x="36.4327%" y="293" width="0.0315%" height="15" fill="rgb(241,25,7)" fg:x="28960" fg:w="25"/><text x="36.6827%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (80 samples, 0.10%)</title><rect x="36.4692%" y="245" width="0.1006%" height="15" fill="rgb(242,119,39)" fg:x="28989" fg:w="80"/><text x="36.7192%" y="255.50"></text></g><g><title>core::hash::sip::u8to64_le (32 samples, 0.04%)</title><rect x="36.5296%" y="229" width="0.0403%" height="15" fill="rgb(241,98,45)" fg:x="29037" fg:w="32"/><text x="36.7796%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (688 samples, 0.87%)</title><rect x="35.8553%" y="373" width="0.8655%" height="15" fill="rgb(254,28,30)" fg:x="28501" fg:w="688"/><text x="36.1053%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (685 samples, 0.86%)</title><rect x="35.8590%" y="357" width="0.8618%" height="15" fill="rgb(241,142,54)" fg:x="28504" fg:w="685"/><text x="36.1090%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (204 samples, 0.26%)</title><rect x="36.4642%" y="341" width="0.2566%" height="15" fill="rgb(222,85,15)" fg:x="28985" fg:w="204"/><text x="36.7142%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (202 samples, 0.25%)</title><rect x="36.4667%" y="325" width="0.2541%" height="15" fill="rgb(210,85,47)" fg:x="28987" fg:w="202"/><text x="36.7167%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (202 samples, 0.25%)</title><rect x="36.4667%" y="309" width="0.2541%" height="15" fill="rgb(224,206,25)" fg:x="28987" fg:w="202"/><text x="36.7167%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (202 samples, 0.25%)</title><rect x="36.4667%" y="293" width="0.2541%" height="15" fill="rgb(243,201,19)" fg:x="28987" fg:w="202"/><text x="36.7167%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (202 samples, 0.25%)</title><rect x="36.4667%" y="277" width="0.2541%" height="15" fill="rgb(236,59,4)" fg:x="28987" fg:w="202"/><text x="36.7167%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (202 samples, 0.25%)</title><rect x="36.4667%" y="261" width="0.2541%" height="15" fill="rgb(254,179,45)" fg:x="28987" fg:w="202"/><text x="36.7167%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (120 samples, 0.15%)</title><rect x="36.5698%" y="245" width="0.1510%" height="15" fill="rgb(226,14,10)" fg:x="29069" fg:w="120"/><text x="36.8198%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (97 samples, 0.12%)</title><rect x="36.5988%" y="229" width="0.1220%" height="15" fill="rgb(244,27,41)" fg:x="29092" fg:w="97"/><text x="36.8488%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (34 samples, 0.04%)</title><rect x="36.6780%" y="213" width="0.0428%" height="15" fill="rgb(235,35,32)" fg:x="29155" fg:w="34"/><text x="36.9280%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.08%)</title><rect x="36.7724%" y="325" width="0.0780%" height="15" fill="rgb(218,68,31)" fg:x="29230" fg:w="62"/><text x="37.0224%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (62 samples, 0.08%)</title><rect x="36.7724%" y="309" width="0.0780%" height="15" fill="rgb(207,120,37)" fg:x="29230" fg:w="62"/><text x="37.0224%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (464 samples, 0.58%)</title><rect x="36.8504%" y="309" width="0.5837%" height="15" fill="rgb(227,98,0)" fg:x="29292" fg:w="464"/><text x="37.1004%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (449 samples, 0.56%)</title><rect x="36.8693%" y="293" width="0.5649%" height="15" fill="rgb(207,7,3)" fg:x="29307" fg:w="449"/><text x="37.1193%" y="303.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (449 samples, 0.56%)</title><rect x="36.8693%" y="277" width="0.5649%" height="15" fill="rgb(206,98,19)" fg:x="29307" fg:w="449"/><text x="37.1193%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (449 samples, 0.56%)</title><rect x="36.8693%" y="261" width="0.5649%" height="15" fill="rgb(217,5,26)" fg:x="29307" fg:w="449"/><text x="37.1193%" y="271.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (449 samples, 0.56%)</title><rect x="36.8693%" y="245" width="0.5649%" height="15" fill="rgb(235,190,38)" fg:x="29307" fg:w="449"/><text x="37.1193%" y="255.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (449 samples, 0.56%)</title><rect x="36.8693%" y="229" width="0.5649%" height="15" fill="rgb(247,86,24)" fg:x="29307" fg:w="449"/><text x="37.1193%" y="239.50"></text></g><g><title>[libc.so.6] (272 samples, 0.34%)</title><rect x="37.0919%" y="213" width="0.3422%" height="15" fill="rgb(205,101,16)" fg:x="29484" fg:w="272"/><text x="37.3419%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (8 samples, 0.01%)</title><rect x="37.4341%" y="309" width="0.0101%" height="15" fill="rgb(246,168,33)" fg:x="29756" fg:w="8"/><text x="37.6841%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (8 samples, 0.01%)</title><rect x="37.4341%" y="293" width="0.0101%" height="15" fill="rgb(231,114,1)" fg:x="29756" fg:w="8"/><text x="37.6841%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (8 samples, 0.01%)</title><rect x="37.4341%" y="277" width="0.0101%" height="15" fill="rgb(207,184,53)" fg:x="29756" fg:w="8"/><text x="37.6841%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (8 samples, 0.01%)</title><rect x="37.4341%" y="261" width="0.0101%" height="15" fill="rgb(224,95,51)" fg:x="29756" fg:w="8"/><text x="37.6841%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (485 samples, 0.61%)</title><rect x="36.8504%" y="325" width="0.6101%" height="15" fill="rgb(212,188,45)" fg:x="29292" fg:w="485"/><text x="37.1004%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (13 samples, 0.02%)</title><rect x="37.4442%" y="309" width="0.0164%" height="15" fill="rgb(223,154,38)" fg:x="29764" fg:w="13"/><text x="37.6942%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (13 samples, 0.02%)</title><rect x="37.4442%" y="293" width="0.0164%" height="15" fill="rgb(251,22,52)" fg:x="29764" fg:w="13"/><text x="37.6942%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13 samples, 0.02%)</title><rect x="37.4442%" y="277" width="0.0164%" height="15" fill="rgb(229,209,22)" fg:x="29764" fg:w="13"/><text x="37.6942%" y="287.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (13 samples, 0.02%)</title><rect x="37.4442%" y="261" width="0.0164%" height="15" fill="rgb(234,138,34)" fg:x="29764" fg:w="13"/><text x="37.6942%" y="271.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (13 samples, 0.02%)</title><rect x="37.4442%" y="245" width="0.0164%" height="15" fill="rgb(212,95,11)" fg:x="29764" fg:w="13"/><text x="37.6942%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (96 samples, 0.12%)</title><rect x="37.4605%" y="325" width="0.1208%" height="15" fill="rgb(240,179,47)" fg:x="29777" fg:w="96"/><text x="37.7105%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (71 samples, 0.09%)</title><rect x="37.5813%" y="325" width="0.0893%" height="15" fill="rgb(240,163,11)" fg:x="29873" fg:w="71"/><text x="37.8313%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (71 samples, 0.09%)</title><rect x="37.5813%" y="309" width="0.0893%" height="15" fill="rgb(236,37,12)" fg:x="29873" fg:w="71"/><text x="37.8313%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (71 samples, 0.09%)</title><rect x="37.5813%" y="293" width="0.0893%" height="15" fill="rgb(232,164,16)" fg:x="29873" fg:w="71"/><text x="37.8313%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1,508 samples, 1.90%)</title><rect x="35.8163%" y="437" width="1.8971%" height="15" fill="rgb(244,205,15)" fg:x="28470" fg:w="1508"/><text x="36.0663%" y="447.50">&lt;..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,508 samples, 1.90%)</title><rect x="35.8163%" y="421" width="1.8971%" height="15" fill="rgb(223,117,47)" fg:x="28470" fg:w="1508"/><text x="36.0663%" y="431.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,508 samples, 1.90%)</title><rect x="35.8163%" y="405" width="1.8971%" height="15" fill="rgb(244,107,35)" fg:x="28470" fg:w="1508"/><text x="36.0663%" y="415.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,508 samples, 1.90%)</title><rect x="35.8163%" y="389" width="1.8971%" height="15" fill="rgb(205,140,8)" fg:x="28470" fg:w="1508"/><text x="36.0663%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (789 samples, 0.99%)</title><rect x="36.7208%" y="373" width="0.9926%" height="15" fill="rgb(228,84,46)" fg:x="29189" fg:w="789"/><text x="36.9708%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (789 samples, 0.99%)</title><rect x="36.7208%" y="357" width="0.9926%" height="15" fill="rgb(254,188,9)" fg:x="29189" fg:w="789"/><text x="36.9708%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (789 samples, 0.99%)</title><rect x="36.7208%" y="341" width="0.9926%" height="15" fill="rgb(206,112,54)" fg:x="29189" fg:w="789"/><text x="36.9708%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (34 samples, 0.04%)</title><rect x="37.6706%" y="325" width="0.0428%" height="15" fill="rgb(216,84,49)" fg:x="29944" fg:w="34"/><text x="37.9206%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (34 samples, 0.04%)</title><rect x="37.6706%" y="309" width="0.0428%" height="15" fill="rgb(214,194,35)" fg:x="29944" fg:w="34"/><text x="37.9206%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (37 samples, 0.05%)</title><rect x="37.8354%" y="373" width="0.0465%" height="15" fill="rgb(249,28,3)" fg:x="30075" fg:w="37"/><text x="38.0854%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (37 samples, 0.05%)</title><rect x="37.8354%" y="357" width="0.0465%" height="15" fill="rgb(222,56,52)" fg:x="30075" fg:w="37"/><text x="38.0854%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (37 samples, 0.05%)</title><rect x="37.8354%" y="341" width="0.0465%" height="15" fill="rgb(245,217,50)" fg:x="30075" fg:w="37"/><text x="38.0854%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (157 samples, 0.20%)</title><rect x="37.8820%" y="373" width="0.1975%" height="15" fill="rgb(213,201,24)" fg:x="30112" fg:w="157"/><text x="38.1320%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (340 samples, 0.43%)</title><rect x="37.7134%" y="437" width="0.4277%" height="15" fill="rgb(248,116,28)" fg:x="29978" fg:w="340"/><text x="37.9634%" y="447.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (340 samples, 0.43%)</title><rect x="37.7134%" y="421" width="0.4277%" height="15" fill="rgb(219,72,43)" fg:x="29978" fg:w="340"/><text x="37.9634%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (340 samples, 0.43%)</title><rect x="37.7134%" y="405" width="0.4277%" height="15" fill="rgb(209,138,14)" fg:x="29978" fg:w="340"/><text x="37.9634%" y="415.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (320 samples, 0.40%)</title><rect x="37.7386%" y="389" width="0.4026%" height="15" fill="rgb(222,18,33)" fg:x="29998" fg:w="320"/><text x="37.9886%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (49 samples, 0.06%)</title><rect x="38.0795%" y="373" width="0.0616%" height="15" fill="rgb(213,199,7)" fg:x="30269" fg:w="49"/><text x="38.3295%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (49 samples, 0.06%)</title><rect x="38.0795%" y="357" width="0.0616%" height="15" fill="rgb(250,110,10)" fg:x="30269" fg:w="49"/><text x="38.3295%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (49 samples, 0.06%)</title><rect x="38.0795%" y="341" width="0.0616%" height="15" fill="rgb(248,123,6)" fg:x="30269" fg:w="49"/><text x="38.3295%" y="351.50"></text></g><g><title>__rdl_dealloc (13 samples, 0.02%)</title><rect x="38.1411%" y="437" width="0.0164%" height="15" fill="rgb(206,91,31)" fg:x="30318" fg:w="13"/><text x="38.3911%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (13 samples, 0.02%)</title><rect x="38.1411%" y="421" width="0.0164%" height="15" fill="rgb(211,154,13)" fg:x="30318" fg:w="13"/><text x="38.3911%" y="431.50"></text></g><g><title>__rust_dealloc (43 samples, 0.05%)</title><rect x="38.1575%" y="437" width="0.0541%" height="15" fill="rgb(225,148,7)" fg:x="30331" fg:w="43"/><text x="38.4075%" y="447.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::is_empty (11 samples, 0.01%)</title><rect x="38.2116%" y="437" width="0.0138%" height="15" fill="rgb(220,160,43)" fg:x="30374" fg:w="11"/><text x="38.4616%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (10 samples, 0.01%)</title><rect x="38.3487%" y="405" width="0.0126%" height="15" fill="rgb(213,52,39)" fg:x="30483" fg:w="10"/><text x="38.5987%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (10 samples, 0.01%)</title><rect x="38.3487%" y="389" width="0.0126%" height="15" fill="rgb(243,137,7)" fg:x="30483" fg:w="10"/><text x="38.5987%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (17 samples, 0.02%)</title><rect x="38.3412%" y="421" width="0.0214%" height="15" fill="rgb(230,79,13)" fg:x="30477" fg:w="17"/><text x="38.5912%" y="431.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::is_empty (8 samples, 0.01%)</title><rect x="38.4934%" y="389" width="0.0101%" height="15" fill="rgb(247,105,23)" fg:x="30598" fg:w="8"/><text x="38.7434%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (9 samples, 0.01%)</title><rect x="38.6393%" y="357" width="0.0113%" height="15" fill="rgb(223,179,41)" fg:x="30714" fg:w="9"/><text x="38.8893%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (9 samples, 0.01%)</title><rect x="38.6393%" y="341" width="0.0113%" height="15" fill="rgb(218,9,34)" fg:x="30714" fg:w="9"/><text x="38.8893%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9 samples, 0.01%)</title><rect x="38.6393%" y="325" width="0.0113%" height="15" fill="rgb(222,106,8)" fg:x="30714" fg:w="9"/><text x="38.8893%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (9 samples, 0.01%)</title><rect x="38.6393%" y="309" width="0.0113%" height="15" fill="rgb(211,220,0)" fg:x="30714" fg:w="9"/><text x="38.8893%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (9 samples, 0.01%)</title><rect x="38.6393%" y="293" width="0.0113%" height="15" fill="rgb(229,52,16)" fg:x="30714" fg:w="9"/><text x="38.8893%" y="303.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (12 samples, 0.02%)</title><rect x="38.6506%" y="357" width="0.0151%" height="15" fill="rgb(212,155,18)" fg:x="30723" fg:w="12"/><text x="38.9006%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.02%)</title><rect x="38.6506%" y="341" width="0.0151%" height="15" fill="rgb(242,21,14)" fg:x="30723" fg:w="12"/><text x="38.9006%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (262 samples, 0.33%)</title><rect x="38.6657%" y="357" width="0.3296%" height="15" fill="rgb(222,19,48)" fg:x="30735" fg:w="262"/><text x="38.9157%" y="367.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (262 samples, 0.33%)</title><rect x="38.6657%" y="341" width="0.3296%" height="15" fill="rgb(232,45,27)" fg:x="30735" fg:w="262"/><text x="38.9157%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (77 samples, 0.10%)</title><rect x="39.0004%" y="325" width="0.0969%" height="15" fill="rgb(249,103,42)" fg:x="31001" fg:w="77"/><text x="39.2504%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (386 samples, 0.49%)</title><rect x="38.6179%" y="373" width="0.4856%" height="15" fill="rgb(246,81,33)" fg:x="30697" fg:w="386"/><text x="38.8679%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;day16::MazeState&gt;&gt; (82 samples, 0.10%)</title><rect x="39.0004%" y="357" width="0.1032%" height="15" fill="rgb(252,33,42)" fg:x="31001" fg:w="82"/><text x="39.2504%" y="367.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.10%)</title><rect x="39.0004%" y="341" width="0.1032%" height="15" fill="rgb(209,212,41)" fg:x="31001" fg:w="82"/><text x="39.2504%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (360 samples, 0.45%)</title><rect x="39.1060%" y="357" width="0.4529%" height="15" fill="rgb(207,154,6)" fg:x="31085" fg:w="360"/><text x="39.3560%" y="367.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (488 samples, 0.61%)</title><rect x="39.1060%" y="373" width="0.6139%" height="15" fill="rgb(223,64,47)" fg:x="31085" fg:w="488"/><text x="39.3560%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (128 samples, 0.16%)</title><rect x="39.5589%" y="357" width="0.1610%" height="15" fill="rgb(211,161,38)" fg:x="31445" fg:w="128"/><text x="39.8089%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (128 samples, 0.16%)</title><rect x="39.5589%" y="341" width="0.1610%" height="15" fill="rgb(219,138,40)" fg:x="31445" fg:w="128"/><text x="39.8089%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (112 samples, 0.14%)</title><rect x="39.7200%" y="373" width="0.1409%" height="15" fill="rgb(241,228,46)" fg:x="31573" fg:w="112"/><text x="39.9700%" y="383.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (112 samples, 0.14%)</title><rect x="39.7200%" y="357" width="0.1409%" height="15" fill="rgb(223,209,38)" fg:x="31573" fg:w="112"/><text x="39.9700%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (88 samples, 0.11%)</title><rect x="39.8609%" y="373" width="0.1107%" height="15" fill="rgb(236,164,45)" fg:x="31685" fg:w="88"/><text x="40.1109%" y="383.50"></text></g><g><title>core::cmp::PartialOrd::le (88 samples, 0.11%)</title><rect x="39.8609%" y="357" width="0.1107%" height="15" fill="rgb(231,15,5)" fg:x="31685" fg:w="88"/><text x="40.1109%" y="367.50"></text></g><g><title>&lt;day16::MazeState as core::cmp::PartialOrd&gt;::partial_cmp (75 samples, 0.09%)</title><rect x="39.8772%" y="341" width="0.0944%" height="15" fill="rgb(252,35,15)" fg:x="31698" fg:w="75"/><text x="40.1272%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.05%)</title><rect x="39.9716%" y="325" width="0.0516%" height="15" fill="rgb(248,181,18)" fg:x="31773" fg:w="41"/><text x="40.2216%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_down_to_bottom (1,209 samples, 1.52%)</title><rect x="38.5034%" y="389" width="1.5210%" height="15" fill="rgb(233,39,42)" fg:x="30606" fg:w="1209"/><text x="38.7534%" y="399.50"></text></g><g><title>core::mem::drop (42 samples, 0.05%)</title><rect x="39.9716%" y="373" width="0.0528%" height="15" fill="rgb(238,110,33)" fg:x="31773" fg:w="42"/><text x="40.2216%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;day16::MazeState&gt;&gt; (42 samples, 0.05%)</title><rect x="39.9716%" y="357" width="0.0528%" height="15" fill="rgb(233,195,10)" fg:x="31773" fg:w="42"/><text x="40.2216%" y="367.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.05%)</title><rect x="39.9716%" y="341" width="0.0528%" height="15" fill="rgb(254,105,3)" fg:x="31773" fg:w="42"/><text x="40.2216%" y="351.50"></text></g><g><title>core::ptr::read (38 samples, 0.05%)</title><rect x="40.0244%" y="325" width="0.0478%" height="15" fill="rgb(221,225,9)" fg:x="31815" fg:w="38"/><text x="40.2744%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (1,493 samples, 1.88%)</title><rect x="38.2254%" y="437" width="1.8782%" height="15" fill="rgb(224,227,45)" fg:x="30385" fg:w="1493"/><text x="38.4754%" y="447.50">a..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,384 samples, 1.74%)</title><rect x="38.3625%" y="421" width="1.7411%" height="15" fill="rgb(229,198,43)" fg:x="30494" fg:w="1384"/><text x="38.6125%" y="431.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop::{{closure}} (1,306 samples, 1.64%)</title><rect x="38.4607%" y="405" width="1.6430%" height="15" fill="rgb(206,209,35)" fg:x="30572" fg:w="1306"/><text x="38.7107%" y="415.50"></text></g><g><title>core::mem::swap (63 samples, 0.08%)</title><rect x="40.0244%" y="389" width="0.0793%" height="15" fill="rgb(245,195,53)" fg:x="31815" fg:w="63"/><text x="40.2744%" y="399.50"></text></g><g><title>core::ptr::swap_nonoverlapping (63 samples, 0.08%)</title><rect x="40.0244%" y="373" width="0.0793%" height="15" fill="rgb(240,92,26)" fg:x="31815" fg:w="63"/><text x="40.2744%" y="383.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (63 samples, 0.08%)</title><rect x="40.0244%" y="357" width="0.0793%" height="15" fill="rgb(207,40,23)" fg:x="31815" fg:w="63"/><text x="40.2744%" y="367.50"></text></g><g><title>core::mem::swap_simple (63 samples, 0.08%)</title><rect x="40.0244%" y="341" width="0.0793%" height="15" fill="rgb(223,111,35)" fg:x="31815" fg:w="63"/><text x="40.2744%" y="351.50"></text></g><g><title>core::ptr::write (25 samples, 0.03%)</title><rect x="40.0722%" y="325" width="0.0315%" height="15" fill="rgb(229,147,28)" fg:x="31853" fg:w="25"/><text x="40.3222%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (9 samples, 0.01%)</title><rect x="40.2282%" y="405" width="0.0113%" height="15" fill="rgb(211,29,28)" fg:x="31977" fg:w="9"/><text x="40.4782%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (9 samples, 0.01%)</title><rect x="40.2282%" y="389" width="0.0113%" height="15" fill="rgb(228,72,33)" fg:x="31977" fg:w="9"/><text x="40.4782%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9 samples, 0.01%)</title><rect x="40.2282%" y="373" width="0.0113%" height="15" fill="rgb(205,214,31)" fg:x="31977" fg:w="9"/><text x="40.4782%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (9 samples, 0.01%)</title><rect x="40.2282%" y="357" width="0.0113%" height="15" fill="rgb(224,111,15)" fg:x="31977" fg:w="9"/><text x="40.4782%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (9 samples, 0.01%)</title><rect x="40.2282%" y="341" width="0.0113%" height="15" fill="rgb(253,21,26)" fg:x="31977" fg:w="9"/><text x="40.4782%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (78 samples, 0.10%)</title><rect x="40.2395%" y="389" width="0.0981%" height="15" fill="rgb(245,139,43)" fg:x="31986" fg:w="78"/><text x="40.4895%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (87 samples, 0.11%)</title><rect x="40.2395%" y="405" width="0.1094%" height="15" fill="rgb(252,170,7)" fg:x="31986" fg:w="87"/><text x="40.4895%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (9 samples, 0.01%)</title><rect x="40.3377%" y="389" width="0.0113%" height="15" fill="rgb(231,118,14)" fg:x="32064" fg:w="9"/><text x="40.5877%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (9 samples, 0.01%)</title><rect x="40.3377%" y="373" width="0.0113%" height="15" fill="rgb(238,83,0)" fg:x="32064" fg:w="9"/><text x="40.5877%" y="383.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (436 samples, 0.55%)</title><rect x="40.3490%" y="389" width="0.5485%" height="15" fill="rgb(221,39,39)" fg:x="32073" fg:w="436"/><text x="40.5990%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (437 samples, 0.55%)</title><rect x="40.3490%" y="405" width="0.5498%" height="15" fill="rgb(222,119,46)" fg:x="32073" fg:w="437"/><text x="40.5990%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (39 samples, 0.05%)</title><rect x="40.8987%" y="405" width="0.0491%" height="15" fill="rgb(222,165,49)" fg:x="32510" fg:w="39"/><text x="41.1487%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::le (39 samples, 0.05%)</title><rect x="40.8987%" y="389" width="0.0491%" height="15" fill="rgb(219,113,52)" fg:x="32510" fg:w="39"/><text x="41.1487%" y="399.50"></text></g><g><title>&lt;day16::MazeState as core::cmp::PartialOrd&gt;::partial_cmp (26 samples, 0.03%)</title><rect x="40.9151%" y="373" width="0.0327%" height="15" fill="rgb(214,7,15)" fg:x="32523" fg:w="26"/><text x="41.1651%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (71 samples, 0.09%)</title><rect x="40.9478%" y="373" width="0.0893%" height="15" fill="rgb(235,32,4)" fg:x="32549" fg:w="71"/><text x="41.1978%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (697 samples, 0.88%)</title><rect x="40.1854%" y="421" width="0.8769%" height="15" fill="rgb(238,90,54)" fg:x="31943" fg:w="697"/><text x="40.4354%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;day16::MazeState&gt;&gt; (91 samples, 0.11%)</title><rect x="40.9478%" y="405" width="0.1145%" height="15" fill="rgb(213,208,19)" fg:x="32549" fg:w="91"/><text x="41.1978%" y="415.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (91 samples, 0.11%)</title><rect x="40.9478%" y="389" width="0.1145%" height="15" fill="rgb(233,156,4)" fg:x="32549" fg:w="91"/><text x="41.1978%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (20 samples, 0.03%)</title><rect x="41.0371%" y="373" width="0.0252%" height="15" fill="rgb(207,194,5)" fg:x="32620" fg:w="20"/><text x="41.2871%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (20 samples, 0.03%)</title><rect x="41.0371%" y="357" width="0.0252%" height="15" fill="rgb(206,111,30)" fg:x="32620" fg:w="20"/><text x="41.2871%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (20 samples, 0.03%)</title><rect x="41.0371%" y="341" width="0.0252%" height="15" fill="rgb(243,70,54)" fg:x="32620" fg:w="20"/><text x="41.2871%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (20 samples, 0.03%)</title><rect x="41.0371%" y="325" width="0.0252%" height="15" fill="rgb(242,28,8)" fg:x="32620" fg:w="20"/><text x="41.2871%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 0.03%)</title><rect x="41.0799%" y="373" width="0.0264%" height="15" fill="rgb(219,106,18)" fg:x="32654" fg:w="21"/><text x="41.3299%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (21 samples, 0.03%)</title><rect x="41.0799%" y="357" width="0.0264%" height="15" fill="rgb(244,222,10)" fg:x="32654" fg:w="21"/><text x="41.3299%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (21 samples, 0.03%)</title><rect x="41.0799%" y="341" width="0.0264%" height="15" fill="rgb(236,179,52)" fg:x="32654" fg:w="21"/><text x="41.3299%" y="351.50"></text></g><g><title>alloc::alloc::realloc (21 samples, 0.03%)</title><rect x="41.0799%" y="325" width="0.0264%" height="15" fill="rgb(213,23,39)" fg:x="32654" fg:w="21"/><text x="41.3299%" y="335.50"></text></g><g><title>realloc (19 samples, 0.02%)</title><rect x="41.0824%" y="309" width="0.0239%" height="15" fill="rgb(238,48,10)" fg:x="32656" fg:w="19"/><text x="41.3324%" y="319.50"></text></g><g><title>[libc.so.6] (19 samples, 0.02%)</title><rect x="41.0824%" y="293" width="0.0239%" height="15" fill="rgb(251,196,23)" fg:x="32656" fg:w="19"/><text x="41.3324%" y="303.50"></text></g><g><title>[libc.so.6] (14 samples, 0.02%)</title><rect x="41.0887%" y="277" width="0.0176%" height="15" fill="rgb(250,152,24)" fg:x="32661" fg:w="14"/><text x="41.3387%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (24 samples, 0.03%)</title><rect x="41.0799%" y="405" width="0.0302%" height="15" fill="rgb(209,150,17)" fg:x="32654" fg:w="24"/><text x="41.3299%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (24 samples, 0.03%)</title><rect x="41.0799%" y="389" width="0.0302%" height="15" fill="rgb(234,202,34)" fg:x="32654" fg:w="24"/><text x="41.3299%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (891 samples, 1.12%)</title><rect x="40.1037%" y="437" width="1.1209%" height="15" fill="rgb(253,148,53)" fg:x="31878" fg:w="891"/><text x="40.3537%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (129 samples, 0.16%)</title><rect x="41.0623%" y="421" width="0.1623%" height="15" fill="rgb(218,129,16)" fg:x="32640" fg:w="129"/><text x="41.3123%" y="431.50"></text></g><g><title>core::ptr::write (85 samples, 0.11%)</title><rect x="41.1176%" y="405" width="0.1069%" height="15" fill="rgb(216,85,19)" fg:x="32684" fg:w="85"/><text x="41.3676%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (46 samples, 0.06%)</title><rect x="41.2862%" y="389" width="0.0579%" height="15" fill="rgb(235,228,7)" fg:x="32818" fg:w="46"/><text x="41.5362%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (9 samples, 0.01%)</title><rect x="41.3441%" y="389" width="0.0113%" height="15" fill="rgb(245,175,0)" fg:x="32864" fg:w="9"/><text x="41.5941%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (10 samples, 0.01%)</title><rect x="41.3554%" y="389" width="0.0126%" height="15" fill="rgb(208,168,36)" fg:x="32873" fg:w="10"/><text x="41.6054%" y="399.50"></text></g><g><title>__rdl_realloc (63 samples, 0.08%)</title><rect x="41.4498%" y="325" width="0.0793%" height="15" fill="rgb(246,171,24)" fg:x="32948" fg:w="63"/><text x="41.6998%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (43 samples, 0.05%)</title><rect x="41.4749%" y="309" width="0.0541%" height="15" fill="rgb(215,142,24)" fg:x="32968" fg:w="43"/><text x="41.7249%" y="319.50"></text></g><g><title>__rust_realloc (59 samples, 0.07%)</title><rect x="41.5290%" y="325" width="0.0742%" height="15" fill="rgb(250,187,7)" fg:x="33011" fg:w="59"/><text x="41.7790%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2,006 samples, 2.52%)</title><rect x="41.4309%" y="373" width="2.5236%" height="15" fill="rgb(228,66,33)" fg:x="32933" fg:w="2006"/><text x="41.6809%" y="383.50">&lt;a..</text></g><g><title>alloc::alloc::Global::grow_impl (2,006 samples, 2.52%)</title><rect x="41.4309%" y="357" width="2.5236%" height="15" fill="rgb(234,215,21)" fg:x="32933" fg:w="2006"/><text x="41.6809%" y="367.50">al..</text></g><g><title>alloc::alloc::realloc (1,998 samples, 2.51%)</title><rect x="41.4410%" y="341" width="2.5136%" height="15" fill="rgb(222,191,20)" fg:x="32941" fg:w="1998"/><text x="41.6910%" y="351.50">al..</text></g><g><title>realloc (1,869 samples, 2.35%)</title><rect x="41.6032%" y="325" width="2.3513%" height="15" fill="rgb(245,79,54)" fg:x="33070" fg:w="1869"/><text x="41.8532%" y="335.50">r..</text></g><g><title>[libc.so.6] (1,767 samples, 2.22%)</title><rect x="41.7316%" y="309" width="2.2229%" height="15" fill="rgb(240,10,37)" fg:x="33172" fg:w="1767"/><text x="41.9816%" y="319.50">[..</text></g><g><title>[libc.so.6] (1,546 samples, 1.94%)</title><rect x="42.0096%" y="293" width="1.9449%" height="15" fill="rgb(214,192,32)" fg:x="33393" fg:w="1546"/><text x="42.2596%" y="303.50">[..</text></g><g><title>[libc.so.6] (70 samples, 0.09%)</title><rect x="43.8664%" y="277" width="0.0881%" height="15" fill="rgb(209,36,54)" fg:x="34869" fg:w="70"/><text x="44.1164%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,068 samples, 2.60%)</title><rect x="41.3680%" y="389" width="2.6016%" height="15" fill="rgb(220,10,11)" fg:x="32883" fg:w="2068"/><text x="41.6180%" y="399.50">al..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (12 samples, 0.02%)</title><rect x="43.9545%" y="373" width="0.0151%" height="15" fill="rgb(221,106,17)" fg:x="34939" fg:w="12"/><text x="44.2045%" y="383.50"></text></g><g><title>core::alloc::layout::Layout::array (15 samples, 0.02%)</title><rect x="43.9696%" y="389" width="0.0189%" height="15" fill="rgb(251,142,44)" fg:x="34951" fg:w="15"/><text x="44.2196%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (15 samples, 0.02%)</title><rect x="43.9696%" y="373" width="0.0189%" height="15" fill="rgb(238,13,15)" fg:x="34951" fg:w="15"/><text x="44.2196%" y="383.50"></text></g><g><title>core::cmp::max (34 samples, 0.04%)</title><rect x="43.9885%" y="389" width="0.0428%" height="15" fill="rgb(208,107,27)" fg:x="34966" fg:w="34"/><text x="44.2385%" y="399.50"></text></g><g><title>core::cmp::Ord::max (34 samples, 0.04%)</title><rect x="43.9885%" y="373" width="0.0428%" height="15" fill="rgb(205,136,37)" fg:x="34966" fg:w="34"/><text x="44.2385%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,222 samples, 2.80%)</title><rect x="41.2636%" y="421" width="2.7954%" height="15" fill="rgb(250,205,27)" fg:x="32800" fg:w="2222"/><text x="41.5136%" y="431.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2,213 samples, 2.78%)</title><rect x="41.2749%" y="405" width="2.7840%" height="15" fill="rgb(210,80,43)" fg:x="32809" fg:w="2213"/><text x="41.5249%" y="415.50">al..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (22 samples, 0.03%)</title><rect x="44.0312%" y="389" width="0.0277%" height="15" fill="rgb(247,160,36)" fg:x="35000" fg:w="22"/><text x="44.2812%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (22 samples, 0.03%)</title><rect x="44.0312%" y="373" width="0.0277%" height="15" fill="rgb(234,13,49)" fg:x="35000" fg:w="22"/><text x="44.2812%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (29 samples, 0.04%)</title><rect x="44.0640%" y="421" width="0.0365%" height="15" fill="rgb(234,122,0)" fg:x="35026" fg:w="29"/><text x="44.3140%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (29 samples, 0.04%)</title><rect x="44.0640%" y="405" width="0.0365%" height="15" fill="rgb(207,146,38)" fg:x="35026" fg:w="29"/><text x="44.3140%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,331 samples, 2.93%)</title><rect x="41.2246%" y="437" width="2.9325%" height="15" fill="rgb(207,177,25)" fg:x="32769" fg:w="2331"/><text x="41.4746%" y="447.50">al..</text></g><g><title>core::ptr::write (45 samples, 0.06%)</title><rect x="44.1004%" y="421" width="0.0566%" height="15" fill="rgb(211,178,42)" fg:x="35055" fg:w="45"/><text x="44.3504%" y="431.50"></text></g><g><title>cfree (510 samples, 0.64%)</title><rect x="44.1571%" y="437" width="0.6416%" height="15" fill="rgb(230,69,54)" fg:x="35100" fg:w="510"/><text x="44.4071%" y="447.50"></text></g><g><title>[libc.so.6] (417 samples, 0.52%)</title><rect x="44.2741%" y="421" width="0.5246%" height="15" fill="rgb(214,135,41)" fg:x="35193" fg:w="417"/><text x="44.5241%" y="431.50"></text></g><g><title>[libc.so.6] (14 samples, 0.02%)</title><rect x="44.7810%" y="405" width="0.0176%" height="15" fill="rgb(237,67,25)" fg:x="35596" fg:w="14"/><text x="45.0310%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.03%)</title><rect x="44.7999%" y="373" width="0.0264%" height="15" fill="rgb(222,189,50)" fg:x="35611" fg:w="21"/><text x="45.0499%" y="383.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.03%)</title><rect x="44.7999%" y="357" width="0.0264%" height="15" fill="rgb(245,148,34)" fg:x="35611" fg:w="21"/><text x="45.0499%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.03%)</title><rect x="44.7999%" y="341" width="0.0264%" height="15" fill="rgb(222,29,6)" fg:x="35611" fg:w="21"/><text x="45.0499%" y="351.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (9 samples, 0.01%)</title><rect x="44.8150%" y="325" width="0.0113%" height="15" fill="rgb(221,189,43)" fg:x="35623" fg:w="9"/><text x="45.0650%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (111 samples, 0.14%)</title><rect x="44.7987%" y="437" width="0.1396%" height="15" fill="rgb(207,36,27)" fg:x="35610" fg:w="111"/><text x="45.0487%" y="447.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&lt;&amp;usize&gt;&gt;::sum (111 samples, 0.14%)</title><rect x="44.7987%" y="421" width="0.1396%" height="15" fill="rgb(217,90,24)" fg:x="35610" fg:w="111"/><text x="45.0487%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (110 samples, 0.14%)</title><rect x="44.7999%" y="405" width="0.1384%" height="15" fill="rgb(224,66,35)" fg:x="35611" fg:w="110"/><text x="45.0499%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (110 samples, 0.14%)</title><rect x="44.7999%" y="389" width="0.1384%" height="15" fill="rgb(221,13,50)" fg:x="35611" fg:w="110"/><text x="45.0499%" y="399.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (89 samples, 0.11%)</title><rect x="44.8263%" y="373" width="0.1120%" height="15" fill="rgb(236,68,49)" fg:x="35632" fg:w="89"/><text x="45.0763%" y="383.50"></text></g><g><title>day16::compute::{{closure}} (86 samples, 0.11%)</title><rect x="44.8301%" y="357" width="0.1082%" height="15" fill="rgb(229,146,28)" fg:x="35635" fg:w="86"/><text x="45.0801%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (86 samples, 0.11%)</title><rect x="44.8301%" y="341" width="0.1082%" height="15" fill="rgb(225,31,38)" fg:x="35635" fg:w="86"/><text x="45.0801%" y="351.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (86 samples, 0.11%)</title><rect x="44.8301%" y="325" width="0.1082%" height="15" fill="rgb(250,208,3)" fg:x="35635" fg:w="86"/><text x="45.0801%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (86 samples, 0.11%)</title><rect x="44.8301%" y="309" width="0.1082%" height="15" fill="rgb(246,54,23)" fg:x="35635" fg:w="86"/><text x="45.0801%" y="319.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (83 samples, 0.10%)</title><rect x="44.8339%" y="293" width="0.1044%" height="15" fill="rgb(243,76,11)" fg:x="35638" fg:w="83"/><text x="45.0839%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (83 samples, 0.10%)</title><rect x="44.8339%" y="277" width="0.1044%" height="15" fill="rgb(245,21,50)" fg:x="35638" fg:w="83"/><text x="45.0839%" y="287.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (83 samples, 0.10%)</title><rect x="44.8339%" y="261" width="0.1044%" height="15" fill="rgb(228,9,43)" fg:x="35638" fg:w="83"/><text x="45.0839%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (83 samples, 0.10%)</title><rect x="44.8339%" y="245" width="0.1044%" height="15" fill="rgb(208,100,47)" fg:x="35638" fg:w="83"/><text x="45.0839%" y="255.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (83 samples, 0.10%)</title><rect x="44.8339%" y="229" width="0.1044%" height="15" fill="rgb(232,26,8)" fg:x="35638" fg:w="83"/><text x="45.0839%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (83 samples, 0.10%)</title><rect x="44.8339%" y="213" width="0.1044%" height="15" fill="rgb(216,166,38)" fg:x="35638" fg:w="83"/><text x="45.0839%" y="223.50"></text></g><g><title>[libc.so.6] (80 samples, 0.10%)</title><rect x="44.8377%" y="197" width="0.1006%" height="15" fill="rgb(251,202,51)" fg:x="35641" fg:w="80"/><text x="45.0877%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (309 samples, 0.39%)</title><rect x="44.9383%" y="437" width="0.3887%" height="15" fill="rgb(254,216,34)" fg:x="35721" fg:w="309"/><text x="45.1883%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.02%)</title><rect x="45.3270%" y="373" width="0.0176%" height="15" fill="rgb(251,32,27)" fg:x="36030" fg:w="14"/><text x="45.5770%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.02%)</title><rect x="45.3270%" y="357" width="0.0176%" height="15" fill="rgb(208,127,28)" fg:x="36030" fg:w="14"/><text x="45.5770%" y="367.50"></text></g><g><title>cfree (14 samples, 0.02%)</title><rect x="45.3270%" y="341" width="0.0176%" height="15" fill="rgb(224,137,22)" fg:x="36030" fg:w="14"/><text x="45.5770%" y="351.50"></text></g><g><title>[libc.so.6] (14 samples, 0.02%)</title><rect x="45.3270%" y="325" width="0.0176%" height="15" fill="rgb(254,70,32)" fg:x="36030" fg:w="14"/><text x="45.5770%" y="335.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="45.3283%" y="309" width="0.0164%" height="15" fill="rgb(229,75,37)" fg:x="36031" fg:w="13"/><text x="45.5783%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::BinaryHeap&lt;day16::MazeState&gt;&gt; (15 samples, 0.02%)</title><rect x="45.3270%" y="437" width="0.0189%" height="15" fill="rgb(252,64,23)" fg:x="36030" fg:w="15"/><text x="45.5770%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;day16::MazeState&gt;&gt; (15 samples, 0.02%)</title><rect x="45.3270%" y="421" width="0.0189%" height="15" fill="rgb(232,162,48)" fg:x="36030" fg:w="15"/><text x="45.5770%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;day16::MazeState&gt;&gt; (15 samples, 0.02%)</title><rect x="45.3270%" y="405" width="0.0189%" height="15" fill="rgb(246,160,12)" fg:x="36030" fg:w="15"/><text x="45.5770%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="45.3270%" y="389" width="0.0189%" height="15" fill="rgb(247,166,0)" fg:x="36030" fg:w="15"/><text x="45.5770%" y="399.50"></text></g><g><title>__rust_dealloc (18 samples, 0.02%)</title><rect x="45.3585%" y="341" width="0.0226%" height="15" fill="rgb(249,219,21)" fg:x="36055" fg:w="18"/><text x="45.6085%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (203 samples, 0.26%)</title><rect x="45.3484%" y="373" width="0.2554%" height="15" fill="rgb(205,209,3)" fg:x="36047" fg:w="203"/><text x="45.5984%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (203 samples, 0.26%)</title><rect x="45.3484%" y="357" width="0.2554%" height="15" fill="rgb(243,44,1)" fg:x="36047" fg:w="203"/><text x="45.5984%" y="367.50"></text></g><g><title>cfree (177 samples, 0.22%)</title><rect x="45.3811%" y="341" width="0.2227%" height="15" fill="rgb(206,159,16)" fg:x="36073" fg:w="177"/><text x="45.6311%" y="351.50"></text></g><g><title>[libc.so.6] (113 samples, 0.14%)</title><rect x="45.4616%" y="325" width="0.1422%" height="15" fill="rgb(244,77,30)" fg:x="36137" fg:w="113"/><text x="45.7116%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (222 samples, 0.28%)</title><rect x="45.3459%" y="437" width="0.2793%" height="15" fill="rgb(218,69,12)" fg:x="36045" fg:w="222"/><text x="45.5959%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (222 samples, 0.28%)</title><rect x="45.3459%" y="421" width="0.2793%" height="15" fill="rgb(212,87,7)" fg:x="36045" fg:w="222"/><text x="45.5959%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (222 samples, 0.28%)</title><rect x="45.3459%" y="405" width="0.2793%" height="15" fill="rgb(245,114,25)" fg:x="36045" fg:w="222"/><text x="45.5959%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (222 samples, 0.28%)</title><rect x="45.3459%" y="389" width="0.2793%" height="15" fill="rgb(210,61,42)" fg:x="36045" fg:w="222"/><text x="45.5959%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (17 samples, 0.02%)</title><rect x="45.6038%" y="373" width="0.0214%" height="15" fill="rgb(211,52,33)" fg:x="36250" fg:w="17"/><text x="45.8538%" y="383.50"></text></g><g><title>__rdl_dealloc (242 samples, 0.30%)</title><rect x="45.9950%" y="293" width="0.3044%" height="15" fill="rgb(234,58,33)" fg:x="36561" fg:w="242"/><text x="46.2450%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (242 samples, 0.30%)</title><rect x="45.9950%" y="277" width="0.3044%" height="15" fill="rgb(220,115,36)" fg:x="36561" fg:w="242"/><text x="46.2450%" y="287.50"></text></g><g><title>__rust_dealloc (528 samples, 0.66%)</title><rect x="46.2995%" y="293" width="0.6642%" height="15" fill="rgb(243,153,54)" fg:x="36803" fg:w="528"/><text x="46.5495%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,912 samples, 8.70%)</title><rect x="45.9196%" y="325" width="8.6955%" height="15" fill="rgb(251,47,18)" fg:x="36501" fg:w="6912"/><text x="46.1696%" y="335.50">&lt;alloc::allo..</text></g><g><title>alloc::alloc::dealloc (6,912 samples, 8.70%)</title><rect x="45.9196%" y="309" width="8.6955%" height="15" fill="rgb(242,102,42)" fg:x="36501" fg:w="6912"/><text x="46.1696%" y="319.50">alloc::alloc..</text></g><g><title>cfree (6,082 samples, 7.65%)</title><rect x="46.9637%" y="293" width="7.6514%" height="15" fill="rgb(234,31,38)" fg:x="37331" fg:w="6082"/><text x="47.2137%" y="303.50">cfree</text></g><g><title>[libc.so.6] (4,238 samples, 5.33%)</title><rect x="49.2835%" y="277" width="5.3316%" height="15" fill="rgb(221,117,51)" fg:x="39175" fg:w="4238"/><text x="49.5335%" y="287.50">[libc.s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,058 samples, 10.14%)</title><rect x="45.6252%" y="421" width="10.1373%" height="15" fill="rgb(212,20,18)" fg:x="36267" fg:w="8058"/><text x="45.8752%" y="431.50">&lt;alloc::vec::Ve..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (8,049 samples, 10.13%)</title><rect x="45.6365%" y="405" width="10.1259%" height="15" fill="rgb(245,133,36)" fg:x="36276" fg:w="8049"/><text x="45.8865%" y="415.50">core::ptr::drop..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (7,825 samples, 9.84%)</title><rect x="45.9183%" y="389" width="9.8441%" height="15" fill="rgb(212,6,19)" fg:x="36500" fg:w="7825"/><text x="46.1683%" y="399.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7,825 samples, 9.84%)</title><rect x="45.9183%" y="373" width="9.8441%" height="15" fill="rgb(218,1,36)" fg:x="36500" fg:w="7825"/><text x="46.1683%" y="383.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (7,825 samples, 9.84%)</title><rect x="45.9183%" y="357" width="9.8441%" height="15" fill="rgb(246,84,54)" fg:x="36500" fg:w="7825"/><text x="46.1683%" y="367.50">core::ptr::dro..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,825 samples, 9.84%)</title><rect x="45.9183%" y="341" width="9.8441%" height="15" fill="rgb(242,110,6)" fg:x="36500" fg:w="7825"/><text x="46.1683%" y="351.50">&lt;alloc::raw_ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (912 samples, 1.15%)</title><rect x="54.6151%" y="325" width="1.1473%" height="15" fill="rgb(214,47,5)" fg:x="43413" fg:w="912"/><text x="54.8651%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::array (17 samples, 0.02%)</title><rect x="55.7410%" y="309" width="0.0214%" height="15" fill="rgb(218,159,25)" fg:x="44308" fg:w="17"/><text x="55.9910%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (17 samples, 0.02%)</title><rect x="55.7410%" y="293" width="0.0214%" height="15" fill="rgb(215,211,28)" fg:x="44308" fg:w="17"/><text x="55.9910%" y="303.50"></text></g><g><title>__rdl_dealloc (17 samples, 0.02%)</title><rect x="55.7813%" y="357" width="0.0214%" height="15" fill="rgb(238,59,32)" fg:x="44340" fg:w="17"/><text x="56.0313%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (17 samples, 0.02%)</title><rect x="55.7813%" y="341" width="0.0214%" height="15" fill="rgb(226,82,3)" fg:x="44340" fg:w="17"/><text x="56.0313%" y="351.50"></text></g><g><title>__rust_dealloc (49 samples, 0.06%)</title><rect x="55.8027%" y="357" width="0.0616%" height="15" fill="rgb(240,164,32)" fg:x="44357" fg:w="49"/><text x="56.0527%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (388 samples, 0.49%)</title><rect x="55.7624%" y="389" width="0.4881%" height="15" fill="rgb(232,46,7)" fg:x="44325" fg:w="388"/><text x="56.0124%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (388 samples, 0.49%)</title><rect x="55.7624%" y="373" width="0.4881%" height="15" fill="rgb(229,129,53)" fg:x="44325" fg:w="388"/><text x="56.0124%" y="383.50"></text></g><g><title>cfree (307 samples, 0.39%)</title><rect x="55.8643%" y="357" width="0.3862%" height="15" fill="rgb(234,188,29)" fg:x="44406" fg:w="307"/><text x="56.1143%" y="367.50"></text></g><g><title>[libc.so.6] (190 samples, 0.24%)</title><rect x="56.0115%" y="341" width="0.2390%" height="15" fill="rgb(246,141,4)" fg:x="44523" fg:w="190"/><text x="56.2615%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (8,528 samples, 10.73%)</title><rect x="45.6252%" y="437" width="10.7285%" height="15" fill="rgb(229,23,39)" fg:x="36267" fg:w="8528"/><text x="45.8752%" y="447.50">core::ptr::drop_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (470 samples, 0.59%)</title><rect x="55.7624%" y="421" width="0.5913%" height="15" fill="rgb(206,12,3)" fg:x="44325" fg:w="470"/><text x="56.0124%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (470 samples, 0.59%)</title><rect x="55.7624%" y="405" width="0.5913%" height="15" fill="rgb(252,226,20)" fg:x="44325" fg:w="470"/><text x="56.0124%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (82 samples, 0.10%)</title><rect x="56.2506%" y="389" width="0.1032%" height="15" fill="rgb(216,123,35)" fg:x="44713" fg:w="82"/><text x="56.5006%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (8 samples, 0.01%)</title><rect x="56.4619%" y="309" width="0.0101%" height="15" fill="rgb(212,68,40)" fg:x="44881" fg:w="8"/><text x="56.7119%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (8 samples, 0.01%)</title><rect x="56.4619%" y="293" width="0.0101%" height="15" fill="rgb(254,125,32)" fg:x="44881" fg:w="8"/><text x="56.7119%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (17 samples, 0.02%)</title><rect x="56.4720%" y="309" width="0.0214%" height="15" fill="rgb(253,97,22)" fg:x="44889" fg:w="17"/><text x="56.7220%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (19 samples, 0.02%)</title><rect x="56.4934%" y="309" width="0.0239%" height="15" fill="rgb(241,101,14)" fg:x="44906" fg:w="19"/><text x="56.7434%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 0.10%)</title><rect x="56.4481%" y="341" width="0.0981%" height="15" fill="rgb(238,103,29)" fg:x="44870" fg:w="78"/><text x="56.6981%" y="351.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (68 samples, 0.09%)</title><rect x="56.4606%" y="325" width="0.0855%" height="15" fill="rgb(233,195,47)" fg:x="44880" fg:w="68"/><text x="56.7106%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (23 samples, 0.03%)</title><rect x="56.5173%" y="309" width="0.0289%" height="15" fill="rgb(246,218,30)" fg:x="44925" fg:w="23"/><text x="56.7673%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (23 samples, 0.03%)</title><rect x="56.5173%" y="293" width="0.0289%" height="15" fill="rgb(219,145,47)" fg:x="44925" fg:w="23"/><text x="56.7673%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (23 samples, 0.03%)</title><rect x="56.5173%" y="277" width="0.0289%" height="15" fill="rgb(243,12,26)" fg:x="44925" fg:w="23"/><text x="56.7673%" y="287.50"></text></g><g><title>__rust_dealloc (14 samples, 0.02%)</title><rect x="56.5751%" y="181" width="0.0176%" height="15" fill="rgb(214,87,16)" fg:x="44971" fg:w="14"/><text x="56.8251%" y="191.50"></text></g><g><title>[libc.so.6] (204 samples, 0.26%)</title><rect x="56.9639%" y="165" width="0.2566%" height="15" fill="rgb(208,99,42)" fg:x="45280" fg:w="204"/><text x="57.2139%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (521 samples, 0.66%)</title><rect x="56.5663%" y="213" width="0.6554%" height="15" fill="rgb(253,99,2)" fg:x="44964" fg:w="521"/><text x="56.8163%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (521 samples, 0.66%)</title><rect x="56.5663%" y="197" width="0.6554%" height="15" fill="rgb(220,168,23)" fg:x="44964" fg:w="521"/><text x="56.8163%" y="207.50"></text></g><g><title>cfree (500 samples, 0.63%)</title><rect x="56.5927%" y="181" width="0.6290%" height="15" fill="rgb(242,38,24)" fg:x="44985" fg:w="500"/><text x="56.8427%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (635 samples, 0.80%)</title><rect x="56.5462%" y="277" width="0.7989%" height="15" fill="rgb(225,182,9)" fg:x="44948" fg:w="635"/><text x="56.7962%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (635 samples, 0.80%)</title><rect x="56.5462%" y="261" width="0.7989%" height="15" fill="rgb(243,178,37)" fg:x="44948" fg:w="635"/><text x="56.7962%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (635 samples, 0.80%)</title><rect x="56.5462%" y="245" width="0.7989%" height="15" fill="rgb(232,139,19)" fg:x="44948" fg:w="635"/><text x="56.7962%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (635 samples, 0.80%)</title><rect x="56.5462%" y="229" width="0.7989%" height="15" fill="rgb(225,201,24)" fg:x="44948" fg:w="635"/><text x="56.7962%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (98 samples, 0.12%)</title><rect x="57.2218%" y="213" width="0.1233%" height="15" fill="rgb(221,47,46)" fg:x="45485" fg:w="98"/><text x="57.4718%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array (18 samples, 0.02%)</title><rect x="57.3224%" y="197" width="0.0226%" height="15" fill="rgb(249,23,13)" fg:x="45565" fg:w="18"/><text x="57.5724%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (18 samples, 0.02%)</title><rect x="57.3224%" y="181" width="0.0226%" height="15" fill="rgb(219,9,5)" fg:x="45565" fg:w="18"/><text x="57.5724%" y="191.50"></text></g><g><title>__rdl_dealloc (118 samples, 0.15%)</title><rect x="57.4469%" y="133" width="0.1484%" height="15" fill="rgb(254,171,16)" fg:x="45664" fg:w="118"/><text x="57.6969%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (118 samples, 0.15%)</title><rect x="57.4469%" y="117" width="0.1484%" height="15" fill="rgb(230,171,20)" fg:x="45664" fg:w="118"/><text x="57.6969%" y="127.50"></text></g><g><title>__rust_dealloc (256 samples, 0.32%)</title><rect x="57.5954%" y="133" width="0.3221%" height="15" fill="rgb(210,71,41)" fg:x="45782" fg:w="256"/><text x="57.8454%" y="143.50"></text></g><g><title>[libc.so.6] (2,211 samples, 2.78%)</title><rect x="59.7240%" y="117" width="2.7815%" height="15" fill="rgb(206,173,20)" fg:x="47474" fg:w="2211"/><text x="59.9740%" y="127.50">[l..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,059 samples, 5.11%)</title><rect x="57.4004%" y="165" width="5.1064%" height="15" fill="rgb(233,88,34)" fg:x="45627" fg:w="4059"/><text x="57.6504%" y="175.50">&lt;alloc..</text></g><g><title>alloc::alloc::dealloc (4,059 samples, 5.11%)</title><rect x="57.4004%" y="149" width="5.1064%" height="15" fill="rgb(223,209,46)" fg:x="45627" fg:w="4059"/><text x="57.6504%" y="159.50">alloc:..</text></g><g><title>cfree (3,648 samples, 4.59%)</title><rect x="57.9174%" y="133" width="4.5893%" height="15" fill="rgb(250,43,18)" fg:x="46038" fg:w="3648"/><text x="58.1674%" y="143.50">cfree</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,516 samples, 5.68%)</title><rect x="57.3450%" y="261" width="5.6813%" height="15" fill="rgb(208,13,10)" fg:x="45583" fg:w="4516"/><text x="57.5950%" y="271.50">&lt;alloc:..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (4,514 samples, 5.68%)</title><rect x="57.3476%" y="245" width="5.6788%" height="15" fill="rgb(212,200,36)" fg:x="45585" fg:w="4514"/><text x="57.5976%" y="255.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4,473 samples, 5.63%)</title><rect x="57.3991%" y="229" width="5.6272%" height="15" fill="rgb(225,90,30)" fg:x="45626" fg:w="4473"/><text x="57.6491%" y="239.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4,473 samples, 5.63%)</title><rect x="57.3991%" y="213" width="5.6272%" height="15" fill="rgb(236,182,39)" fg:x="45626" fg:w="4473"/><text x="57.6491%" y="223.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4,473 samples, 5.63%)</title><rect x="57.3991%" y="197" width="5.6272%" height="15" fill="rgb(212,144,35)" fg:x="45626" fg:w="4473"/><text x="57.6491%" y="207.50">core::p..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,473 samples, 5.63%)</title><rect x="57.3991%" y="181" width="5.6272%" height="15" fill="rgb(228,63,44)" fg:x="45626" fg:w="4473"/><text x="57.6491%" y="191.50">&lt;alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (413 samples, 0.52%)</title><rect x="62.5068%" y="165" width="0.5196%" height="15" fill="rgb(228,109,6)" fg:x="49686" fg:w="413"/><text x="62.7568%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array (18 samples, 0.02%)</title><rect x="63.0037%" y="149" width="0.0226%" height="15" fill="rgb(238,117,24)" fg:x="50081" fg:w="18"/><text x="63.2537%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (18 samples, 0.02%)</title><rect x="63.0037%" y="133" width="0.0226%" height="15" fill="rgb(242,26,26)" fg:x="50081" fg:w="18"/><text x="63.2537%" y="143.50"></text></g><g><title>__rdl_dealloc (9 samples, 0.01%)</title><rect x="63.0389%" y="197" width="0.0113%" height="15" fill="rgb(221,92,48)" fg:x="50109" fg:w="9"/><text x="63.2889%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.01%)</title><rect x="63.0389%" y="181" width="0.0113%" height="15" fill="rgb(209,209,32)" fg:x="50109" fg:w="9"/><text x="63.2889%" y="191.50"></text></g><g><title>__rust_dealloc (26 samples, 0.03%)</title><rect x="63.0502%" y="197" width="0.0327%" height="15" fill="rgb(221,70,22)" fg:x="50118" fg:w="26"/><text x="63.3002%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,152 samples, 3.97%)</title><rect x="63.0276%" y="229" width="3.9653%" height="15" fill="rgb(248,145,5)" fg:x="50100" fg:w="3152"/><text x="63.2776%" y="239.50">&lt;all..</text></g><g><title>alloc::alloc::dealloc (3,152 samples, 3.97%)</title><rect x="63.0276%" y="213" width="3.9653%" height="15" fill="rgb(226,116,26)" fg:x="50100" fg:w="3152"/><text x="63.2776%" y="223.50">allo..</text></g><g><title>cfree (3,108 samples, 3.91%)</title><rect x="63.0829%" y="197" width="3.9100%" height="15" fill="rgb(244,5,17)" fg:x="50144" fg:w="3108"/><text x="63.3329%" y="207.50">cfree</text></g><g><title>[libc.so.6] (3,005 samples, 3.78%)</title><rect x="63.2125%" y="181" width="3.7804%" height="15" fill="rgb(252,159,33)" fg:x="50247" fg:w="3005"/><text x="63.4625%" y="191.50">[lib..</text></g><g><title>[libc.so.6] (2,622 samples, 3.30%)</title><rect x="63.6943%" y="165" width="3.2986%" height="15" fill="rgb(206,71,0)" fg:x="50630" fg:w="2622"/><text x="63.9443%" y="175.50">[li..</text></g><g><title>[libc.so.6] (922 samples, 1.16%)</title><rect x="65.8330%" y="149" width="1.1599%" height="15" fill="rgb(233,118,54)" fg:x="52330" fg:w="922"/><text x="66.0830%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (8,310 samples, 10.45%)</title><rect x="56.5462%" y="325" width="10.4543%" height="15" fill="rgb(234,83,48)" fg:x="44948" fg:w="8310"/><text x="56.7962%" y="335.50">core::ptr::mut_..</text></g><g><title>core::ptr::drop_in_place&lt;(day16::MazeState,())&gt; (8,310 samples, 10.45%)</title><rect x="56.5462%" y="309" width="10.4543%" height="15" fill="rgb(228,3,54)" fg:x="44948" fg:w="8310"/><text x="56.7962%" y="319.50">core::ptr::drop..</text></g><g><title>core::ptr::drop_in_place&lt;day16::MazeState&gt; (8,310 samples, 10.45%)</title><rect x="56.5462%" y="293" width="10.4543%" height="15" fill="rgb(226,155,13)" fg:x="44948" fg:w="8310"/><text x="56.7962%" y="303.50">core::ptr::drop..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (7,675 samples, 9.66%)</title><rect x="57.3450%" y="277" width="9.6554%" height="15" fill="rgb(241,28,37)" fg:x="45583" fg:w="7675"/><text x="57.5950%" y="287.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (3,159 samples, 3.97%)</title><rect x="63.0263%" y="261" width="3.9741%" height="15" fill="rgb(233,93,10)" fg:x="50099" fg:w="3159"/><text x="63.2763%" y="271.50">core..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,159 samples, 3.97%)</title><rect x="63.0263%" y="245" width="3.9741%" height="15" fill="rgb(225,113,19)" fg:x="50099" fg:w="3159"/><text x="63.2763%" y="255.50">&lt;all..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (8,494 samples, 10.69%)</title><rect x="56.3550%" y="357" width="10.6858%" height="15" fill="rgb(241,2,18)" fg:x="44796" fg:w="8494"/><text x="56.6050%" y="367.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (8,342 samples, 10.49%)</title><rect x="56.5462%" y="341" width="10.4945%" height="15" fill="rgb(228,207,21)" fg:x="44948" fg:w="8342"/><text x="56.7962%" y="351.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (32 samples, 0.04%)</title><rect x="67.0005%" y="325" width="0.0403%" height="15" fill="rgb(213,211,35)" fg:x="53258" fg:w="32"/><text x="67.2505%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (32 samples, 0.04%)</title><rect x="67.0005%" y="309" width="0.0403%" height="15" fill="rgb(209,83,10)" fg:x="53258" fg:w="32"/><text x="67.2505%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (32 samples, 0.04%)</title><rect x="67.0005%" y="293" width="0.0403%" height="15" fill="rgb(209,164,1)" fg:x="53258" fg:w="32"/><text x="67.2505%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,496 samples, 10.69%)</title><rect x="56.3537%" y="373" width="10.6883%" height="15" fill="rgb(213,184,43)" fg:x="44795" fg:w="8496"/><text x="56.6037%" y="383.50">&lt;hashbrown::raw:..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;day16::MazeState&gt;&gt; (11,390 samples, 14.33%)</title><rect x="56.3537%" y="437" width="14.3290%" height="15" fill="rgb(231,61,34)" fg:x="44795" fg:w="11390"/><text x="56.6037%" y="447.50">core::ptr::drop_in_pla..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;day16::MazeState,std::collections::hash::map::RandomState&gt;&gt; (11,390 samples, 14.33%)</title><rect x="56.3537%" y="421" width="14.3290%" height="15" fill="rgb(235,75,3)" fg:x="44795" fg:w="11390"/><text x="56.6037%" y="431.50">core::ptr::drop_in_pla..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;day16::MazeState,(),std::collections::hash::map::RandomState&gt;&gt; (11,390 samples, 14.33%)</title><rect x="56.3537%" y="405" width="14.3290%" height="15" fill="rgb(220,106,47)" fg:x="44795" fg:w="11390"/><text x="56.6037%" y="415.50">core::ptr::drop_in_pla..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(day16::MazeState,())&gt;&gt; (11,390 samples, 14.33%)</title><rect x="56.3537%" y="389" width="14.3290%" height="15" fill="rgb(210,196,33)" fg:x="44795" fg:w="11390"/><text x="56.6037%" y="399.50">core::ptr::drop_in_pla..</text></g><g><title>cfree (2,894 samples, 3.64%)</title><rect x="67.0420%" y="373" width="3.6408%" height="15" fill="rgb(229,154,42)" fg:x="53291" fg:w="2894"/><text x="67.2920%" y="383.50">cfree</text></g><g><title>[libc.so.6] (2,894 samples, 3.64%)</title><rect x="67.0420%" y="357" width="3.6408%" height="15" fill="rgb(228,114,26)" fg:x="53291" fg:w="2894"/><text x="67.2920%" y="367.50">[lib..</text></g><g><title>[libc.so.6] (2,892 samples, 3.64%)</title><rect x="67.0445%" y="341" width="3.6382%" height="15" fill="rgb(208,144,1)" fg:x="53293" fg:w="2892"/><text x="67.2945%" y="351.50">[lib..</text></g><g><title>[libc.so.6] (1,093 samples, 1.38%)</title><rect x="69.3077%" y="325" width="1.3750%" height="15" fill="rgb(239,112,37)" fg:x="55092" fg:w="1093"/><text x="69.5577%" y="335.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (4,145 samples, 5.21%)</title><rect x="70.9331%" y="389" width="5.2146%" height="15" fill="rgb(210,96,50)" fg:x="56384" fg:w="4145"/><text x="71.1831%" y="399.50">&lt;T as ..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (4,145 samples, 5.21%)</title><rect x="70.9331%" y="373" width="5.2146%" height="15" fill="rgb(222,178,2)" fg:x="56384" fg:w="4145"/><text x="71.1831%" y="383.50">&lt;alloc..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (4,145 samples, 5.21%)</title><rect x="70.9331%" y="357" width="5.2146%" height="15" fill="rgb(226,74,18)" fg:x="56384" fg:w="4145"/><text x="71.1831%" y="367.50">core::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,145 samples, 5.21%)</title><rect x="70.9331%" y="341" width="5.2146%" height="15" fill="rgb(225,67,54)" fg:x="56384" fg:w="4145"/><text x="71.1831%" y="351.50">core::..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4,145 samples, 5.21%)</title><rect x="70.9331%" y="325" width="5.2146%" height="15" fill="rgb(251,92,32)" fg:x="56384" fg:w="4145"/><text x="71.1831%" y="335.50">core::..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4,145 samples, 5.21%)</title><rect x="70.9331%" y="309" width="5.2146%" height="15" fill="rgb(228,149,22)" fg:x="56384" fg:w="4145"/><text x="71.1831%" y="319.50">&lt;[A] a..</text></g><g><title>[libc.so.6] (3,560 samples, 4.48%)</title><rect x="71.6690%" y="293" width="4.4786%" height="15" fill="rgb(243,54,13)" fg:x="56969" fg:w="3560"/><text x="71.9190%" y="303.50">[libc..</text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (4,384 samples, 5.52%)</title><rect x="70.6827%" y="437" width="5.5152%" height="15" fill="rgb(243,180,28)" fg:x="56185" fg:w="4384"/><text x="70.9327%" y="447.50">core::s..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (4,384 samples, 5.52%)</title><rect x="70.6827%" y="421" width="5.5152%" height="15" fill="rgb(208,167,24)" fg:x="56185" fg:w="4384"/><text x="70.9327%" y="431.50">&lt;T as c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (4,384 samples, 5.52%)</title><rect x="70.6827%" y="405" width="5.5152%" height="15" fill="rgb(245,73,45)" fg:x="56185" fg:w="4384"/><text x="70.9327%" y="415.50">&lt;core::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.05%)</title><rect x="76.1476%" y="389" width="0.0503%" height="15" fill="rgb(237,203,48)" fg:x="60529" fg:w="40"/><text x="76.3976%" y="399.50"></text></g><g><title>day16::MazeState::build (30 samples, 0.04%)</title><rect x="76.1980%" y="437" width="0.0377%" height="15" fill="rgb(211,197,16)" fg:x="60569" fg:w="30"/><text x="76.4480%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (27 samples, 0.03%)</title><rect x="76.3691%" y="277" width="0.0340%" height="15" fill="rgb(243,99,51)" fg:x="60705" fg:w="27"/><text x="76.6191%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (51 samples, 0.06%)</title><rect x="76.3552%" y="293" width="0.0642%" height="15" fill="rgb(215,123,29)" fg:x="60694" fg:w="51"/><text x="76.6052%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13 samples, 0.02%)</title><rect x="76.4030%" y="277" width="0.0164%" height="15" fill="rgb(239,186,37)" fg:x="60732" fg:w="13"/><text x="76.6530%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (86 samples, 0.11%)</title><rect x="76.4735%" y="277" width="0.1082%" height="15" fill="rgb(252,136,39)" fg:x="60788" fg:w="86"/><text x="76.7235%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (292 samples, 0.37%)</title><rect x="76.2571%" y="341" width="0.3673%" height="15" fill="rgb(223,213,32)" fg:x="60616" fg:w="292"/><text x="76.5071%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (292 samples, 0.37%)</title><rect x="76.2571%" y="325" width="0.3673%" height="15" fill="rgb(233,115,5)" fg:x="60616" fg:w="292"/><text x="76.5071%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (292 samples, 0.37%)</title><rect x="76.2571%" y="309" width="0.3673%" height="15" fill="rgb(207,226,44)" fg:x="60616" fg:w="292"/><text x="76.5071%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (163 samples, 0.21%)</title><rect x="76.4194%" y="293" width="0.2051%" height="15" fill="rgb(208,126,0)" fg:x="60745" fg:w="163"/><text x="76.6694%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (34 samples, 0.04%)</title><rect x="76.5817%" y="277" width="0.0428%" height="15" fill="rgb(244,66,21)" fg:x="60874" fg:w="34"/><text x="76.8317%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (39 samples, 0.05%)</title><rect x="76.6244%" y="341" width="0.0491%" height="15" fill="rgb(222,97,12)" fg:x="60908" fg:w="39"/><text x="76.8744%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (13 samples, 0.02%)</title><rect x="76.6571%" y="325" width="0.0164%" height="15" fill="rgb(219,213,19)" fg:x="60934" fg:w="13"/><text x="76.9071%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (13 samples, 0.02%)</title><rect x="76.6571%" y="309" width="0.0164%" height="15" fill="rgb(252,169,30)" fg:x="60934" fg:w="13"/><text x="76.9071%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (13 samples, 0.02%)</title><rect x="76.6571%" y="293" width="0.0164%" height="15" fill="rgb(206,32,51)" fg:x="60934" fg:w="13"/><text x="76.9071%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (109 samples, 0.14%)</title><rect x="76.7943%" y="229" width="0.1371%" height="15" fill="rgb(250,172,42)" fg:x="61043" fg:w="109"/><text x="77.0443%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (48 samples, 0.06%)</title><rect x="76.8710%" y="213" width="0.0604%" height="15" fill="rgb(209,34,43)" fg:x="61104" fg:w="48"/><text x="77.1210%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (255 samples, 0.32%)</title><rect x="76.7930%" y="309" width="0.3208%" height="15" fill="rgb(223,11,35)" fg:x="61042" fg:w="255"/><text x="77.0430%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (255 samples, 0.32%)</title><rect x="76.7930%" y="293" width="0.3208%" height="15" fill="rgb(251,219,26)" fg:x="61042" fg:w="255"/><text x="77.0430%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (255 samples, 0.32%)</title><rect x="76.7930%" y="277" width="0.3208%" height="15" fill="rgb(231,119,3)" fg:x="61042" fg:w="255"/><text x="77.0430%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (255 samples, 0.32%)</title><rect x="76.7930%" y="261" width="0.3208%" height="15" fill="rgb(216,97,11)" fg:x="61042" fg:w="255"/><text x="77.0430%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (255 samples, 0.32%)</title><rect x="76.7930%" y="245" width="0.3208%" height="15" fill="rgb(223,59,9)" fg:x="61042" fg:w="255"/><text x="77.0430%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u8 (145 samples, 0.18%)</title><rect x="76.9314%" y="229" width="0.1824%" height="15" fill="rgb(233,93,31)" fg:x="61152" fg:w="145"/><text x="77.1814%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (133 samples, 0.17%)</title><rect x="76.9465%" y="213" width="0.1673%" height="15" fill="rgb(239,81,33)" fg:x="61164" fg:w="133"/><text x="77.1965%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (45 samples, 0.06%)</title><rect x="77.0572%" y="197" width="0.0566%" height="15" fill="rgb(213,120,34)" fg:x="61252" fg:w="45"/><text x="77.3072%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (63 samples, 0.08%)</title><rect x="78.4448%" y="149" width="0.0793%" height="15" fill="rgb(243,49,53)" fg:x="62355" fg:w="63"/><text x="78.6948%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (202 samples, 0.25%)</title><rect x="78.3442%" y="165" width="0.2541%" height="15" fill="rgb(247,216,33)" fg:x="62275" fg:w="202"/><text x="78.5942%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (59 samples, 0.07%)</title><rect x="78.5241%" y="149" width="0.0742%" height="15" fill="rgb(226,26,14)" fg:x="62418" fg:w="59"/><text x="78.7741%" y="159.50"></text></g><g><title>core::cmp::min (33 samples, 0.04%)</title><rect x="78.5983%" y="165" width="0.0415%" height="15" fill="rgb(215,49,53)" fg:x="62477" fg:w="33"/><text x="78.8483%" y="175.50"></text></g><g><title>core::cmp::Ord::min (33 samples, 0.04%)</title><rect x="78.5983%" y="149" width="0.0415%" height="15" fill="rgb(245,162,40)" fg:x="62477" fg:w="33"/><text x="78.8483%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,554 samples, 1.95%)</title><rect x="77.3541%" y="181" width="1.9550%" height="15" fill="rgb(229,68,17)" fg:x="61488" fg:w="1554"/><text x="77.6041%" y="191.50">&lt;..</text></g><g><title>core::hash::sip::u8to64_le (532 samples, 0.67%)</title><rect x="78.6398%" y="165" width="0.6693%" height="15" fill="rgb(213,182,10)" fg:x="62510" fg:w="532"/><text x="78.8898%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (16 samples, 0.02%)</title><rect x="80.4476%" y="133" width="0.0201%" height="15" fill="rgb(245,125,30)" fg:x="63947" fg:w="16"/><text x="80.6976%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (57 samples, 0.07%)</title><rect x="80.4187%" y="149" width="0.0717%" height="15" fill="rgb(232,202,2)" fg:x="63924" fg:w="57"/><text x="80.6687%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (18 samples, 0.02%)</title><rect x="80.4677%" y="133" width="0.0226%" height="15" fill="rgb(237,140,51)" fg:x="63963" fg:w="18"/><text x="80.7177%" y="143.50"></text></g><g><title>core::cmp::min (24 samples, 0.03%)</title><rect x="80.4904%" y="149" width="0.0302%" height="15" fill="rgb(236,157,25)" fg:x="63981" fg:w="24"/><text x="80.7404%" y="159.50"></text></g><g><title>core::cmp::Ord::min (24 samples, 0.03%)</title><rect x="80.4904%" y="133" width="0.0302%" height="15" fill="rgb(219,209,0)" fg:x="63981" fg:w="24"/><text x="80.7404%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (3,038 samples, 3.82%)</title><rect x="77.3138%" y="261" width="3.8219%" height="15" fill="rgb(240,116,54)" fg:x="61456" fg:w="3038"/><text x="77.5638%" y="271.50">&lt;all..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,038 samples, 3.82%)</title><rect x="77.3138%" y="245" width="3.8219%" height="15" fill="rgb(216,10,36)" fg:x="61456" fg:w="3038"/><text x="77.5638%" y="255.50">core..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (3,038 samples, 3.82%)</title><rect x="77.3138%" y="229" width="3.8219%" height="15" fill="rgb(222,72,44)" fg:x="61456" fg:w="3038"/><text x="77.5638%" y="239.50">&lt;std..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,038 samples, 3.82%)</title><rect x="77.3138%" y="213" width="3.8219%" height="15" fill="rgb(232,159,9)" fg:x="61456" fg:w="3038"/><text x="77.5638%" y="223.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,038 samples, 3.82%)</title><rect x="77.3138%" y="197" width="3.8219%" height="15" fill="rgb(210,39,32)" fg:x="61456" fg:w="3038"/><text x="77.5638%" y="207.50">&lt;cor..</text></g><g><title>core::hash::Hasher::write_u8 (1,452 samples, 1.83%)</title><rect x="79.3091%" y="181" width="1.8267%" height="15" fill="rgb(216,194,45)" fg:x="63042" fg:w="1452"/><text x="79.5591%" y="191.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,316 samples, 1.66%)</title><rect x="79.4802%" y="165" width="1.6556%" height="15" fill="rgb(218,18,35)" fg:x="63178" fg:w="1316"/><text x="79.7302%" y="175.50"></text></g><g><title>core::hash::sip::u8to64_le (489 samples, 0.62%)</title><rect x="80.5206%" y="149" width="0.6152%" height="15" fill="rgb(207,83,51)" fg:x="64005" fg:w="489"/><text x="80.7706%" y="159.50"></text></g><g><title>core::hash::Hash::hash_slice (3,313 samples, 4.17%)</title><rect x="77.1138%" y="277" width="4.1679%" height="15" fill="rgb(225,63,43)" fg:x="61297" fg:w="3313"/><text x="77.3638%" y="287.50">core:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (116 samples, 0.15%)</title><rect x="81.1358%" y="261" width="0.1459%" height="15" fill="rgb(207,57,36)" fg:x="64494" fg:w="116"/><text x="81.3858%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12 samples, 0.02%)</title><rect x="81.4352%" y="181" width="0.0151%" height="15" fill="rgb(216,99,33)" fg:x="64732" fg:w="12"/><text x="81.6852%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (61 samples, 0.08%)</title><rect x="81.4050%" y="197" width="0.0767%" height="15" fill="rgb(225,42,16)" fg:x="64708" fg:w="61"/><text x="81.6550%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (25 samples, 0.03%)</title><rect x="81.4503%" y="181" width="0.0315%" height="15" fill="rgb(220,201,45)" fg:x="64744" fg:w="25"/><text x="81.7003%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (282 samples, 0.35%)</title><rect x="81.2817%" y="245" width="0.3548%" height="15" fill="rgb(225,33,4)" fg:x="64610" fg:w="282"/><text x="81.5317%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (282 samples, 0.35%)</title><rect x="81.2817%" y="229" width="0.3548%" height="15" fill="rgb(224,33,50)" fg:x="64610" fg:w="282"/><text x="81.5317%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (282 samples, 0.35%)</title><rect x="81.2817%" y="213" width="0.3548%" height="15" fill="rgb(246,198,51)" fg:x="64610" fg:w="282"/><text x="81.5317%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (123 samples, 0.15%)</title><rect x="81.4817%" y="197" width="0.1547%" height="15" fill="rgb(205,22,4)" fg:x="64769" fg:w="123"/><text x="81.7317%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.03%)</title><rect x="81.6075%" y="181" width="0.0289%" height="15" fill="rgb(206,3,8)" fg:x="64869" fg:w="23"/><text x="81.8575%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (3,621 samples, 4.56%)</title><rect x="77.1138%" y="309" width="4.5553%" height="15" fill="rgb(251,23,15)" fg:x="61297" fg:w="3621"/><text x="77.3638%" y="319.50">&lt;allo..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3,621 samples, 4.56%)</title><rect x="77.1138%" y="293" width="4.5553%" height="15" fill="rgb(252,88,28)" fg:x="61297" fg:w="3621"/><text x="77.3638%" y="303.50">core:..</text></g><g><title>core::hash::Hasher::write_length_prefix (308 samples, 0.39%)</title><rect x="81.2817%" y="277" width="0.3875%" height="15" fill="rgb(212,127,14)" fg:x="64610" fg:w="308"/><text x="81.5317%" y="287.50"></text></g><g><title>core::hash::Hasher::write_usize (308 samples, 0.39%)</title><rect x="81.2817%" y="261" width="0.3875%" height="15" fill="rgb(247,145,37)" fg:x="64610" fg:w="308"/><text x="81.5317%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (26 samples, 0.03%)</title><rect x="81.6365%" y="245" width="0.0327%" height="15" fill="rgb(209,117,53)" fg:x="64892" fg:w="26"/><text x="81.8865%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (41 samples, 0.05%)</title><rect x="82.0176%" y="213" width="0.0516%" height="15" fill="rgb(212,90,42)" fg:x="65195" fg:w="41"/><text x="82.2676%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (114 samples, 0.14%)</title><rect x="81.9497%" y="229" width="0.1434%" height="15" fill="rgb(218,164,37)" fg:x="65141" fg:w="114"/><text x="82.1997%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (19 samples, 0.02%)</title><rect x="82.0692%" y="213" width="0.0239%" height="15" fill="rgb(246,65,34)" fg:x="65236" fg:w="19"/><text x="82.3192%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (44 samples, 0.06%)</title><rect x="82.0931%" y="229" width="0.0554%" height="15" fill="rgb(231,100,33)" fg:x="65255" fg:w="44"/><text x="82.3431%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (366 samples, 0.46%)</title><rect x="81.6918%" y="277" width="0.4604%" height="15" fill="rgb(228,126,14)" fg:x="64936" fg:w="366"/><text x="81.9418%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (366 samples, 0.46%)</title><rect x="81.6918%" y="261" width="0.4604%" height="15" fill="rgb(215,173,21)" fg:x="64936" fg:w="366"/><text x="81.9418%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (347 samples, 0.44%)</title><rect x="81.7157%" y="245" width="0.4365%" height="15" fill="rgb(210,6,40)" fg:x="64955" fg:w="347"/><text x="81.9657%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (4,723 samples, 5.94%)</title><rect x="76.2370%" y="373" width="5.9417%" height="15" fill="rgb(212,48,18)" fg:x="60600" fg:w="4723"/><text x="76.4870%" y="383.50">hashbrow..</text></g><g><title>core::hash::BuildHasher::hash_one (4,713 samples, 5.93%)</title><rect x="76.2495%" y="357" width="5.9291%" height="15" fill="rgb(230,214,11)" fg:x="60610" fg:w="4713"/><text x="76.4995%" y="367.50">core::ha..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4,376 samples, 5.51%)</title><rect x="76.6735%" y="341" width="5.5052%" height="15" fill="rgb(254,105,39)" fg:x="60947" fg:w="4376"/><text x="76.9235%" y="351.50">core::h..</text></g><g><title>&lt;day16::MazeState as core::hash::Hash&gt;::hash (4,376 samples, 5.51%)</title><rect x="76.6735%" y="325" width="5.5052%" height="15" fill="rgb(245,158,5)" fg:x="60947" fg:w="4376"/><text x="76.9235%" y="335.50">&lt;day16:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (405 samples, 0.51%)</title><rect x="81.6692%" y="309" width="0.5095%" height="15" fill="rgb(249,208,11)" fg:x="64918" fg:w="405"/><text x="81.9192%" y="319.50"></text></g><g><title>core::hash::Hasher::write_usize (387 samples, 0.49%)</title><rect x="81.6918%" y="293" width="0.4869%" height="15" fill="rgb(210,39,28)" fg:x="64936" fg:w="387"/><text x="81.9418%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (21 samples, 0.03%)</title><rect x="82.1522%" y="277" width="0.0264%" height="15" fill="rgb(211,56,53)" fg:x="65302" fg:w="21"/><text x="82.4022%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.07%)</title><rect x="82.3171%" y="325" width="0.0679%" height="15" fill="rgb(226,201,30)" fg:x="65433" fg:w="54"/><text x="82.5671%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (53 samples, 0.07%)</title><rect x="82.3183%" y="309" width="0.0667%" height="15" fill="rgb(239,101,34)" fg:x="65434" fg:w="53"/><text x="82.5683%" y="319.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (16 samples, 0.02%)</title><rect x="82.3850%" y="325" width="0.0201%" height="15" fill="rgb(226,209,5)" fg:x="65487" fg:w="16"/><text x="82.6350%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (32 samples, 0.04%)</title><rect x="82.4051%" y="309" width="0.0403%" height="15" fill="rgb(250,105,47)" fg:x="65503" fg:w="32"/><text x="82.6551%" y="319.50"></text></g><g><title>&lt;day16::MazeState as core::cmp::PartialEq&gt;::eq (32 samples, 0.04%)</title><rect x="82.4051%" y="293" width="0.0403%" height="15" fill="rgb(230,72,3)" fg:x="65503" fg:w="32"/><text x="82.6551%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (35 samples, 0.04%)</title><rect x="82.4051%" y="325" width="0.0440%" height="15" fill="rgb(232,218,39)" fg:x="65503" fg:w="35"/><text x="82.6551%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (21 samples, 0.03%)</title><rect x="82.4491%" y="325" width="0.0264%" height="15" fill="rgb(248,166,6)" fg:x="65538" fg:w="21"/><text x="82.6991%" y="335.50"></text></g><g><title>hashbrown::raw::h2 (93 samples, 0.12%)</title><rect x="82.4756%" y="325" width="0.1170%" height="15" fill="rgb(247,89,20)" fg:x="65559" fg:w="93"/><text x="82.7256%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (81 samples, 0.10%)</title><rect x="82.5926%" y="325" width="0.1019%" height="15" fill="rgb(248,130,54)" fg:x="65652" fg:w="81"/><text x="82.8426%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (81 samples, 0.10%)</title><rect x="82.5926%" y="309" width="0.1019%" height="15" fill="rgb(234,196,4)" fg:x="65652" fg:w="81"/><text x="82.8426%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (81 samples, 0.10%)</title><rect x="82.5926%" y="293" width="0.1019%" height="15" fill="rgb(250,143,31)" fg:x="65652" fg:w="81"/><text x="82.8426%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (18 samples, 0.02%)</title><rect x="82.6945%" y="325" width="0.0226%" height="15" fill="rgb(211,110,34)" fg:x="65733" fg:w="18"/><text x="82.9445%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.02%)</title><rect x="82.6945%" y="309" width="0.0226%" height="15" fill="rgb(215,124,48)" fg:x="65733" fg:w="18"/><text x="82.9445%" y="319.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (5,191 samples, 6.53%)</title><rect x="76.2370%" y="437" width="6.5305%" height="15" fill="rgb(216,46,13)" fg:x="60600" fg:w="5191"/><text x="76.4870%" y="447.50">std::coll..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (5,191 samples, 6.53%)</title><rect x="76.2370%" y="421" width="6.5305%" height="15" fill="rgb(205,184,25)" fg:x="60600" fg:w="5191"/><text x="76.4870%" y="431.50">hashbrown..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (5,191 samples, 6.53%)</title><rect x="76.2370%" y="405" width="6.5305%" height="15" fill="rgb(228,1,10)" fg:x="60600" fg:w="5191"/><text x="76.4870%" y="415.50">hashbrown..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5,191 samples, 6.53%)</title><rect x="76.2370%" y="389" width="6.5305%" height="15" fill="rgb(213,116,27)" fg:x="60600" fg:w="5191"/><text x="76.4870%" y="399.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (468 samples, 0.59%)</title><rect x="82.1787%" y="373" width="0.5888%" height="15" fill="rgb(241,95,50)" fg:x="65323" fg:w="468"/><text x="82.4287%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (455 samples, 0.57%)</title><rect x="82.1950%" y="357" width="0.5724%" height="15" fill="rgb(238,48,32)" fg:x="65336" fg:w="455"/><text x="82.4450%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (416 samples, 0.52%)</title><rect x="82.2441%" y="341" width="0.5233%" height="15" fill="rgb(235,113,49)" fg:x="65375" fg:w="416"/><text x="82.4941%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (40 samples, 0.05%)</title><rect x="82.7171%" y="325" width="0.0503%" height="15" fill="rgb(205,127,43)" fg:x="65751" fg:w="40"/><text x="82.9671%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (40 samples, 0.05%)</title><rect x="82.7171%" y="309" width="0.0503%" height="15" fill="rgb(250,162,2)" fg:x="65751" fg:w="40"/><text x="82.9671%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (40 samples, 0.05%)</title><rect x="82.7171%" y="293" width="0.0503%" height="15" fill="rgb(220,13,41)" fg:x="65751" fg:w="40"/><text x="82.9671%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (17 samples, 0.02%)</title><rect x="83.1197%" y="293" width="0.0214%" height="15" fill="rgb(249,221,25)" fg:x="66071" fg:w="17"/><text x="83.3697%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (59 samples, 0.07%)</title><rect x="83.1021%" y="309" width="0.0742%" height="15" fill="rgb(215,208,19)" fg:x="66057" fg:w="59"/><text x="83.3521%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (28 samples, 0.04%)</title><rect x="83.1411%" y="293" width="0.0352%" height="15" fill="rgb(236,175,2)" fg:x="66088" fg:w="28"/><text x="83.3911%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (93 samples, 0.12%)</title><rect x="83.2291%" y="293" width="0.1170%" height="15" fill="rgb(241,52,2)" fg:x="66158" fg:w="93"/><text x="83.4791%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (322 samples, 0.41%)</title><rect x="83.0039%" y="357" width="0.4051%" height="15" fill="rgb(248,140,14)" fg:x="65979" fg:w="322"/><text x="83.2539%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (322 samples, 0.41%)</title><rect x="83.0039%" y="341" width="0.4051%" height="15" fill="rgb(253,22,42)" fg:x="65979" fg:w="322"/><text x="83.2539%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (322 samples, 0.41%)</title><rect x="83.0039%" y="325" width="0.4051%" height="15" fill="rgb(234,61,47)" fg:x="65979" fg:w="322"/><text x="83.2539%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (185 samples, 0.23%)</title><rect x="83.1763%" y="309" width="0.2327%" height="15" fill="rgb(208,226,15)" fg:x="66116" fg:w="185"/><text x="83.4263%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (50 samples, 0.06%)</title><rect x="83.3461%" y="293" width="0.0629%" height="15" fill="rgb(217,221,4)" fg:x="66251" fg:w="50"/><text x="83.5961%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (42 samples, 0.05%)</title><rect x="83.4090%" y="357" width="0.0528%" height="15" fill="rgb(212,174,34)" fg:x="66301" fg:w="42"/><text x="83.6590%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (13 samples, 0.02%)</title><rect x="83.4455%" y="341" width="0.0164%" height="15" fill="rgb(253,83,4)" fg:x="66330" fg:w="13"/><text x="83.6955%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (13 samples, 0.02%)</title><rect x="83.4455%" y="325" width="0.0164%" height="15" fill="rgb(250,195,49)" fg:x="66330" fg:w="13"/><text x="83.6955%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (13 samples, 0.02%)</title><rect x="83.4455%" y="309" width="0.0164%" height="15" fill="rgb(241,192,25)" fg:x="66330" fg:w="13"/><text x="83.6955%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (120 samples, 0.15%)</title><rect x="83.5952%" y="245" width="0.1510%" height="15" fill="rgb(208,124,10)" fg:x="66449" fg:w="120"/><text x="83.8452%" y="255.50"></text></g><g><title>core::hash::sip::u8to64_le (40 samples, 0.05%)</title><rect x="83.6959%" y="229" width="0.0503%" height="15" fill="rgb(222,33,0)" fg:x="66529" fg:w="40"/><text x="83.9459%" y="239.50"></text></g><g><title>core::cmp::min (9 samples, 0.01%)</title><rect x="83.8644%" y="213" width="0.0113%" height="15" fill="rgb(234,209,28)" fg:x="66663" fg:w="9"/><text x="84.1144%" y="223.50"></text></g><g><title>core::cmp::Ord::min (9 samples, 0.01%)</title><rect x="83.8644%" y="197" width="0.0113%" height="15" fill="rgb(224,11,23)" fg:x="66663" fg:w="9"/><text x="84.1144%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (278 samples, 0.35%)</title><rect x="83.5902%" y="325" width="0.3497%" height="15" fill="rgb(232,99,1)" fg:x="66445" fg:w="278"/><text x="83.8402%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (278 samples, 0.35%)</title><rect x="83.5902%" y="309" width="0.3497%" height="15" fill="rgb(237,95,45)" fg:x="66445" fg:w="278"/><text x="83.8402%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (278 samples, 0.35%)</title><rect x="83.5902%" y="293" width="0.3497%" height="15" fill="rgb(208,109,11)" fg:x="66445" fg:w="278"/><text x="83.8402%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (278 samples, 0.35%)</title><rect x="83.5902%" y="277" width="0.3497%" height="15" fill="rgb(216,190,48)" fg:x="66445" fg:w="278"/><text x="83.8402%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (278 samples, 0.35%)</title><rect x="83.5902%" y="261" width="0.3497%" height="15" fill="rgb(251,171,36)" fg:x="66445" fg:w="278"/><text x="83.8402%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (154 samples, 0.19%)</title><rect x="83.7462%" y="245" width="0.1937%" height="15" fill="rgb(230,62,22)" fg:x="66569" fg:w="154"/><text x="83.9962%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (145 samples, 0.18%)</title><rect x="83.7575%" y="229" width="0.1824%" height="15" fill="rgb(225,114,35)" fg:x="66578" fg:w="145"/><text x="84.0075%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (51 samples, 0.06%)</title><rect x="83.8758%" y="213" width="0.0642%" height="15" fill="rgb(215,118,42)" fg:x="66672" fg:w="51"/><text x="84.1258%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (47 samples, 0.06%)</title><rect x="84.9791%" y="165" width="0.0591%" height="15" fill="rgb(243,119,21)" fg:x="67549" fg:w="47"/><text x="85.2291%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (168 samples, 0.21%)</title><rect x="84.9099%" y="181" width="0.2113%" height="15" fill="rgb(252,177,53)" fg:x="67494" fg:w="168"/><text x="85.1599%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (66 samples, 0.08%)</title><rect x="85.0382%" y="165" width="0.0830%" height="15" fill="rgb(237,209,29)" fg:x="67596" fg:w="66"/><text x="85.2882%" y="175.50"></text></g><g><title>core::cmp::min (63 samples, 0.08%)</title><rect x="85.1225%" y="181" width="0.0793%" height="15" fill="rgb(212,65,23)" fg:x="67663" fg:w="63"/><text x="85.3725%" y="191.50"></text></g><g><title>core::cmp::Ord::min (63 samples, 0.08%)</title><rect x="85.1225%" y="165" width="0.0793%" height="15" fill="rgb(230,222,46)" fg:x="67663" fg:w="63"/><text x="85.3725%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,375 samples, 1.73%)</title><rect x="84.0934%" y="197" width="1.7298%" height="15" fill="rgb(215,135,32)" fg:x="66845" fg:w="1375"/><text x="84.3434%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (494 samples, 0.62%)</title><rect x="85.2017%" y="181" width="0.6215%" height="15" fill="rgb(246,101,22)" fg:x="67726" fg:w="494"/><text x="85.4517%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (10 samples, 0.01%)</title><rect x="86.8271%" y="149" width="0.0126%" height="15" fill="rgb(206,107,13)" fg:x="69018" fg:w="10"/><text x="87.0771%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (62 samples, 0.08%)</title><rect x="86.7894%" y="165" width="0.0780%" height="15" fill="rgb(250,100,44)" fg:x="68988" fg:w="62"/><text x="87.0394%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (22 samples, 0.03%)</title><rect x="86.8397%" y="149" width="0.0277%" height="15" fill="rgb(231,147,38)" fg:x="69028" fg:w="22"/><text x="87.0897%" y="159.50"></text></g><g><title>core::cmp::min (75 samples, 0.09%)</title><rect x="86.8674%" y="165" width="0.0944%" height="15" fill="rgb(229,8,40)" fg:x="69050" fg:w="75"/><text x="87.1174%" y="175.50"></text></g><g><title>core::cmp::Ord::min (75 samples, 0.09%)</title><rect x="86.8674%" y="149" width="0.0944%" height="15" fill="rgb(221,135,30)" fg:x="69050" fg:w="75"/><text x="87.1174%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (2,781 samples, 3.50%)</title><rect x="84.0632%" y="277" width="3.4986%" height="15" fill="rgb(249,193,18)" fg:x="66821" fg:w="2781"/><text x="84.3132%" y="287.50">&lt;al..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,781 samples, 3.50%)</title><rect x="84.0632%" y="261" width="3.4986%" height="15" fill="rgb(209,133,39)" fg:x="66821" fg:w="2781"/><text x="84.3132%" y="271.50">cor..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (2,781 samples, 3.50%)</title><rect x="84.0632%" y="245" width="3.4986%" height="15" fill="rgb(232,100,14)" fg:x="66821" fg:w="2781"/><text x="84.3132%" y="255.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,781 samples, 3.50%)</title><rect x="84.0632%" y="229" width="3.4986%" height="15" fill="rgb(224,185,1)" fg:x="66821" fg:w="2781"/><text x="84.3132%" y="239.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,781 samples, 3.50%)</title><rect x="84.0632%" y="213" width="3.4986%" height="15" fill="rgb(223,139,8)" fg:x="66821" fg:w="2781"/><text x="84.3132%" y="223.50">&lt;co..</text></g><g><title>core::hash::Hasher::write_u8 (1,382 samples, 1.74%)</title><rect x="85.8232%" y="197" width="1.7386%" height="15" fill="rgb(232,213,38)" fg:x="68220" fg:w="1382"/><text x="86.0732%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,284 samples, 1.62%)</title><rect x="85.9465%" y="181" width="1.6153%" height="15" fill="rgb(207,94,22)" fg:x="68318" fg:w="1284"/><text x="86.1965%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (477 samples, 0.60%)</title><rect x="86.9617%" y="165" width="0.6001%" height="15" fill="rgb(219,183,54)" fg:x="69125" fg:w="477"/><text x="87.2117%" y="175.50"></text></g><g><title>core::hash::Hash::hash_slice (2,996 samples, 3.77%)</title><rect x="83.9399%" y="293" width="3.7691%" height="15" fill="rgb(216,185,54)" fg:x="66723" fg:w="2996"/><text x="84.1899%" y="303.50">core..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (117 samples, 0.15%)</title><rect x="87.5618%" y="277" width="0.1472%" height="15" fill="rgb(254,217,39)" fg:x="69602" fg:w="117"/><text x="87.8118%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.01%)</title><rect x="87.8826%" y="197" width="0.0113%" height="15" fill="rgb(240,178,23)" fg:x="69857" fg:w="9"/><text x="88.1326%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (82 samples, 0.10%)</title><rect x="87.8398%" y="213" width="0.1032%" height="15" fill="rgb(218,11,47)" fg:x="69823" fg:w="82"/><text x="88.0898%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (39 samples, 0.05%)</title><rect x="87.8939%" y="197" width="0.0491%" height="15" fill="rgb(218,51,51)" fg:x="69866" fg:w="39"/><text x="88.1439%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (333 samples, 0.42%)</title><rect x="87.7090%" y="261" width="0.4189%" height="15" fill="rgb(238,126,27)" fg:x="69719" fg:w="333"/><text x="87.9590%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (333 samples, 0.42%)</title><rect x="87.7090%" y="245" width="0.4189%" height="15" fill="rgb(249,202,22)" fg:x="69719" fg:w="333"/><text x="87.9590%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (333 samples, 0.42%)</title><rect x="87.7090%" y="229" width="0.4189%" height="15" fill="rgb(254,195,49)" fg:x="69719" fg:w="333"/><text x="87.9590%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (145 samples, 0.18%)</title><rect x="87.9455%" y="213" width="0.1824%" height="15" fill="rgb(208,123,14)" fg:x="69907" fg:w="145"/><text x="88.1955%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.02%)</title><rect x="88.1103%" y="197" width="0.0176%" height="15" fill="rgb(224,200,8)" fg:x="70038" fg:w="14"/><text x="88.3603%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (3,342 samples, 4.20%)</title><rect x="83.9399%" y="325" width="4.2044%" height="15" fill="rgb(217,61,36)" fg:x="66723" fg:w="3342"/><text x="84.1899%" y="335.50">&lt;allo..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3,342 samples, 4.20%)</title><rect x="83.9399%" y="309" width="4.2044%" height="15" fill="rgb(206,35,45)" fg:x="66723" fg:w="3342"/><text x="84.1899%" y="319.50">core:..</text></g><g><title>core::hash::Hasher::write_length_prefix (346 samples, 0.44%)</title><rect x="87.7090%" y="293" width="0.4353%" height="15" fill="rgb(217,65,33)" fg:x="69719" fg:w="346"/><text x="87.9590%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (346 samples, 0.44%)</title><rect x="87.7090%" y="277" width="0.4353%" height="15" fill="rgb(222,158,48)" fg:x="69719" fg:w="346"/><text x="87.9590%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (13 samples, 0.02%)</title><rect x="88.1279%" y="261" width="0.0164%" height="15" fill="rgb(254,2,54)" fg:x="70052" fg:w="13"/><text x="88.3779%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (80 samples, 0.10%)</title><rect x="88.5229%" y="229" width="0.1006%" height="15" fill="rgb(250,143,38)" fg:x="70366" fg:w="80"/><text x="88.7729%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (164 samples, 0.21%)</title><rect x="88.4462%" y="245" width="0.2063%" height="15" fill="rgb(248,25,0)" fg:x="70305" fg:w="164"/><text x="88.6962%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (23 samples, 0.03%)</title><rect x="88.6236%" y="229" width="0.0289%" height="15" fill="rgb(206,152,27)" fg:x="70446" fg:w="23"/><text x="88.8736%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (64 samples, 0.08%)</title><rect x="88.6525%" y="245" width="0.0805%" height="15" fill="rgb(240,77,30)" fg:x="70469" fg:w="64"/><text x="88.9025%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (465 samples, 0.58%)</title><rect x="88.1493%" y="293" width="0.5850%" height="15" fill="rgb(231,5,3)" fg:x="70069" fg:w="465"/><text x="88.3993%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (465 samples, 0.58%)</title><rect x="88.1493%" y="277" width="0.5850%" height="15" fill="rgb(207,226,32)" fg:x="70069" fg:w="465"/><text x="88.3993%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (459 samples, 0.58%)</title><rect x="88.1569%" y="261" width="0.5774%" height="15" fill="rgb(222,207,47)" fg:x="70075" fg:w="459"/><text x="88.4069%" y="271.50"></text></g><g><title>hashbrown::map::make_insert_hash (4,600 samples, 5.79%)</title><rect x="82.9851%" y="389" width="5.7870%" height="15" fill="rgb(229,115,45)" fg:x="65964" fg:w="4600"/><text x="83.2351%" y="399.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (4,600 samples, 5.79%)</title><rect x="82.9851%" y="373" width="5.7870%" height="15" fill="rgb(224,191,6)" fg:x="65964" fg:w="4600"/><text x="83.2351%" y="383.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4,221 samples, 5.31%)</title><rect x="83.4619%" y="357" width="5.3102%" height="15" fill="rgb(230,227,24)" fg:x="66343" fg:w="4221"/><text x="83.7119%" y="367.50">core::h..</text></g><g><title>&lt;day16::MazeState as core::hash::Hash&gt;::hash (4,216 samples, 5.30%)</title><rect x="83.4682%" y="341" width="5.3039%" height="15" fill="rgb(228,80,19)" fg:x="66348" fg:w="4216"/><text x="83.7182%" y="351.50">&lt;day16..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (499 samples, 0.63%)</title><rect x="88.1443%" y="325" width="0.6278%" height="15" fill="rgb(247,229,0)" fg:x="70065" fg:w="499"/><text x="88.3943%" y="335.50"></text></g><g><title>core::hash::Hasher::write_usize (495 samples, 0.62%)</title><rect x="88.1493%" y="309" width="0.6227%" height="15" fill="rgb(237,194,15)" fg:x="70069" fg:w="495"/><text x="88.3993%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (30 samples, 0.04%)</title><rect x="88.7343%" y="293" width="0.0377%" height="15" fill="rgb(219,203,20)" fg:x="70534" fg:w="30"/><text x="88.9843%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.05%)</title><rect x="88.9318%" y="341" width="0.0478%" height="15" fill="rgb(234,128,8)" fg:x="70691" fg:w="38"/><text x="89.1818%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (38 samples, 0.05%)</title><rect x="88.9318%" y="325" width="0.0478%" height="15" fill="rgb(248,202,8)" fg:x="70691" fg:w="38"/><text x="89.1818%" y="335.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (24 samples, 0.03%)</title><rect x="88.9796%" y="341" width="0.0302%" height="15" fill="rgb(206,104,37)" fg:x="70729" fg:w="24"/><text x="89.2296%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (15 samples, 0.02%)</title><rect x="89.0098%" y="325" width="0.0189%" height="15" fill="rgb(223,8,27)" fg:x="70753" fg:w="15"/><text x="89.2598%" y="335.50"></text></g><g><title>&lt;day16::MazeState as core::cmp::PartialEq&gt;::eq (15 samples, 0.02%)</title><rect x="89.0098%" y="309" width="0.0189%" height="15" fill="rgb(216,217,28)" fg:x="70753" fg:w="15"/><text x="89.2598%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (16 samples, 0.02%)</title><rect x="89.0098%" y="341" width="0.0201%" height="15" fill="rgb(249,199,1)" fg:x="70753" fg:w="16"/><text x="89.2598%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (9 samples, 0.01%)</title><rect x="89.0299%" y="341" width="0.0113%" height="15" fill="rgb(240,85,17)" fg:x="70769" fg:w="9"/><text x="89.2799%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (82 samples, 0.10%)</title><rect x="89.0413%" y="341" width="0.1032%" height="15" fill="rgb(206,108,45)" fg:x="70778" fg:w="82"/><text x="89.2913%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (34 samples, 0.04%)</title><rect x="89.1444%" y="341" width="0.0428%" height="15" fill="rgb(245,210,41)" fg:x="70860" fg:w="34"/><text x="89.3944%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (34 samples, 0.04%)</title><rect x="89.1444%" y="325" width="0.0428%" height="15" fill="rgb(206,13,37)" fg:x="70860" fg:w="34"/><text x="89.3944%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.04%)</title><rect x="89.1444%" y="309" width="0.0428%" height="15" fill="rgb(250,61,18)" fg:x="70860" fg:w="34"/><text x="89.3944%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (27 samples, 0.03%)</title><rect x="89.1872%" y="341" width="0.0340%" height="15" fill="rgb(235,172,48)" fg:x="70894" fg:w="27"/><text x="89.4372%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (27 samples, 0.03%)</title><rect x="89.1872%" y="325" width="0.0340%" height="15" fill="rgb(249,201,17)" fg:x="70894" fg:w="27"/><text x="89.4372%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (365 samples, 0.46%)</title><rect x="88.7720%" y="389" width="0.4592%" height="15" fill="rgb(219,208,6)" fg:x="70564" fg:w="365"/><text x="89.0220%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (330 samples, 0.42%)</title><rect x="88.8161%" y="373" width="0.4152%" height="15" fill="rgb(248,31,23)" fg:x="70599" fg:w="330"/><text x="89.0661%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (293 samples, 0.37%)</title><rect x="88.8626%" y="357" width="0.3686%" height="15" fill="rgb(245,15,42)" fg:x="70636" fg:w="293"/><text x="89.1126%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (8 samples, 0.01%)</title><rect x="89.2212%" y="341" width="0.0101%" height="15" fill="rgb(222,217,39)" fg:x="70921" fg:w="8"/><text x="89.4712%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 0.01%)</title><rect x="89.2212%" y="325" width="0.0101%" height="15" fill="rgb(210,219,27)" fg:x="70921" fg:w="8"/><text x="89.4712%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.01%)</title><rect x="89.2212%" y="309" width="0.0101%" height="15" fill="rgb(252,166,36)" fg:x="70921" fg:w="8"/><text x="89.4712%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (169 samples, 0.21%)</title><rect x="89.2677%" y="373" width="0.2126%" height="15" fill="rgb(245,132,34)" fg:x="70958" fg:w="169"/><text x="89.5177%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (169 samples, 0.21%)</title><rect x="89.2677%" y="357" width="0.2126%" height="15" fill="rgb(236,54,3)" fg:x="70958" fg:w="169"/><text x="89.5177%" y="367.50"></text></g><g><title>core::ptr::write (169 samples, 0.21%)</title><rect x="89.2677%" y="341" width="0.2126%" height="15" fill="rgb(241,173,43)" fg:x="70958" fg:w="169"/><text x="89.5177%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (139 samples, 0.17%)</title><rect x="89.5092%" y="309" width="0.1749%" height="15" fill="rgb(215,190,9)" fg:x="71150" fg:w="139"/><text x="89.7592%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (9 samples, 0.01%)</title><rect x="89.6841%" y="309" width="0.0113%" height="15" fill="rgb(242,101,16)" fg:x="71289" fg:w="9"/><text x="89.9341%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (9 samples, 0.01%)</title><rect x="89.6841%" y="293" width="0.0113%" height="15" fill="rgb(223,190,21)" fg:x="71289" fg:w="9"/><text x="89.9341%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (9 samples, 0.01%)</title><rect x="89.6841%" y="277" width="0.0113%" height="15" fill="rgb(215,228,25)" fg:x="71289" fg:w="9"/><text x="89.9341%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (9 samples, 0.01%)</title><rect x="89.6979%" y="309" width="0.0113%" height="15" fill="rgb(225,36,22)" fg:x="71300" fg:w="9"/><text x="89.9479%" y="319.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="89.6979%" y="293" width="0.0113%" height="15" fill="rgb(251,106,46)" fg:x="71300" fg:w="9"/><text x="89.9479%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (9 samples, 0.01%)</title><rect x="89.6979%" y="277" width="0.0113%" height="15" fill="rgb(208,90,1)" fg:x="71300" fg:w="9"/><text x="89.9479%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (9 samples, 0.01%)</title><rect x="89.6979%" y="261" width="0.0113%" height="15" fill="rgb(243,10,4)" fg:x="71300" fg:w="9"/><text x="89.9479%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.01%)</title><rect x="89.6979%" y="245" width="0.0113%" height="15" fill="rgb(212,137,27)" fg:x="71300" fg:w="9"/><text x="89.9479%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.01%)</title><rect x="89.6992%" y="229" width="0.0101%" height="15" fill="rgb(231,220,49)" fg:x="71301" fg:w="8"/><text x="89.9492%" y="239.50"></text></g><g><title>cfree (8 samples, 0.01%)</title><rect x="89.6992%" y="213" width="0.0101%" height="15" fill="rgb(237,96,20)" fg:x="71301" fg:w="8"/><text x="89.9492%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (24 samples, 0.03%)</title><rect x="89.8917%" y="181" width="0.0302%" height="15" fill="rgb(239,229,30)" fg:x="71454" fg:w="24"/><text x="90.1417%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (62 samples, 0.08%)</title><rect x="89.8678%" y="197" width="0.0780%" height="15" fill="rgb(219,65,33)" fg:x="71435" fg:w="62"/><text x="90.1178%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (19 samples, 0.02%)</title><rect x="89.9219%" y="181" width="0.0239%" height="15" fill="rgb(243,134,7)" fg:x="71478" fg:w="19"/><text x="90.1719%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (140 samples, 0.18%)</title><rect x="90.0351%" y="181" width="0.1761%" height="15" fill="rgb(216,177,54)" fg:x="71568" fg:w="140"/><text x="90.2851%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (442 samples, 0.56%)</title><rect x="89.7382%" y="245" width="0.5561%" height="15" fill="rgb(211,160,20)" fg:x="71332" fg:w="442"/><text x="89.9882%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (442 samples, 0.56%)</title><rect x="89.7382%" y="229" width="0.5561%" height="15" fill="rgb(239,85,39)" fg:x="71332" fg:w="442"/><text x="89.9882%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (442 samples, 0.56%)</title><rect x="89.7382%" y="213" width="0.5561%" height="15" fill="rgb(232,125,22)" fg:x="71332" fg:w="442"/><text x="89.9882%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (277 samples, 0.35%)</title><rect x="89.9458%" y="197" width="0.3485%" height="15" fill="rgb(244,57,34)" fg:x="71497" fg:w="277"/><text x="90.1958%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (66 samples, 0.08%)</title><rect x="90.2112%" y="181" width="0.0830%" height="15" fill="rgb(214,203,32)" fg:x="71708" fg:w="66"/><text x="90.4612%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (32 samples, 0.04%)</title><rect x="90.2943%" y="245" width="0.0403%" height="15" fill="rgb(207,58,43)" fg:x="71774" fg:w="32"/><text x="90.5443%" y="255.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (10 samples, 0.01%)</title><rect x="90.3219%" y="229" width="0.0126%" height="15" fill="rgb(215,193,15)" fg:x="71796" fg:w="10"/><text x="90.5719%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (10 samples, 0.01%)</title><rect x="90.3219%" y="213" width="0.0126%" height="15" fill="rgb(232,15,44)" fg:x="71796" fg:w="10"/><text x="90.5719%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (10 samples, 0.01%)</title><rect x="90.3219%" y="197" width="0.0126%" height="15" fill="rgb(212,3,48)" fg:x="71796" fg:w="10"/><text x="90.5719%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (654 samples, 0.82%)</title><rect x="90.5345%" y="133" width="0.8228%" height="15" fill="rgb(218,128,7)" fg:x="71965" fg:w="654"/><text x="90.7845%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (360 samples, 0.45%)</title><rect x="90.9044%" y="117" width="0.4529%" height="15" fill="rgb(226,216,39)" fg:x="72259" fg:w="360"/><text x="91.1544%" y="127.50"></text></g><g><title>core::cmp::min (10 samples, 0.01%)</title><rect x="91.4756%" y="101" width="0.0126%" height="15" fill="rgb(243,47,51)" fg:x="72713" fg:w="10"/><text x="91.7256%" y="111.50"></text></g><g><title>core::cmp::Ord::min (10 samples, 0.01%)</title><rect x="91.4756%" y="85" width="0.0126%" height="15" fill="rgb(241,183,40)" fg:x="72713" fg:w="10"/><text x="91.7256%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (790 samples, 0.99%)</title><rect x="90.5157%" y="213" width="0.9938%" height="15" fill="rgb(231,217,32)" fg:x="71950" fg:w="790"/><text x="90.7657%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (790 samples, 0.99%)</title><rect x="90.5157%" y="197" width="0.9938%" height="15" fill="rgb(229,61,38)" fg:x="71950" fg:w="790"/><text x="90.7657%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (790 samples, 0.99%)</title><rect x="90.5157%" y="181" width="0.9938%" height="15" fill="rgb(225,210,5)" fg:x="71950" fg:w="790"/><text x="90.7657%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (790 samples, 0.99%)</title><rect x="90.5157%" y="165" width="0.9938%" height="15" fill="rgb(231,79,45)" fg:x="71950" fg:w="790"/><text x="90.7657%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (790 samples, 0.99%)</title><rect x="90.5157%" y="149" width="0.9938%" height="15" fill="rgb(224,100,7)" fg:x="71950" fg:w="790"/><text x="90.7657%" y="159.50"></text></g><g><title>core::hash::Hasher::write_u8 (121 samples, 0.15%)</title><rect x="91.3573%" y="133" width="0.1522%" height="15" fill="rgb(241,198,18)" fg:x="72619" fg:w="121"/><text x="91.6073%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (114 samples, 0.14%)</title><rect x="91.3661%" y="117" width="0.1434%" height="15" fill="rgb(252,97,53)" fg:x="72626" fg:w="114"/><text x="91.6161%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (17 samples, 0.02%)</title><rect x="91.4881%" y="101" width="0.0214%" height="15" fill="rgb(220,88,7)" fg:x="72723" fg:w="17"/><text x="91.7381%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (72 samples, 0.09%)</title><rect x="93.2154%" y="53" width="0.0906%" height="15" fill="rgb(213,176,14)" fg:x="74096" fg:w="72"/><text x="93.4654%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (286 samples, 0.36%)</title><rect x="93.0884%" y="69" width="0.3598%" height="15" fill="rgb(246,73,7)" fg:x="73995" fg:w="286"/><text x="93.3384%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (113 samples, 0.14%)</title><rect x="93.3060%" y="53" width="0.1422%" height="15" fill="rgb(245,64,36)" fg:x="74168" fg:w="113"/><text x="93.5560%" y="63.50"></text></g><g><title>core::cmp::min (77 samples, 0.10%)</title><rect x="93.4482%" y="69" width="0.0969%" height="15" fill="rgb(245,80,10)" fg:x="74281" fg:w="77"/><text x="93.6982%" y="79.50"></text></g><g><title>core::cmp::Ord::min (77 samples, 0.10%)</title><rect x="93.4482%" y="53" width="0.0969%" height="15" fill="rgb(232,107,50)" fg:x="74281" fg:w="77"/><text x="93.6982%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,625 samples, 3.30%)</title><rect x="92.0278%" y="85" width="3.3023%" height="15" fill="rgb(253,3,0)" fg:x="73152" fg:w="2625"/><text x="92.2778%" y="95.50">&lt;co..</text></g><g><title>core::hash::sip::u8to64_le (1,419 samples, 1.79%)</title><rect x="93.5450%" y="69" width="1.7852%" height="15" fill="rgb(212,99,53)" fg:x="74358" fg:w="1419"/><text x="93.7950%" y="79.50">c..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (13 samples, 0.02%)</title><rect x="96.4989%" y="37" width="0.0164%" height="15" fill="rgb(249,111,54)" fg:x="76706" fg:w="13"/><text x="96.7489%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (74 samples, 0.09%)</title><rect x="96.4498%" y="53" width="0.0931%" height="15" fill="rgb(249,55,30)" fg:x="76667" fg:w="74"/><text x="96.6998%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (22 samples, 0.03%)</title><rect x="96.5152%" y="37" width="0.0277%" height="15" fill="rgb(237,47,42)" fg:x="76719" fg:w="22"/><text x="96.7652%" y="47.50"></text></g><g><title>core::cmp::min (74 samples, 0.09%)</title><rect x="96.5429%" y="53" width="0.0931%" height="15" fill="rgb(211,20,18)" fg:x="76741" fg:w="74"/><text x="96.7929%" y="63.50"></text></g><g><title>core::cmp::Ord::min (74 samples, 0.09%)</title><rect x="96.5429%" y="37" width="0.0931%" height="15" fill="rgb(231,203,46)" fg:x="76741" fg:w="74"/><text x="96.7929%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (4,250 samples, 5.35%)</title><rect x="91.8769%" y="165" width="5.3467%" height="15" fill="rgb(237,142,3)" fg:x="73032" fg:w="4250"/><text x="92.1269%" y="175.50">&lt;alloc:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (4,250 samples, 5.35%)</title><rect x="91.8769%" y="149" width="5.3467%" height="15" fill="rgb(241,107,1)" fg:x="73032" fg:w="4250"/><text x="92.1269%" y="159.50">core::h..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (4,250 samples, 5.35%)</title><rect x="91.8769%" y="133" width="5.3467%" height="15" fill="rgb(229,83,13)" fg:x="73032" fg:w="4250"/><text x="92.1269%" y="143.50">&lt;std::c..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (4,250 samples, 5.35%)</title><rect x="91.8769%" y="117" width="5.3467%" height="15" fill="rgb(241,91,40)" fg:x="73032" fg:w="4250"/><text x="92.1269%" y="127.50">&lt;core::..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (4,250 samples, 5.35%)</title><rect x="91.8769%" y="101" width="5.3467%" height="15" fill="rgb(225,3,45)" fg:x="73032" fg:w="4250"/><text x="92.1269%" y="111.50">&lt;core::..</text></g><g><title>core::hash::Hasher::write_u8 (1,505 samples, 1.89%)</title><rect x="95.3302%" y="85" width="1.8933%" height="15" fill="rgb(244,223,14)" fg:x="75777" fg:w="1505"/><text x="95.5802%" y="95.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,356 samples, 1.71%)</title><rect x="95.5176%" y="69" width="1.7059%" height="15" fill="rgb(224,124,37)" fg:x="75926" fg:w="1356"/><text x="95.7676%" y="79.50"></text></g><g><title>core::hash::sip::u8to64_le (467 samples, 0.59%)</title><rect x="96.6360%" y="53" width="0.5875%" height="15" fill="rgb(251,171,30)" fg:x="76815" fg:w="467"/><text x="96.8860%" y="63.50"></text></g><g><title>core::hash::Hash::hash_slice (4,663 samples, 5.87%)</title><rect x="91.5095%" y="181" width="5.8662%" height="15" fill="rgb(236,46,54)" fg:x="72740" fg:w="4663"/><text x="91.7595%" y="191.50">core::h..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (121 samples, 0.15%)</title><rect x="97.2235%" y="165" width="0.1522%" height="15" fill="rgb(245,213,5)" fg:x="77282" fg:w="121"/><text x="97.4735%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (28 samples, 0.04%)</title><rect x="97.5732%" y="85" width="0.0352%" height="15" fill="rgb(230,144,27)" fg:x="77560" fg:w="28"/><text x="97.8232%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (93 samples, 0.12%)</title><rect x="97.5179%" y="101" width="0.1170%" height="15" fill="rgb(220,86,6)" fg:x="77516" fg:w="93"/><text x="97.7679%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (21 samples, 0.03%)</title><rect x="97.6085%" y="85" width="0.0264%" height="15" fill="rgb(240,20,13)" fg:x="77588" fg:w="21"/><text x="97.8585%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (323 samples, 0.41%)</title><rect x="97.3757%" y="149" width="0.4063%" height="15" fill="rgb(217,89,34)" fg:x="77403" fg:w="323"/><text x="97.6257%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (323 samples, 0.41%)</title><rect x="97.3757%" y="133" width="0.4063%" height="15" fill="rgb(229,13,5)" fg:x="77403" fg:w="323"/><text x="97.6257%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (323 samples, 0.41%)</title><rect x="97.3757%" y="117" width="0.4063%" height="15" fill="rgb(244,67,35)" fg:x="77403" fg:w="323"/><text x="97.6257%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (114 samples, 0.14%)</title><rect x="97.6387%" y="101" width="0.1434%" height="15" fill="rgb(221,40,2)" fg:x="77612" fg:w="114"/><text x="97.8887%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (5,001 samples, 6.29%)</title><rect x="91.5095%" y="213" width="6.2914%" height="15" fill="rgb(237,157,21)" fg:x="72740" fg:w="5001"/><text x="91.7595%" y="223.50">&lt;alloc::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (5,001 samples, 6.29%)</title><rect x="91.5095%" y="197" width="6.2914%" height="15" fill="rgb(222,94,11)" fg:x="72740" fg:w="5001"/><text x="91.7595%" y="207.50">core::ha..</text></g><g><title>core::hash::Hasher::write_length_prefix (338 samples, 0.43%)</title><rect x="97.3757%" y="181" width="0.4252%" height="15" fill="rgb(249,113,6)" fg:x="77403" fg:w="338"/><text x="97.6257%" y="191.50"></text></g><g><title>core::hash::Hasher::write_usize (338 samples, 0.43%)</title><rect x="97.3757%" y="165" width="0.4252%" height="15" fill="rgb(238,137,36)" fg:x="77403" fg:w="338"/><text x="97.6257%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (15 samples, 0.02%)</title><rect x="97.7821%" y="149" width="0.0189%" height="15" fill="rgb(210,102,26)" fg:x="77726" fg:w="15"/><text x="98.0321%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (84 samples, 0.11%)</title><rect x="98.2060%" y="117" width="0.1057%" height="15" fill="rgb(218,30,30)" fg:x="78063" fg:w="84"/><text x="98.4560%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (160 samples, 0.20%)</title><rect x="98.1406%" y="133" width="0.2013%" height="15" fill="rgb(214,67,26)" fg:x="78011" fg:w="160"/><text x="98.3906%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (24 samples, 0.03%)</title><rect x="98.3117%" y="117" width="0.0302%" height="15" fill="rgb(251,9,53)" fg:x="78147" fg:w="24"/><text x="98.5617%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (122 samples, 0.15%)</title><rect x="98.3419%" y="133" width="0.1535%" height="15" fill="rgb(228,204,25)" fg:x="78171" fg:w="122"/><text x="98.5919%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (552 samples, 0.69%)</title><rect x="97.8299%" y="181" width="0.6944%" height="15" fill="rgb(207,153,8)" fg:x="77764" fg:w="552"/><text x="98.0799%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (552 samples, 0.69%)</title><rect x="97.8299%" y="165" width="0.6944%" height="15" fill="rgb(242,9,16)" fg:x="77764" fg:w="552"/><text x="98.0799%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (529 samples, 0.67%)</title><rect x="97.8588%" y="149" width="0.6655%" height="15" fill="rgb(217,211,10)" fg:x="77787" fg:w="529"/><text x="98.1088%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.03%)</title><rect x="98.4954%" y="133" width="0.0289%" height="15" fill="rgb(219,228,52)" fg:x="78293" fg:w="23"/><text x="98.7454%" y="143.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (7,064 samples, 8.89%)</title><rect x="89.7093%" y="293" width="8.8868%" height="15" fill="rgb(231,92,29)" fg:x="71309" fg:w="7064"/><text x="89.9593%" y="303.50">hashbrown::ma..</text></g><g><title>hashbrown::map::make_hash (7,064 samples, 8.89%)</title><rect x="89.7093%" y="277" width="8.8868%" height="15" fill="rgb(232,8,23)" fg:x="71309" fg:w="7064"/><text x="89.9593%" y="287.50">hashbrown::ma..</text></g><g><title>core::hash::BuildHasher::hash_one (7,064 samples, 8.89%)</title><rect x="89.7093%" y="261" width="8.8868%" height="15" fill="rgb(216,211,34)" fg:x="71309" fg:w="7064"/><text x="89.9593%" y="271.50">core::hash::B..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6,567 samples, 8.26%)</title><rect x="90.3345%" y="245" width="8.2615%" height="15" fill="rgb(236,151,0)" fg:x="71806" fg:w="6567"/><text x="90.5845%" y="255.50">core::hash::..</text></g><g><title>&lt;day16::MazeState as core::hash::Hash&gt;::hash (6,567 samples, 8.26%)</title><rect x="90.3345%" y="229" width="8.2615%" height="15" fill="rgb(209,168,3)" fg:x="71806" fg:w="6567"/><text x="90.5845%" y="239.50">&lt;day16::Maze..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (632 samples, 0.80%)</title><rect x="97.8010%" y="213" width="0.7951%" height="15" fill="rgb(208,129,28)" fg:x="77741" fg:w="632"/><text x="98.0510%" y="223.50"></text></g><g><title>core::hash::Hasher::write_usize (609 samples, 0.77%)</title><rect x="97.8299%" y="197" width="0.7661%" height="15" fill="rgb(229,78,22)" fg:x="77764" fg:w="609"/><text x="98.0799%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (57 samples, 0.07%)</title><rect x="98.5243%" y="181" width="0.0717%" height="15" fill="rgb(228,187,13)" fg:x="78316" fg:w="57"/><text x="98.7743%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (10 samples, 0.01%)</title><rect x="98.5960%" y="293" width="0.0126%" height="15" fill="rgb(240,119,24)" fg:x="78373" fg:w="10"/><text x="98.8460%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (10 samples, 0.01%)</title><rect x="98.5960%" y="277" width="0.0126%" height="15" fill="rgb(209,194,42)" fg:x="78373" fg:w="10"/><text x="98.8460%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (10 samples, 0.01%)</title><rect x="98.5960%" y="261" width="0.0126%" height="15" fill="rgb(247,200,46)" fg:x="78373" fg:w="10"/><text x="98.8460%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (10 samples, 0.01%)</title><rect x="98.5960%" y="245" width="0.0126%" height="15" fill="rgb(218,76,16)" fg:x="78373" fg:w="10"/><text x="98.8460%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (7,080 samples, 8.91%)</title><rect x="89.7093%" y="309" width="8.9069%" height="15" fill="rgb(225,21,48)" fg:x="71309" fg:w="7080"/><text x="89.9593%" y="319.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket_ptr (34 samples, 0.04%)</title><rect x="98.6162%" y="309" width="0.0428%" height="15" fill="rgb(239,223,50)" fg:x="78389" fg:w="34"/><text x="98.8662%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (11 samples, 0.01%)</title><rect x="98.8061%" y="277" width="0.0138%" height="15" fill="rgb(244,45,21)" fg:x="78540" fg:w="11"/><text x="99.0561%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (91 samples, 0.11%)</title><rect x="98.8200%" y="277" width="0.1145%" height="15" fill="rgb(232,33,43)" fg:x="78551" fg:w="91"/><text x="99.0700%" y="287.50"></text></g><g><title>hashbrown::raw::is_full (19 samples, 0.02%)</title><rect x="98.9344%" y="277" width="0.0239%" height="15" fill="rgb(209,8,3)" fg:x="78642" fg:w="19"/><text x="99.1844%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (9 samples, 0.01%)</title><rect x="98.9583%" y="277" width="0.0113%" height="15" fill="rgb(214,25,53)" fg:x="78661" fg:w="9"/><text x="99.2083%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (9 samples, 0.01%)</title><rect x="98.9583%" y="261" width="0.0113%" height="15" fill="rgb(254,186,54)" fg:x="78661" fg:w="9"/><text x="99.2083%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.01%)</title><rect x="98.9583%" y="245" width="0.0113%" height="15" fill="rgb(208,174,49)" fg:x="78661" fg:w="9"/><text x="99.2083%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (350 samples, 0.44%)</title><rect x="98.6589%" y="293" width="0.4403%" height="15" fill="rgb(233,191,51)" fg:x="78423" fg:w="350"/><text x="98.9089%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (103 samples, 0.13%)</title><rect x="98.9697%" y="277" width="0.1296%" height="15" fill="rgb(222,134,10)" fg:x="78670" fg:w="103"/><text x="99.2197%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (103 samples, 0.13%)</title><rect x="98.9697%" y="261" width="0.1296%" height="15" fill="rgb(230,226,20)" fg:x="78670" fg:w="103"/><text x="99.2197%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (362 samples, 0.46%)</title><rect x="98.6589%" y="309" width="0.4554%" height="15" fill="rgb(251,111,25)" fg:x="78423" fg:w="362"/><text x="98.9089%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (12 samples, 0.02%)</title><rect x="99.0992%" y="293" width="0.0151%" height="15" fill="rgb(224,40,46)" fg:x="78773" fg:w="12"/><text x="99.3492%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (12 samples, 0.02%)</title><rect x="99.0992%" y="277" width="0.0151%" height="15" fill="rgb(236,108,47)" fg:x="78773" fg:w="12"/><text x="99.3492%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (535 samples, 0.67%)</title><rect x="99.1219%" y="277" width="0.6730%" height="15" fill="rgb(234,93,0)" fg:x="78791" fg:w="535"/><text x="99.3719%" y="287.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (533 samples, 0.67%)</title><rect x="99.1244%" y="261" width="0.6705%" height="15" fill="rgb(224,213,32)" fg:x="78793" fg:w="533"/><text x="99.3744%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (533 samples, 0.67%)</title><rect x="99.1244%" y="245" width="0.6705%" height="15" fill="rgb(251,11,48)" fg:x="78793" fg:w="533"/><text x="99.3744%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (533 samples, 0.67%)</title><rect x="99.1244%" y="229" width="0.6705%" height="15" fill="rgb(236,173,5)" fg:x="78793" fg:w="533"/><text x="99.3744%" y="239.50"></text></g><g><title>alloc::alloc::alloc (533 samples, 0.67%)</title><rect x="99.1244%" y="213" width="0.6705%" height="15" fill="rgb(230,95,12)" fg:x="78793" fg:w="533"/><text x="99.3744%" y="223.50"></text></g><g><title>malloc (532 samples, 0.67%)</title><rect x="99.1257%" y="197" width="0.6693%" height="15" fill="rgb(232,209,1)" fg:x="78794" fg:w="532"/><text x="99.3757%" y="207.50"></text></g><g><title>[libc.so.6] (531 samples, 0.67%)</title><rect x="99.1269%" y="181" width="0.6680%" height="15" fill="rgb(232,6,1)" fg:x="78795" fg:w="531"/><text x="99.3769%" y="191.50"></text></g><g><title>[libc.so.6] (461 samples, 0.58%)</title><rect x="99.2150%" y="165" width="0.5800%" height="15" fill="rgb(210,224,50)" fg:x="78865" fg:w="461"/><text x="99.4650%" y="175.50"></text></g><g><title>[libc.so.6] (127 samples, 0.16%)</title><rect x="99.6352%" y="149" width="0.1598%" height="15" fill="rgb(228,127,35)" fg:x="79199" fg:w="127"/><text x="99.8852%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (543 samples, 0.68%)</title><rect x="99.1143%" y="309" width="0.6831%" height="15" fill="rgb(245,102,45)" fg:x="78785" fg:w="543"/><text x="99.3643%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (543 samples, 0.68%)</title><rect x="99.1143%" y="293" width="0.6831%" height="15" fill="rgb(214,1,49)" fg:x="78785" fg:w="543"/><text x="99.3643%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (8,202 samples, 10.32%)</title><rect x="89.4803%" y="373" width="10.3184%" height="15" fill="rgb(226,163,40)" fg:x="71127" fg:w="8202"/><text x="89.7303%" y="383.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8,202 samples, 10.32%)</title><rect x="89.4803%" y="357" width="10.3184%" height="15" fill="rgb(239,212,28)" fg:x="71127" fg:w="8202"/><text x="89.7303%" y="367.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (8,200 samples, 10.32%)</title><rect x="89.4828%" y="341" width="10.3159%" height="15" fill="rgb(220,20,13)" fg:x="71129" fg:w="8200"/><text x="89.7328%" y="351.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (8,200 samples, 10.32%)</title><rect x="89.4828%" y="325" width="10.3159%" height="15" fill="rgb(210,164,35)" fg:x="71129" fg:w="8200"/><text x="89.7328%" y="335.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (24 samples, 0.03%)</title><rect x="99.8440%" y="357" width="0.0302%" height="15" fill="rgb(248,109,41)" fg:x="79365" fg:w="24"/><text x="100.0940%" y="367.50"></text></g><g><title>hashbrown::raw::is_full (53 samples, 0.07%)</title><rect x="99.8742%" y="357" width="0.0667%" height="15" fill="rgb(238,23,50)" fg:x="79389" fg:w="53"/><text x="100.1242%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (120 samples, 0.15%)</title><rect x="99.7987%" y="373" width="0.1510%" height="15" fill="rgb(211,48,49)" fg:x="79329" fg:w="120"/><text x="100.0487%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (9 samples, 0.01%)</title><rect x="99.9799%" y="341" width="0.0113%" height="15" fill="rgb(223,36,21)" fg:x="79473" fg:w="9"/><text x="100.2299%" y="351.50"></text></g><g><title>day16::compute (78,709 samples, 99.02%)</title><rect x="0.9750%" y="453" width="99.0187%" height="15" fill="rgb(207,123,46)" fg:x="775" fg:w="78709"/><text x="1.2250%" y="463.50">day16::compute</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (13,693 samples, 17.23%)</title><rect x="82.7674%" y="437" width="17.2263%" height="15" fill="rgb(240,218,32)" fg:x="65791" fg:w="13693"/><text x="83.0174%" y="447.50">std::collections::hash::set..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (13,693 samples, 17.23%)</title><rect x="82.7674%" y="421" width="17.2263%" height="15" fill="rgb(252,5,43)" fg:x="65791" fg:w="13693"/><text x="83.0174%" y="431.50">hashbrown::set::HashSet&lt;T,S..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13,580 samples, 17.08%)</title><rect x="82.9096%" y="405" width="17.0841%" height="15" fill="rgb(252,84,19)" fg:x="65904" fg:w="13580"/><text x="83.1596%" y="415.50">hashbrown::map::HashMap&lt;K,..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (8,555 samples, 10.76%)</title><rect x="89.2312%" y="389" width="10.7625%" height="15" fill="rgb(243,152,39)" fg:x="70929" fg:w="8555"/><text x="89.4812%" y="399.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (35 samples, 0.04%)</title><rect x="99.9497%" y="373" width="0.0440%" height="15" fill="rgb(234,160,15)" fg:x="79449" fg:w="35"/><text x="100.1997%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (11 samples, 0.01%)</title><rect x="99.9799%" y="357" width="0.0138%" height="15" fill="rgb(237,34,20)" fg:x="79473" fg:w="11"/><text x="100.2299%" y="367.50"></text></g><g><title>all (79,489 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(229,97,13)" fg:x="0" fg:w="79489"/><text x="0.2500%" y="783.50"></text></g><g><title>day16 (79,489 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(234,71,50)" fg:x="0" fg:w="79489"/><text x="0.2500%" y="767.50">day16</text></g><g><title>_start (79,471 samples, 99.98%)</title><rect x="0.0226%" y="741" width="99.9774%" height="15" fill="rgb(253,155,4)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="751.50">_start</text></g><g><title>__libc_start_main (79,471 samples, 99.98%)</title><rect x="0.0226%" y="725" width="99.9774%" height="15" fill="rgb(222,185,37)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="735.50">__libc_start_main</text></g><g><title>[libc.so.6] (79,471 samples, 99.98%)</title><rect x="0.0226%" y="709" width="99.9774%" height="15" fill="rgb(251,177,13)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="719.50">[libc.so.6]</text></g><g><title>main (79,471 samples, 99.98%)</title><rect x="0.0226%" y="693" width="99.9774%" height="15" fill="rgb(250,179,40)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (79,471 samples, 99.98%)</title><rect x="0.0226%" y="677" width="99.9774%" height="15" fill="rgb(242,44,2)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="687.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (79,471 samples, 99.98%)</title><rect x="0.0226%" y="661" width="99.9774%" height="15" fill="rgb(216,177,13)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (79,471 samples, 99.98%)</title><rect x="0.0226%" y="645" width="99.9774%" height="15" fill="rgb(216,106,43)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (79,471 samples, 99.98%)</title><rect x="0.0226%" y="629" width="99.9774%" height="15" fill="rgb(216,183,2)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="639.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (79,471 samples, 99.98%)</title><rect x="0.0226%" y="613" width="99.9774%" height="15" fill="rgb(249,75,3)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="623.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (79,471 samples, 99.98%)</title><rect x="0.0226%" y="597" width="99.9774%" height="15" fill="rgb(219,67,39)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (79,471 samples, 99.98%)</title><rect x="0.0226%" y="581" width="99.9774%" height="15" fill="rgb(253,228,2)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (79,471 samples, 99.98%)</title><rect x="0.0226%" y="565" width="99.9774%" height="15" fill="rgb(235,138,27)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="575.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (79,471 samples, 99.98%)</title><rect x="0.0226%" y="549" width="99.9774%" height="15" fill="rgb(236,97,51)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="559.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (79,471 samples, 99.98%)</title><rect x="0.0226%" y="533" width="99.9774%" height="15" fill="rgb(240,80,30)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="543.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (79,471 samples, 99.98%)</title><rect x="0.0226%" y="517" width="99.9774%" height="15" fill="rgb(230,178,19)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (79,471 samples, 99.98%)</title><rect x="0.0226%" y="501" width="99.9774%" height="15" fill="rgb(210,190,27)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>day16::main (79,471 samples, 99.98%)</title><rect x="0.0226%" y="485" width="99.9774%" height="15" fill="rgb(222,107,31)" fg:x="18" fg:w="79471"/><text x="0.2726%" y="495.50">day16::main</text></g><g><title>day16::solve_part_two (78,949 samples, 99.32%)</title><rect x="0.6793%" y="469" width="99.3207%" height="15" fill="rgb(216,127,34)" fg:x="540" fg:w="78949"/><text x="0.9293%" y="479.50">day16::solve_part_two</text></g></svg></svg>