<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="11555"><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.0000%" y="629" width="0.0173%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.0000%" y="613" width="0.0173%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.05%)</title><rect x="0.0000%" y="645" width="0.0519%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.0173%" y="629" width="0.0346%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="4"/><text x="0.2673%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.0173%" y="613" width="0.0346%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="4"/><text x="0.2673%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.0173%" y="597" width="0.0346%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="4"/><text x="0.2673%" y="607.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.0173%" y="581" width="0.0346%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="4"/><text x="0.2673%" y="591.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.0173%" y="565" width="0.0346%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="4"/><text x="0.2673%" y="575.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.0173%" y="549" width="0.0346%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="4"/><text x="0.2673%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.0260%" y="533" width="0.0260%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="3"/><text x="0.2760%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.0260%" y="517" width="0.0260%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="3"/><text x="0.2760%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0346%" y="501" width="0.0173%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="2"/><text x="0.2846%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0346%" y="485" width="0.0173%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="2"/><text x="0.2846%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0346%" y="469" width="0.0173%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="2"/><text x="0.2846%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.06%)</title><rect x="0.0000%" y="661" width="0.0606%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="7"/><text x="0.2500%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (4 samples, 0.03%)</title><rect x="0.1212%" y="357" width="0.0346%" height="15" fill="rgb(231,73,38)" fg:x="14" fg:w="4"/><text x="0.3712%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4 samples, 0.03%)</title><rect x="0.1212%" y="341" width="0.0346%" height="15" fill="rgb(225,20,46)" fg:x="14" fg:w="4"/><text x="0.3712%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4 samples, 0.03%)</title><rect x="0.1212%" y="325" width="0.0346%" height="15" fill="rgb(210,31,41)" fg:x="14" fg:w="4"/><text x="0.3712%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.03%)</title><rect x="0.1212%" y="309" width="0.0346%" height="15" fill="rgb(221,200,47)" fg:x="14" fg:w="4"/><text x="0.3712%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.02%)</title><rect x="0.1558%" y="293" width="0.0173%" height="15" fill="rgb(226,26,5)" fg:x="18" fg:w="2"/><text x="0.4058%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="0.1558%" y="357" width="0.0260%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="3"/><text x="0.4058%" y="367.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="0.1558%" y="341" width="0.0260%" height="15" fill="rgb(235,183,28)" fg:x="18" fg:w="3"/><text x="0.4058%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="0.1558%" y="325" width="0.0260%" height="15" fill="rgb(221,5,38)" fg:x="18" fg:w="3"/><text x="0.4058%" y="335.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (3 samples, 0.03%)</title><rect x="0.1558%" y="309" width="0.0260%" height="15" fill="rgb(247,18,42)" fg:x="18" fg:w="3"/><text x="0.4058%" y="319.50"></text></g><g><title>__rust_dealloc (2 samples, 0.02%)</title><rect x="0.1817%" y="357" width="0.0173%" height="15" fill="rgb(241,131,45)" fg:x="21" fg:w="2"/><text x="0.4317%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (15 samples, 0.13%)</title><rect x="0.1990%" y="341" width="0.1298%" height="15" fill="rgb(249,31,29)" fg:x="23" fg:w="15"/><text x="0.4490%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (15 samples, 0.13%)</title><rect x="0.1990%" y="325" width="0.1298%" height="15" fill="rgb(225,111,53)" fg:x="23" fg:w="15"/><text x="0.4490%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.12%)</title><rect x="0.2077%" y="309" width="0.1212%" height="15" fill="rgb(238,160,17)" fg:x="24" fg:w="14"/><text x="0.4577%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (14 samples, 0.12%)</title><rect x="0.2077%" y="293" width="0.1212%" height="15" fill="rgb(214,148,48)" fg:x="24" fg:w="14"/><text x="0.4577%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (14 samples, 0.12%)</title><rect x="0.2077%" y="277" width="0.1212%" height="15" fill="rgb(232,36,49)" fg:x="24" fg:w="14"/><text x="0.4577%" y="287.50"></text></g><g><title>alloc::alloc::realloc (14 samples, 0.12%)</title><rect x="0.2077%" y="261" width="0.1212%" height="15" fill="rgb(209,103,24)" fg:x="24" fg:w="14"/><text x="0.4577%" y="271.50"></text></g><g><title>realloc (13 samples, 0.11%)</title><rect x="0.2164%" y="245" width="0.1125%" height="15" fill="rgb(229,88,8)" fg:x="25" fg:w="13"/><text x="0.4664%" y="255.50"></text></g><g><title>[libc.so.6] (12 samples, 0.10%)</title><rect x="0.2250%" y="229" width="0.1039%" height="15" fill="rgb(213,181,19)" fg:x="26" fg:w="12"/><text x="0.4750%" y="239.50"></text></g><g><title>[libc.so.6] (9 samples, 0.08%)</title><rect x="0.2510%" y="213" width="0.0779%" height="15" fill="rgb(254,191,54)" fg:x="29" fg:w="9"/><text x="0.5010%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 0.14%)</title><rect x="0.1990%" y="357" width="0.1385%" height="15" fill="rgb(241,83,37)" fg:x="23" fg:w="16"/><text x="0.4490%" y="367.50"></text></g><g><title>cfree (3 samples, 0.03%)</title><rect x="0.3375%" y="357" width="0.0260%" height="15" fill="rgb(233,36,39)" fg:x="39" fg:w="3"/><text x="0.5875%" y="367.50"></text></g><g><title>[libc.so.6] (3 samples, 0.03%)</title><rect x="0.3375%" y="341" width="0.0260%" height="15" fill="rgb(226,3,54)" fg:x="39" fg:w="3"/><text x="0.5875%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (3 samples, 0.03%)</title><rect x="0.3635%" y="357" width="0.0260%" height="15" fill="rgb(245,192,40)" fg:x="42" fg:w="3"/><text x="0.6135%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (3 samples, 0.03%)</title><rect x="0.3635%" y="341" width="0.0260%" height="15" fill="rgb(238,167,29)" fg:x="42" fg:w="3"/><text x="0.6135%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="0.3635%" y="325" width="0.0260%" height="15" fill="rgb(232,182,51)" fg:x="42" fg:w="3"/><text x="0.6135%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="0.3635%" y="309" width="0.0260%" height="15" fill="rgb(231,60,39)" fg:x="42" fg:w="3"/><text x="0.6135%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="0.3635%" y="293" width="0.0260%" height="15" fill="rgb(208,69,12)" fg:x="42" fg:w="3"/><text x="0.6135%" y="303.50"></text></g><g><title>cfree (2 samples, 0.02%)</title><rect x="0.3721%" y="277" width="0.0173%" height="15" fill="rgb(235,93,37)" fg:x="43" fg:w="2"/><text x="0.6221%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="0.3721%" y="261" width="0.0173%" height="15" fill="rgb(213,116,39)" fg:x="43" fg:w="2"/><text x="0.6221%" y="271.50"></text></g><g><title>day16::compute (51 samples, 0.44%)</title><rect x="0.0692%" y="373" width="0.4414%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="51"/><text x="0.3192%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (14 samples, 0.12%)</title><rect x="0.3894%" y="357" width="0.1212%" height="15" fill="rgb(206,96,30)" fg:x="45" fg:w="14"/><text x="0.6394%" y="367.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (14 samples, 0.12%)</title><rect x="0.3894%" y="341" width="0.1212%" height="15" fill="rgb(218,138,4)" fg:x="45" fg:w="14"/><text x="0.6394%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (14 samples, 0.12%)</title><rect x="0.3894%" y="325" width="0.1212%" height="15" fill="rgb(250,191,14)" fg:x="45" fg:w="14"/><text x="0.6394%" y="335.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (13 samples, 0.11%)</title><rect x="0.3981%" y="309" width="0.1125%" height="15" fill="rgb(239,60,40)" fg:x="46" fg:w="13"/><text x="0.6481%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.11%)</title><rect x="0.3981%" y="293" width="0.1125%" height="15" fill="rgb(206,27,48)" fg:x="46" fg:w="13"/><text x="0.6481%" y="303.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (13 samples, 0.11%)</title><rect x="0.3981%" y="277" width="0.1125%" height="15" fill="rgb(225,35,8)" fg:x="46" fg:w="13"/><text x="0.6481%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.11%)</title><rect x="0.3981%" y="261" width="0.1125%" height="15" fill="rgb(250,213,24)" fg:x="46" fg:w="13"/><text x="0.6481%" y="271.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (13 samples, 0.11%)</title><rect x="0.3981%" y="245" width="0.1125%" height="15" fill="rgb(247,123,22)" fg:x="46" fg:w="13"/><text x="0.6481%" y="255.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (13 samples, 0.11%)</title><rect x="0.3981%" y="229" width="0.1125%" height="15" fill="rgb(231,138,38)" fg:x="46" fg:w="13"/><text x="0.6481%" y="239.50"></text></g><g><title>[libc.so.6] (10 samples, 0.09%)</title><rect x="0.4241%" y="213" width="0.0865%" height="15" fill="rgb(231,145,46)" fg:x="49" fg:w="10"/><text x="0.6741%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="0.5106%" y="357" width="0.0173%" height="15" fill="rgb(251,118,11)" fg:x="59" fg:w="2"/><text x="0.7606%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="0.5106%" y="341" width="0.0173%" height="15" fill="rgb(217,147,25)" fg:x="59" fg:w="2"/><text x="0.7606%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.02%)</title><rect x="0.5106%" y="325" width="0.0173%" height="15" fill="rgb(247,81,37)" fg:x="59" fg:w="2"/><text x="0.7606%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.02%)</title><rect x="0.5106%" y="309" width="0.0173%" height="15" fill="rgb(209,12,38)" fg:x="59" fg:w="2"/><text x="0.7606%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.02%)</title><rect x="0.5106%" y="293" width="0.0173%" height="15" fill="rgb(227,1,9)" fg:x="59" fg:w="2"/><text x="0.7606%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="0.5106%" y="277" width="0.0173%" height="15" fill="rgb(248,47,43)" fg:x="59" fg:w="2"/><text x="0.7606%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="0.5106%" y="261" width="0.0173%" height="15" fill="rgb(221,10,30)" fg:x="59" fg:w="2"/><text x="0.7606%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="0.5106%" y="245" width="0.0173%" height="15" fill="rgb(210,229,1)" fg:x="59" fg:w="2"/><text x="0.7606%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="0.5106%" y="229" width="0.0173%" height="15" fill="rgb(222,148,37)" fg:x="59" fg:w="2"/><text x="0.7606%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="0.5106%" y="213" width="0.0173%" height="15" fill="rgb(234,67,33)" fg:x="59" fg:w="2"/><text x="0.7606%" y="223.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="0.5106%" y="197" width="0.0173%" height="15" fill="rgb(247,98,35)" fg:x="59" fg:w="2"/><text x="0.7606%" y="207.50"></text></g><g><title>malloc (2 samples, 0.02%)</title><rect x="0.5106%" y="181" width="0.0173%" height="15" fill="rgb(247,138,52)" fg:x="59" fg:w="2"/><text x="0.7606%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (2 samples, 0.02%)</title><rect x="0.5279%" y="357" width="0.0173%" height="15" fill="rgb(213,79,30)" fg:x="61" fg:w="2"/><text x="0.7779%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="0.5279%" y="341" width="0.0173%" height="15" fill="rgb(246,177,23)" fg:x="61" fg:w="2"/><text x="0.7779%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop::{{closure}} (2 samples, 0.02%)</title><rect x="0.5279%" y="325" width="0.0173%" height="15" fill="rgb(230,62,27)" fg:x="61" fg:w="2"/><text x="0.7779%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_down_to_bottom (2 samples, 0.02%)</title><rect x="0.5279%" y="309" width="0.0173%" height="15" fill="rgb(216,154,8)" fg:x="61" fg:w="2"/><text x="0.7779%" y="319.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (2 samples, 0.02%)</title><rect x="0.5539%" y="357" width="0.0173%" height="15" fill="rgb(244,35,45)" fg:x="64" fg:w="2"/><text x="0.8039%" y="367.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (2 samples, 0.02%)</title><rect x="0.5539%" y="341" width="0.0173%" height="15" fill="rgb(251,115,12)" fg:x="64" fg:w="2"/><text x="0.8039%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 0.02%)</title><rect x="0.5539%" y="325" width="0.0173%" height="15" fill="rgb(240,54,50)" fg:x="64" fg:w="2"/><text x="0.8039%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.02%)</title><rect x="0.5539%" y="309" width="0.0173%" height="15" fill="rgb(233,84,52)" fg:x="64" fg:w="2"/><text x="0.8039%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.02%)</title><rect x="0.5539%" y="293" width="0.0173%" height="15" fill="rgb(207,117,47)" fg:x="64" fg:w="2"/><text x="0.8039%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="0.5539%" y="277" width="0.0173%" height="15" fill="rgb(249,43,39)" fg:x="64" fg:w="2"/><text x="0.8039%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.02%)</title><rect x="0.5539%" y="261" width="0.0173%" height="15" fill="rgb(209,38,44)" fg:x="64" fg:w="2"/><text x="0.8039%" y="271.50"></text></g><g><title>day16::solve_part_one (59 samples, 0.51%)</title><rect x="0.0692%" y="389" width="0.5106%" height="15" fill="rgb(236,212,23)" fg:x="8" fg:w="59"/><text x="0.3192%" y="399.50"></text></g><g><title>day16::distance (8 samples, 0.07%)</title><rect x="0.5106%" y="373" width="0.0692%" height="15" fill="rgb(242,79,21)" fg:x="59" fg:w="8"/><text x="0.7606%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 0.05%)</title><rect x="0.5971%" y="309" width="0.0519%" height="15" fill="rgb(211,96,35)" fg:x="69" fg:w="6"/><text x="0.8471%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (6 samples, 0.05%)</title><rect x="0.5971%" y="293" width="0.0519%" height="15" fill="rgb(253,215,40)" fg:x="69" fg:w="6"/><text x="0.8471%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="0.5971%" y="277" width="0.0519%" height="15" fill="rgb(211,81,21)" fg:x="69" fg:w="6"/><text x="0.8471%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (6 samples, 0.05%)</title><rect x="0.5971%" y="261" width="0.0519%" height="15" fill="rgb(208,190,38)" fg:x="69" fg:w="6"/><text x="0.8471%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6 samples, 0.05%)</title><rect x="0.5971%" y="245" width="0.0519%" height="15" fill="rgb(235,213,38)" fg:x="69" fg:w="6"/><text x="0.8471%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (5 samples, 0.04%)</title><rect x="0.6058%" y="229" width="0.0433%" height="15" fill="rgb(237,122,38)" fg:x="70" fg:w="5"/><text x="0.8558%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (5 samples, 0.04%)</title><rect x="0.6058%" y="213" width="0.0433%" height="15" fill="rgb(244,218,35)" fg:x="70" fg:w="5"/><text x="0.8558%" y="223.50"></text></g><g><title>day16::solve_part_two::{{closure}} (4 samples, 0.03%)</title><rect x="0.6145%" y="197" width="0.0346%" height="15" fill="rgb(240,68,47)" fg:x="71" fg:w="4"/><text x="0.8645%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (4 samples, 0.03%)</title><rect x="0.6145%" y="181" width="0.0346%" height="15" fill="rgb(210,16,53)" fg:x="71" fg:w="4"/><text x="0.8645%" y="191.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (4 samples, 0.03%)</title><rect x="0.6145%" y="165" width="0.0346%" height="15" fill="rgb(235,124,12)" fg:x="71" fg:w="4"/><text x="0.8645%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (4 samples, 0.03%)</title><rect x="0.6145%" y="149" width="0.0346%" height="15" fill="rgb(224,169,11)" fg:x="71" fg:w="4"/><text x="0.8645%" y="159.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (4 samples, 0.03%)</title><rect x="0.6145%" y="133" width="0.0346%" height="15" fill="rgb(250,166,2)" fg:x="71" fg:w="4"/><text x="0.8645%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.03%)</title><rect x="0.6145%" y="117" width="0.0346%" height="15" fill="rgb(242,216,29)" fg:x="71" fg:w="4"/><text x="0.8645%" y="127.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (4 samples, 0.03%)</title><rect x="0.6145%" y="101" width="0.0346%" height="15" fill="rgb(230,116,27)" fg:x="71" fg:w="4"/><text x="0.8645%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.03%)</title><rect x="0.6145%" y="85" width="0.0346%" height="15" fill="rgb(228,99,48)" fg:x="71" fg:w="4"/><text x="0.8645%" y="95.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.03%)</title><rect x="0.6145%" y="69" width="0.0346%" height="15" fill="rgb(253,11,6)" fg:x="71" fg:w="4"/><text x="0.8645%" y="79.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.03%)</title><rect x="0.6145%" y="53" width="0.0346%" height="15" fill="rgb(247,143,39)" fg:x="71" fg:w="4"/><text x="0.8645%" y="63.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="0.6145%" y="37" width="0.0346%" height="15" fill="rgb(236,97,10)" fg:x="71" fg:w="4"/><text x="0.8645%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.07%)</title><rect x="0.5885%" y="373" width="0.0692%" height="15" fill="rgb(233,208,19)" fg:x="68" fg:w="8"/><text x="0.8385%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.07%)</title><rect x="0.5885%" y="357" width="0.0692%" height="15" fill="rgb(216,164,2)" fg:x="68" fg:w="8"/><text x="0.8385%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.07%)</title><rect x="0.5885%" y="341" width="0.0692%" height="15" fill="rgb(220,129,5)" fg:x="68" fg:w="8"/><text x="0.8385%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.07%)</title><rect x="0.5885%" y="325" width="0.0692%" height="15" fill="rgb(242,17,10)" fg:x="68" fg:w="8"/><text x="0.8385%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (5 samples, 0.04%)</title><rect x="5.8416%" y="261" width="0.0433%" height="15" fill="rgb(242,107,0)" fg:x="675" fg:w="5"/><text x="6.0916%" y="271.50"></text></g><g><title>&lt;&amp;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (7 samples, 0.06%)</title><rect x="5.8330%" y="357" width="0.0606%" height="15" fill="rgb(251,28,31)" fg:x="674" fg:w="7"/><text x="6.0830%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (7 samples, 0.06%)</title><rect x="5.8330%" y="341" width="0.0606%" height="15" fill="rgb(233,223,10)" fg:x="674" fg:w="7"/><text x="6.0830%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (7 samples, 0.06%)</title><rect x="5.8330%" y="325" width="0.0606%" height="15" fill="rgb(215,21,27)" fg:x="674" fg:w="7"/><text x="6.0830%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (7 samples, 0.06%)</title><rect x="5.8330%" y="309" width="0.0606%" height="15" fill="rgb(232,23,21)" fg:x="674" fg:w="7"/><text x="6.0830%" y="319.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (7 samples, 0.06%)</title><rect x="5.8330%" y="293" width="0.0606%" height="15" fill="rgb(244,5,23)" fg:x="674" fg:w="7"/><text x="6.0830%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (6 samples, 0.05%)</title><rect x="5.8416%" y="277" width="0.0519%" height="15" fill="rgb(226,81,46)" fg:x="675" fg:w="6"/><text x="6.0916%" y="287.50"></text></g><g><title>__rdl_alloc (24 samples, 0.21%)</title><rect x="6.4994%" y="181" width="0.2077%" height="15" fill="rgb(247,70,30)" fg:x="751" fg:w="24"/><text x="6.7494%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (11 samples, 0.10%)</title><rect x="6.6119%" y="165" width="0.0952%" height="15" fill="rgb(212,68,19)" fg:x="764" fg:w="11"/><text x="6.8619%" y="175.50"></text></g><g><title>__rust_alloc (16 samples, 0.14%)</title><rect x="6.7071%" y="181" width="0.1385%" height="15" fill="rgb(240,187,13)" fg:x="775" fg:w="16"/><text x="6.9571%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (192 samples, 1.66%)</title><rect x="6.3782%" y="277" width="1.6616%" height="15" fill="rgb(223,113,26)" fg:x="737" fg:w="192"/><text x="6.6282%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (192 samples, 1.66%)</title><rect x="6.3782%" y="261" width="1.6616%" height="15" fill="rgb(206,192,2)" fg:x="737" fg:w="192"/><text x="6.6282%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (192 samples, 1.66%)</title><rect x="6.3782%" y="245" width="1.6616%" height="15" fill="rgb(241,108,4)" fg:x="737" fg:w="192"/><text x="6.6282%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (183 samples, 1.58%)</title><rect x="6.4561%" y="229" width="1.5837%" height="15" fill="rgb(247,173,49)" fg:x="746" fg:w="183"/><text x="6.7061%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (183 samples, 1.58%)</title><rect x="6.4561%" y="213" width="1.5837%" height="15" fill="rgb(224,114,35)" fg:x="746" fg:w="183"/><text x="6.7061%" y="223.50"></text></g><g><title>alloc::alloc::alloc (183 samples, 1.58%)</title><rect x="6.4561%" y="197" width="1.5837%" height="15" fill="rgb(245,159,27)" fg:x="746" fg:w="183"/><text x="6.7061%" y="207.50"></text></g><g><title>malloc (138 samples, 1.19%)</title><rect x="6.8455%" y="181" width="1.1943%" height="15" fill="rgb(245,172,44)" fg:x="791" fg:w="138"/><text x="7.0955%" y="191.50"></text></g><g><title>[libc.so.6] (33 samples, 0.29%)</title><rect x="7.7542%" y="165" width="0.2856%" height="15" fill="rgb(236,23,11)" fg:x="896" fg:w="33"/><text x="8.0042%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (289 samples, 2.50%)</title><rect x="5.8936%" y="357" width="2.5011%" height="15" fill="rgb(205,117,38)" fg:x="681" fg:w="289"/><text x="6.1436%" y="367.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (233 samples, 2.02%)</title><rect x="6.3782%" y="341" width="2.0164%" height="15" fill="rgb(237,72,25)" fg:x="737" fg:w="233"/><text x="6.6282%" y="351.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (233 samples, 2.02%)</title><rect x="6.3782%" y="325" width="2.0164%" height="15" fill="rgb(244,70,9)" fg:x="737" fg:w="233"/><text x="6.6282%" y="335.50">a..</text></g><g><title>alloc::slice::hack::to_vec (233 samples, 2.02%)</title><rect x="6.3782%" y="309" width="2.0164%" height="15" fill="rgb(217,125,39)" fg:x="737" fg:w="233"/><text x="6.6282%" y="319.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (233 samples, 2.02%)</title><rect x="6.3782%" y="293" width="2.0164%" height="15" fill="rgb(235,36,10)" fg:x="737" fg:w="233"/><text x="6.6282%" y="303.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (41 samples, 0.35%)</title><rect x="8.0398%" y="277" width="0.3548%" height="15" fill="rgb(251,123,47)" fg:x="929" fg:w="41"/><text x="8.2898%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.35%)</title><rect x="8.0398%" y="261" width="0.3548%" height="15" fill="rgb(221,13,13)" fg:x="929" fg:w="41"/><text x="8.2898%" y="271.50"></text></g><g><title>[libc.so.6] (37 samples, 0.32%)</title><rect x="8.0744%" y="245" width="0.3202%" height="15" fill="rgb(238,131,9)" fg:x="933" fg:w="37"/><text x="8.3244%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (12 samples, 0.10%)</title><rect x="8.3946%" y="357" width="0.1039%" height="15" fill="rgb(211,50,8)" fg:x="970" fg:w="12"/><text x="8.6446%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (12 samples, 0.10%)</title><rect x="8.7148%" y="293" width="0.1039%" height="15" fill="rgb(245,182,24)" fg:x="1007" fg:w="12"/><text x="8.9648%" y="303.50"></text></g><g><title>__rdl_alloc (94 samples, 0.81%)</title><rect x="9.4764%" y="197" width="0.8135%" height="15" fill="rgb(242,14,37)" fg:x="1095" fg:w="94"/><text x="9.7264%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (73 samples, 0.63%)</title><rect x="9.6582%" y="181" width="0.6318%" height="15" fill="rgb(246,228,12)" fg:x="1116" fg:w="73"/><text x="9.9082%" y="191.50"></text></g><g><title>__rust_alloc (41 samples, 0.35%)</title><rect x="10.2899%" y="197" width="0.3548%" height="15" fill="rgb(213,55,15)" fg:x="1189" fg:w="41"/><text x="10.5399%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (516 samples, 4.47%)</title><rect x="9.1735%" y="245" width="4.4656%" height="15" fill="rgb(209,9,3)" fg:x="1060" fg:w="516"/><text x="9.4235%" y="255.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (516 samples, 4.47%)</title><rect x="9.1735%" y="229" width="4.4656%" height="15" fill="rgb(230,59,30)" fg:x="1060" fg:w="516"/><text x="9.4235%" y="239.50">alloc..</text></g><g><title>alloc::alloc::alloc (515 samples, 4.46%)</title><rect x="9.1822%" y="213" width="4.4569%" height="15" fill="rgb(209,121,21)" fg:x="1061" fg:w="515"/><text x="9.4322%" y="223.50">alloc..</text></g><g><title>malloc (346 samples, 2.99%)</title><rect x="10.6447%" y="197" width="2.9944%" height="15" fill="rgb(220,109,13)" fg:x="1230" fg:w="346"/><text x="10.8947%" y="207.50">mal..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (604 samples, 5.23%)</title><rect x="8.8187%" y="293" width="5.2272%" height="15" fill="rgb(232,18,1)" fg:x="1019" fg:w="604"/><text x="9.0687%" y="303.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (601 samples, 5.20%)</title><rect x="8.8447%" y="277" width="5.2012%" height="15" fill="rgb(215,41,42)" fg:x="1022" fg:w="601"/><text x="9.0947%" y="287.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (601 samples, 5.20%)</title><rect x="8.8447%" y="261" width="5.2012%" height="15" fill="rgb(224,123,36)" fg:x="1022" fg:w="601"/><text x="9.0947%" y="271.50">alloc:..</text></g><g><title>core::alloc::layout::Layout::array (47 samples, 0.41%)</title><rect x="13.6391%" y="245" width="0.4068%" height="15" fill="rgb(240,125,3)" fg:x="1576" fg:w="47"/><text x="13.8891%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (47 samples, 0.41%)</title><rect x="13.6391%" y="229" width="0.4068%" height="15" fill="rgb(205,98,50)" fg:x="1576" fg:w="47"/><text x="13.8891%" y="239.50"></text></g><g><title>[libc.so.6] (175 samples, 1.51%)</title><rect x="14.1843%" y="261" width="1.5145%" height="15" fill="rgb(205,185,37)" fg:x="1639" fg:w="175"/><text x="14.4343%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (833 samples, 7.21%)</title><rect x="8.4985%" y="357" width="7.2090%" height="15" fill="rgb(238,207,15)" fg:x="982" fg:w="833"/><text x="8.7485%" y="367.50">&lt;alloc::ve..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (808 samples, 6.99%)</title><rect x="8.7148%" y="341" width="6.9926%" height="15" fill="rgb(213,199,42)" fg:x="1007" fg:w="808"/><text x="8.9648%" y="351.50">alloc::sl..</text></g><g><title>alloc::slice::hack::to_vec (808 samples, 6.99%)</title><rect x="8.7148%" y="325" width="6.9926%" height="15" fill="rgb(235,201,11)" fg:x="1007" fg:w="808"/><text x="8.9648%" y="335.50">alloc::sl..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (808 samples, 6.99%)</title><rect x="8.7148%" y="309" width="6.9926%" height="15" fill="rgb(207,46,11)" fg:x="1007" fg:w="808"/><text x="8.9648%" y="319.50">&lt;T as all..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (192 samples, 1.66%)</title><rect x="14.0459%" y="293" width="1.6616%" height="15" fill="rgb(241,35,35)" fg:x="1623" fg:w="192"/><text x="14.2959%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (192 samples, 1.66%)</title><rect x="14.0459%" y="277" width="1.6616%" height="15" fill="rgb(243,32,47)" fg:x="1623" fg:w="192"/><text x="14.2959%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (15 samples, 0.13%)</title><rect x="17.5941%" y="197" width="0.1298%" height="15" fill="rgb(247,202,23)" fg:x="2033" fg:w="15"/><text x="17.8441%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (67 samples, 0.58%)</title><rect x="17.3431%" y="213" width="0.5798%" height="15" fill="rgb(219,102,11)" fg:x="2004" fg:w="67"/><text x="17.5931%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (23 samples, 0.20%)</title><rect x="17.7239%" y="197" width="0.1990%" height="15" fill="rgb(243,110,44)" fg:x="2048" fg:w="23"/><text x="17.9739%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (110 samples, 0.95%)</title><rect x="18.2259%" y="197" width="0.9520%" height="15" fill="rgb(222,74,54)" fg:x="2106" fg:w="110"/><text x="18.4759%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (388 samples, 3.36%)</title><rect x="16.3219%" y="261" width="3.3579%" height="15" fill="rgb(216,99,12)" fg:x="1886" fg:w="388"/><text x="16.5719%" y="271.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (388 samples, 3.36%)</title><rect x="16.3219%" y="245" width="3.3579%" height="15" fill="rgb(226,22,26)" fg:x="1886" fg:w="388"/><text x="16.5719%" y="255.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (388 samples, 3.36%)</title><rect x="16.3219%" y="229" width="3.3579%" height="15" fill="rgb(217,163,10)" fg:x="1886" fg:w="388"/><text x="16.5719%" y="239.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (203 samples, 1.76%)</title><rect x="17.9230%" y="213" width="1.7568%" height="15" fill="rgb(213,25,53)" fg:x="2071" fg:w="203"/><text x="18.1730%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (58 samples, 0.50%)</title><rect x="19.1778%" y="197" width="0.5019%" height="15" fill="rgb(252,105,26)" fg:x="2216" fg:w="58"/><text x="19.4278%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (78 samples, 0.68%)</title><rect x="19.6798%" y="261" width="0.6750%" height="15" fill="rgb(220,39,43)" fg:x="2274" fg:w="78"/><text x="19.9298%" y="271.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (34 samples, 0.29%)</title><rect x="20.0606%" y="245" width="0.2942%" height="15" fill="rgb(229,68,48)" fg:x="2318" fg:w="34"/><text x="20.3106%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (34 samples, 0.29%)</title><rect x="20.0606%" y="229" width="0.2942%" height="15" fill="rgb(252,8,32)" fg:x="2318" fg:w="34"/><text x="20.3106%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (34 samples, 0.29%)</title><rect x="20.0606%" y="213" width="0.2942%" height="15" fill="rgb(223,20,43)" fg:x="2318" fg:w="34"/><text x="20.3106%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (72 samples, 0.62%)</title><rect x="20.4327%" y="165" width="0.6231%" height="15" fill="rgb(229,81,49)" fg:x="2361" fg:w="72"/><text x="20.6827%" y="175.50"></text></g><g><title>core::hash::sip::u8to64_le (26 samples, 0.23%)</title><rect x="20.8308%" y="149" width="0.2250%" height="15" fill="rgb(236,28,36)" fg:x="2407" fg:w="26"/><text x="21.0808%" y="159.50"></text></g><g><title>core::cmp::min (2 samples, 0.02%)</title><rect x="21.6703%" y="133" width="0.0173%" height="15" fill="rgb(249,185,26)" fg:x="2504" fg:w="2"/><text x="21.9203%" y="143.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.02%)</title><rect x="21.6703%" y="117" width="0.0173%" height="15" fill="rgb(249,174,33)" fg:x="2504" fg:w="2"/><text x="21.9203%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (684 samples, 5.92%)</title><rect x="16.0537%" y="293" width="5.9195%" height="15" fill="rgb(233,201,37)" fg:x="1855" fg:w="684"/><text x="16.3037%" y="303.50">hashbrow..</text></g><g><title>core::hash::BuildHasher::hash_one (682 samples, 5.90%)</title><rect x="16.0710%" y="277" width="5.9022%" height="15" fill="rgb(221,78,26)" fg:x="1857" fg:w="682"/><text x="16.3210%" y="287.50">core::ha..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (187 samples, 1.62%)</title><rect x="20.3548%" y="261" width="1.6183%" height="15" fill="rgb(250,127,30)" fg:x="2352" fg:w="187"/><text x="20.6048%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (184 samples, 1.59%)</title><rect x="20.3808%" y="245" width="1.5924%" height="15" fill="rgb(230,49,44)" fg:x="2355" fg:w="184"/><text x="20.6308%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (184 samples, 1.59%)</title><rect x="20.3808%" y="229" width="1.5924%" height="15" fill="rgb(229,67,23)" fg:x="2355" fg:w="184"/><text x="20.6308%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (184 samples, 1.59%)</title><rect x="20.3808%" y="213" width="1.5924%" height="15" fill="rgb(249,83,47)" fg:x="2355" fg:w="184"/><text x="20.6308%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (184 samples, 1.59%)</title><rect x="20.3808%" y="197" width="1.5924%" height="15" fill="rgb(215,43,3)" fg:x="2355" fg:w="184"/><text x="20.6308%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (184 samples, 1.59%)</title><rect x="20.3808%" y="181" width="1.5924%" height="15" fill="rgb(238,154,13)" fg:x="2355" fg:w="184"/><text x="20.6308%" y="191.50"></text></g><g><title>core::hash::Hasher::write_u8 (106 samples, 0.92%)</title><rect x="21.0558%" y="165" width="0.9174%" height="15" fill="rgb(219,56,2)" fg:x="2433" fg:w="106"/><text x="21.3058%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (93 samples, 0.80%)</title><rect x="21.1683%" y="149" width="0.8048%" height="15" fill="rgb(233,0,4)" fg:x="2446" fg:w="93"/><text x="21.4183%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (33 samples, 0.29%)</title><rect x="21.6876%" y="133" width="0.2856%" height="15" fill="rgb(235,30,7)" fg:x="2506" fg:w="33"/><text x="21.9376%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.52%)</title><rect x="22.2761%" y="245" width="0.5193%" height="15" fill="rgb(250,79,13)" fg:x="2574" fg:w="60"/><text x="22.5261%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (60 samples, 0.52%)</title><rect x="22.2761%" y="229" width="0.5193%" height="15" fill="rgb(211,146,34)" fg:x="2574" fg:w="60"/><text x="22.5261%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (334 samples, 2.89%)</title><rect x="22.7953%" y="229" width="2.8905%" height="15" fill="rgb(228,22,38)" fg:x="2634" fg:w="334"/><text x="23.0453%" y="239.50">ha..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (322 samples, 2.79%)</title><rect x="22.8992%" y="213" width="2.7867%" height="15" fill="rgb(235,168,5)" fg:x="2646" fg:w="322"/><text x="23.1492%" y="223.50">&lt;a..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (322 samples, 2.79%)</title><rect x="22.8992%" y="197" width="2.7867%" height="15" fill="rgb(221,155,16)" fg:x="2646" fg:w="322"/><text x="23.1492%" y="207.50">co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (322 samples, 2.79%)</title><rect x="22.8992%" y="181" width="2.7867%" height="15" fill="rgb(215,215,53)" fg:x="2646" fg:w="322"/><text x="23.1492%" y="191.50">co..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (322 samples, 2.79%)</title><rect x="22.8992%" y="165" width="2.7867%" height="15" fill="rgb(223,4,10)" fg:x="2646" fg:w="322"/><text x="23.1492%" y="175.50">co..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (322 samples, 2.79%)</title><rect x="22.8992%" y="149" width="2.7867%" height="15" fill="rgb(234,103,6)" fg:x="2646" fg:w="322"/><text x="23.1492%" y="159.50">&lt;[..</text></g><g><title>[libc.so.6] (196 samples, 1.70%)</title><rect x="23.9896%" y="133" width="1.6962%" height="15" fill="rgb(227,97,0)" fg:x="2772" fg:w="196"/><text x="24.2396%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (11 samples, 0.10%)</title><rect x="25.6859%" y="229" width="0.0952%" height="15" fill="rgb(234,150,53)" fg:x="2968" fg:w="11"/><text x="25.9359%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (11 samples, 0.10%)</title><rect x="25.6859%" y="213" width="0.0952%" height="15" fill="rgb(228,201,54)" fg:x="2968" fg:w="11"/><text x="25.9359%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (11 samples, 0.10%)</title><rect x="25.6859%" y="197" width="0.0952%" height="15" fill="rgb(222,22,37)" fg:x="2968" fg:w="11"/><text x="25.9359%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (11 samples, 0.10%)</title><rect x="25.6859%" y="181" width="0.0952%" height="15" fill="rgb(237,53,32)" fg:x="2968" fg:w="11"/><text x="25.9359%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (361 samples, 3.12%)</title><rect x="22.7953%" y="245" width="3.1242%" height="15" fill="rgb(233,25,53)" fg:x="2634" fg:w="361"/><text x="23.0453%" y="255.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (16 samples, 0.14%)</title><rect x="25.7810%" y="229" width="0.1385%" height="15" fill="rgb(210,40,34)" fg:x="2979" fg:w="16"/><text x="26.0310%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (16 samples, 0.14%)</title><rect x="25.7810%" y="213" width="0.1385%" height="15" fill="rgb(241,220,44)" fg:x="2979" fg:w="16"/><text x="26.0310%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (16 samples, 0.14%)</title><rect x="25.7810%" y="197" width="0.1385%" height="15" fill="rgb(235,28,35)" fg:x="2979" fg:w="16"/><text x="26.0310%" y="207.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (16 samples, 0.14%)</title><rect x="25.7810%" y="181" width="0.1385%" height="15" fill="rgb(210,56,17)" fg:x="2979" fg:w="16"/><text x="26.0310%" y="191.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (16 samples, 0.14%)</title><rect x="25.7810%" y="165" width="0.1385%" height="15" fill="rgb(224,130,29)" fg:x="2979" fg:w="16"/><text x="26.0310%" y="175.50"></text></g><g><title>hashbrown::raw::h2 (100 samples, 0.87%)</title><rect x="25.9195%" y="245" width="0.8654%" height="15" fill="rgb(235,212,8)" fg:x="2995" fg:w="100"/><text x="26.1695%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (44 samples, 0.38%)</title><rect x="26.7849%" y="245" width="0.3808%" height="15" fill="rgb(223,33,50)" fg:x="3095" fg:w="44"/><text x="27.0349%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (44 samples, 0.38%)</title><rect x="26.7849%" y="229" width="0.3808%" height="15" fill="rgb(219,149,13)" fg:x="3095" fg:w="44"/><text x="27.0349%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 0.38%)</title><rect x="26.7849%" y="213" width="0.3808%" height="15" fill="rgb(250,156,29)" fg:x="3095" fg:w="44"/><text x="27.0349%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1,347 samples, 11.66%)</title><rect x="15.7075%" y="357" width="11.6573%" height="15" fill="rgb(216,193,19)" fg:x="1815" fg:w="1347"/><text x="15.9575%" y="367.50">&lt;std::collections..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,347 samples, 11.66%)</title><rect x="15.7075%" y="341" width="11.6573%" height="15" fill="rgb(216,135,14)" fg:x="1815" fg:w="1347"/><text x="15.9575%" y="351.50">std::collections:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,347 samples, 11.66%)</title><rect x="15.7075%" y="325" width="11.6573%" height="15" fill="rgb(241,47,5)" fg:x="1815" fg:w="1347"/><text x="15.9575%" y="335.50">hashbrown::map::H..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,347 samples, 11.66%)</title><rect x="15.7075%" y="309" width="11.6573%" height="15" fill="rgb(233,42,35)" fg:x="1815" fg:w="1347"/><text x="15.9575%" y="319.50">hashbrown::map::H..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (623 samples, 5.39%)</title><rect x="21.9732%" y="293" width="5.3916%" height="15" fill="rgb(231,13,6)" fg:x="2539" fg:w="623"/><text x="22.2232%" y="303.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (623 samples, 5.39%)</title><rect x="21.9732%" y="277" width="5.3916%" height="15" fill="rgb(207,181,40)" fg:x="2539" fg:w="623"/><text x="22.2232%" y="287.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (623 samples, 5.39%)</title><rect x="21.9732%" y="261" width="5.3916%" height="15" fill="rgb(254,173,49)" fg:x="2539" fg:w="623"/><text x="22.2232%" y="271.50">hashbro..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (23 samples, 0.20%)</title><rect x="27.1657%" y="245" width="0.1990%" height="15" fill="rgb(221,1,38)" fg:x="3139" fg:w="23"/><text x="27.4157%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (23 samples, 0.20%)</title><rect x="27.1657%" y="229" width="0.1990%" height="15" fill="rgb(206,124,46)" fg:x="3139" fg:w="23"/><text x="27.4157%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.02%)</title><rect x="27.6590%" y="309" width="0.0173%" height="15" fill="rgb(249,21,11)" fg:x="3196" fg:w="2"/><text x="27.9090%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (41 samples, 0.35%)</title><rect x="27.8061%" y="293" width="0.3548%" height="15" fill="rgb(222,201,40)" fg:x="3213" fg:w="41"/><text x="28.0561%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (41 samples, 0.35%)</title><rect x="27.8061%" y="277" width="0.3548%" height="15" fill="rgb(235,61,29)" fg:x="3213" fg:w="41"/><text x="28.0561%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (41 samples, 0.35%)</title><rect x="27.8061%" y="261" width="0.3548%" height="15" fill="rgb(219,207,3)" fg:x="3213" fg:w="41"/><text x="28.0561%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (134 samples, 1.16%)</title><rect x="28.1610%" y="293" width="1.1597%" height="15" fill="rgb(222,56,46)" fg:x="3254" fg:w="134"/><text x="28.4110%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (9 samples, 0.08%)</title><rect x="29.3293%" y="293" width="0.0779%" height="15" fill="rgb(239,76,54)" fg:x="3389" fg:w="9"/><text x="29.5793%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (9 samples, 0.08%)</title><rect x="29.3293%" y="277" width="0.0779%" height="15" fill="rgb(231,124,27)" fg:x="3389" fg:w="9"/><text x="29.5793%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (2 samples, 0.02%)</title><rect x="29.4072%" y="277" width="0.0173%" height="15" fill="rgb(249,195,6)" fg:x="3398" fg:w="2"/><text x="29.6572%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (242 samples, 2.09%)</title><rect x="27.3648%" y="357" width="2.0943%" height="15" fill="rgb(237,174,47)" fg:x="3162" fg:w="242"/><text x="27.6148%" y="367.50">&lt;..</text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (242 samples, 2.09%)</title><rect x="27.3648%" y="341" width="2.0943%" height="15" fill="rgb(206,201,31)" fg:x="3162" fg:w="242"/><text x="27.6148%" y="351.50">&lt;..</text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (242 samples, 2.09%)</title><rect x="27.3648%" y="325" width="2.0943%" height="15" fill="rgb(231,57,52)" fg:x="3162" fg:w="242"/><text x="27.6148%" y="335.50">&lt;..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (206 samples, 1.78%)</title><rect x="27.6763%" y="309" width="1.7828%" height="15" fill="rgb(248,177,22)" fg:x="3198" fg:w="206"/><text x="27.9263%" y="319.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_full (6 samples, 0.05%)</title><rect x="29.4072%" y="293" width="0.0519%" height="15" fill="rgb(215,211,37)" fg:x="3398" fg:w="6"/><text x="29.6572%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (4 samples, 0.03%)</title><rect x="29.4245%" y="277" width="0.0346%" height="15" fill="rgb(241,128,51)" fg:x="3400" fg:w="4"/><text x="29.6745%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.03%)</title><rect x="29.4245%" y="261" width="0.0346%" height="15" fill="rgb(227,165,31)" fg:x="3400" fg:w="4"/><text x="29.6745%" y="271.50"></text></g><g><title>__rdl_dealloc (15 samples, 0.13%)</title><rect x="29.4678%" y="357" width="0.1298%" height="15" fill="rgb(228,167,24)" fg:x="3405" fg:w="15"/><text x="29.7178%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (15 samples, 0.13%)</title><rect x="29.4678%" y="341" width="0.1298%" height="15" fill="rgb(228,143,12)" fg:x="3405" fg:w="15"/><text x="29.7178%" y="351.50"></text></g><g><title>__rust_dealloc (29 samples, 0.25%)</title><rect x="29.5976%" y="357" width="0.2510%" height="15" fill="rgb(249,149,8)" fg:x="3420" fg:w="29"/><text x="29.8476%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (3 samples, 0.03%)</title><rect x="29.8486%" y="357" width="0.0260%" height="15" fill="rgb(243,35,44)" fg:x="3449" fg:w="3"/><text x="30.0986%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (6 samples, 0.05%)</title><rect x="29.8745%" y="357" width="0.0519%" height="15" fill="rgb(246,89,9)" fg:x="3452" fg:w="6"/><text x="30.1245%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5 samples, 0.04%)</title><rect x="29.8832%" y="341" width="0.0433%" height="15" fill="rgb(233,213,13)" fg:x="3453" fg:w="5"/><text x="30.1332%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.04%)</title><rect x="29.8832%" y="325" width="0.0433%" height="15" fill="rgb(233,141,41)" fg:x="3453" fg:w="5"/><text x="30.1332%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (69 samples, 0.60%)</title><rect x="30.5063%" y="309" width="0.5971%" height="15" fill="rgb(239,167,4)" fg:x="3525" fg:w="69"/><text x="30.7563%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (9 samples, 0.08%)</title><rect x="31.1034%" y="309" width="0.0779%" height="15" fill="rgb(209,217,16)" fg:x="3594" fg:w="9"/><text x="31.3534%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (9 samples, 0.08%)</title><rect x="31.1813%" y="309" width="0.0779%" height="15" fill="rgb(219,88,35)" fg:x="3603" fg:w="9"/><text x="31.4313%" y="319.50"></text></g><g><title>__rdl_realloc (104 samples, 0.90%)</title><rect x="31.7525%" y="245" width="0.9000%" height="15" fill="rgb(220,193,23)" fg:x="3669" fg:w="104"/><text x="32.0025%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (78 samples, 0.68%)</title><rect x="31.9775%" y="229" width="0.6750%" height="15" fill="rgb(230,90,52)" fg:x="3695" fg:w="78"/><text x="32.2275%" y="239.50"></text></g><g><title>__rust_realloc (19 samples, 0.16%)</title><rect x="32.6525%" y="245" width="0.1644%" height="15" fill="rgb(252,106,19)" fg:x="3773" fg:w="19"/><text x="32.9025%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,973 samples, 17.07%)</title><rect x="31.5707%" y="293" width="17.0749%" height="15" fill="rgb(206,74,20)" fg:x="3648" fg:w="1973"/><text x="31.8207%" y="303.50">&lt;alloc::alloc::Global as c..</text></g><g><title>alloc::alloc::Global::grow_impl (1,973 samples, 17.07%)</title><rect x="31.5707%" y="277" width="17.0749%" height="15" fill="rgb(230,138,44)" fg:x="3648" fg:w="1973"/><text x="31.8207%" y="287.50">alloc::alloc::Global::grow..</text></g><g><title>alloc::alloc::realloc (1,962 samples, 16.98%)</title><rect x="31.6659%" y="261" width="16.9797%" height="15" fill="rgb(235,182,43)" fg:x="3659" fg:w="1962"/><text x="31.9159%" y="271.50">alloc::alloc::realloc</text></g><g><title>realloc (1,829 samples, 15.83%)</title><rect x="32.8170%" y="245" width="15.8286%" height="15" fill="rgb(242,16,51)" fg:x="3792" fg:w="1829"/><text x="33.0670%" y="255.50">realloc</text></g><g><title>[libc.so.6] (1,726 samples, 14.94%)</title><rect x="33.7084%" y="229" width="14.9373%" height="15" fill="rgb(248,9,4)" fg:x="3895" fg:w="1726"/><text x="33.9584%" y="239.50">[libc.so.6]</text></g><g><title>[libc.so.6] (1,507 samples, 13.04%)</title><rect x="35.6036%" y="213" width="13.0420%" height="15" fill="rgb(210,31,22)" fg:x="4114" fg:w="1507"/><text x="35.8536%" y="223.50">[libc.so.6]</text></g><g><title>[libc.so.6] (114 samples, 0.99%)</title><rect x="47.6590%" y="197" width="0.9866%" height="15" fill="rgb(239,54,39)" fg:x="5507" fg:w="114"/><text x="47.9090%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,022 samples, 17.50%)</title><rect x="31.2592%" y="309" width="17.4989%" height="15" fill="rgb(230,99,41)" fg:x="3612" fg:w="2022"/><text x="31.5092%" y="319.50">alloc::raw_vec::finish_grow</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (13 samples, 0.11%)</title><rect x="48.6456%" y="293" width="0.1125%" height="15" fill="rgb(253,106,12)" fg:x="5621" fg:w="13"/><text x="48.8956%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.03%)</title><rect x="48.7581%" y="309" width="0.0260%" height="15" fill="rgb(213,46,41)" fg:x="5634" fg:w="3"/><text x="49.0081%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (3 samples, 0.03%)</title><rect x="48.7581%" y="293" width="0.0260%" height="15" fill="rgb(215,133,35)" fg:x="5634" fg:w="3"/><text x="49.0081%" y="303.50"></text></g><g><title>core::cmp::max (21 samples, 0.18%)</title><rect x="48.7841%" y="309" width="0.1817%" height="15" fill="rgb(213,28,5)" fg:x="5637" fg:w="21"/><text x="49.0341%" y="319.50"></text></g><g><title>core::cmp::Ord::max (21 samples, 0.18%)</title><rect x="48.7841%" y="293" width="0.1817%" height="15" fill="rgb(215,77,49)" fg:x="5637" fg:w="21"/><text x="49.0341%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,167 samples, 18.75%)</title><rect x="30.3159%" y="341" width="18.7538%" height="15" fill="rgb(248,100,22)" fg:x="3503" fg:w="2167"/><text x="30.5659%" y="351.50">alloc::raw_vec::RawVec&lt;T,A&gt;::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2,165 samples, 18.74%)</title><rect x="30.3332%" y="325" width="18.7365%" height="15" fill="rgb(208,67,9)" fg:x="3505" fg:w="2165"/><text x="30.5832%" y="335.50">alloc::raw_vec::RawVec&lt;T,A&gt;::..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (12 samples, 0.10%)</title><rect x="48.9658%" y="309" width="0.1039%" height="15" fill="rgb(219,133,21)" fg:x="5658" fg:w="12"/><text x="49.2158%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (12 samples, 0.10%)</title><rect x="48.9658%" y="293" width="0.1039%" height="15" fill="rgb(246,46,29)" fg:x="5658" fg:w="12"/><text x="49.2158%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.03%)</title><rect x="49.0697%" y="341" width="0.0260%" height="15" fill="rgb(246,185,52)" fg:x="5670" fg:w="3"/><text x="49.3197%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.03%)</title><rect x="49.0697%" y="325" width="0.0260%" height="15" fill="rgb(252,136,11)" fg:x="5670" fg:w="3"/><text x="49.3197%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (40 samples, 0.35%)</title><rect x="49.0956%" y="341" width="0.3462%" height="15" fill="rgb(219,138,53)" fg:x="5673" fg:w="40"/><text x="49.3456%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (40 samples, 0.35%)</title><rect x="49.0956%" y="325" width="0.3462%" height="15" fill="rgb(211,51,23)" fg:x="5673" fg:w="40"/><text x="49.3456%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,583 samples, 22.35%)</title><rect x="29.9264%" y="357" width="22.3540%" height="15" fill="rgb(247,221,28)" fg:x="3458" fg:w="2583"/><text x="30.1764%" y="367.50">alloc::vec::Vec&lt;T,A&gt;::push</text></g><g><title>core::ptr::write (328 samples, 2.84%)</title><rect x="49.4418%" y="341" width="2.8386%" height="15" fill="rgb(251,222,45)" fg:x="5713" fg:w="328"/><text x="49.6918%" y="351.50">co..</text></g><g><title>cfree (707 samples, 6.12%)</title><rect x="52.2804%" y="357" width="6.1186%" height="15" fill="rgb(217,162,53)" fg:x="6041" fg:w="707"/><text x="52.5304%" y="367.50">cfree</text></g><g><title>[libc.so.6] (588 samples, 5.09%)</title><rect x="53.3103%" y="341" width="5.0887%" height="15" fill="rgb(229,93,14)" fg:x="6160" fg:w="588"/><text x="53.5603%" y="351.50">[libc...</text></g><g><title>[libc.so.6] (85 samples, 0.74%)</title><rect x="57.6633%" y="325" width="0.7356%" height="15" fill="rgb(209,67,49)" fg:x="6663" fg:w="85"/><text x="57.9133%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.03%)</title><rect x="58.4249%" y="229" width="0.0260%" height="15" fill="rgb(213,87,29)" fg:x="6751" fg:w="3"/><text x="58.6749%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="58.4076%" y="293" width="0.0519%" height="15" fill="rgb(205,151,52)" fg:x="6749" fg:w="6"/><text x="58.6576%" y="303.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="58.4076%" y="277" width="0.0519%" height="15" fill="rgb(253,215,39)" fg:x="6749" fg:w="6"/><text x="58.6576%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="58.4076%" y="261" width="0.0519%" height="15" fill="rgb(221,220,41)" fg:x="6749" fg:w="6"/><text x="58.6576%" y="271.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (4 samples, 0.03%)</title><rect x="58.4249%" y="245" width="0.0346%" height="15" fill="rgb(218,133,21)" fg:x="6751" fg:w="4"/><text x="58.6749%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (62 samples, 0.54%)</title><rect x="58.3990%" y="357" width="0.5366%" height="15" fill="rgb(221,193,43)" fg:x="6748" fg:w="62"/><text x="58.6490%" y="367.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&lt;&amp;usize&gt;&gt;::sum (62 samples, 0.54%)</title><rect x="58.3990%" y="341" width="0.5366%" height="15" fill="rgb(240,128,52)" fg:x="6748" fg:w="62"/><text x="58.6490%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (62 samples, 0.54%)</title><rect x="58.3990%" y="325" width="0.5366%" height="15" fill="rgb(253,114,12)" fg:x="6748" fg:w="62"/><text x="58.6490%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (62 samples, 0.54%)</title><rect x="58.3990%" y="309" width="0.5366%" height="15" fill="rgb(215,223,47)" fg:x="6748" fg:w="62"/><text x="58.6490%" y="319.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (55 samples, 0.48%)</title><rect x="58.4595%" y="293" width="0.4760%" height="15" fill="rgb(248,225,23)" fg:x="6755" fg:w="55"/><text x="58.7095%" y="303.50"></text></g><g><title>day16::compute::{{closure}} (53 samples, 0.46%)</title><rect x="58.4768%" y="277" width="0.4587%" height="15" fill="rgb(250,108,0)" fg:x="6757" fg:w="53"/><text x="58.7268%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (53 samples, 0.46%)</title><rect x="58.4768%" y="261" width="0.4587%" height="15" fill="rgb(228,208,7)" fg:x="6757" fg:w="53"/><text x="58.7268%" y="271.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (53 samples, 0.46%)</title><rect x="58.4768%" y="245" width="0.4587%" height="15" fill="rgb(244,45,10)" fg:x="6757" fg:w="53"/><text x="58.7268%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (53 samples, 0.46%)</title><rect x="58.4768%" y="229" width="0.4587%" height="15" fill="rgb(207,125,25)" fg:x="6757" fg:w="53"/><text x="58.7268%" y="239.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (45 samples, 0.39%)</title><rect x="58.5461%" y="213" width="0.3894%" height="15" fill="rgb(210,195,18)" fg:x="6765" fg:w="45"/><text x="58.7961%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (45 samples, 0.39%)</title><rect x="58.5461%" y="197" width="0.3894%" height="15" fill="rgb(249,80,12)" fg:x="6765" fg:w="45"/><text x="58.7961%" y="207.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (45 samples, 0.39%)</title><rect x="58.5461%" y="181" width="0.3894%" height="15" fill="rgb(221,65,9)" fg:x="6765" fg:w="45"/><text x="58.7961%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (45 samples, 0.39%)</title><rect x="58.5461%" y="165" width="0.3894%" height="15" fill="rgb(235,49,36)" fg:x="6765" fg:w="45"/><text x="58.7961%" y="175.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (45 samples, 0.39%)</title><rect x="58.5461%" y="149" width="0.3894%" height="15" fill="rgb(225,32,20)" fg:x="6765" fg:w="45"/><text x="58.7961%" y="159.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (45 samples, 0.39%)</title><rect x="58.5461%" y="133" width="0.3894%" height="15" fill="rgb(215,141,46)" fg:x="6765" fg:w="45"/><text x="58.7961%" y="143.50"></text></g><g><title>[libc.so.6] (42 samples, 0.36%)</title><rect x="58.5720%" y="117" width="0.3635%" height="15" fill="rgb(250,160,47)" fg:x="6768" fg:w="42"/><text x="58.8220%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (138 samples, 1.19%)</title><rect x="58.9355%" y="357" width="1.1943%" height="15" fill="rgb(216,222,40)" fg:x="6810" fg:w="138"/><text x="59.1855%" y="367.50"></text></g><g><title>__rdl_dealloc (9 samples, 0.08%)</title><rect x="60.1385%" y="261" width="0.0779%" height="15" fill="rgb(234,217,39)" fg:x="6949" fg:w="9"/><text x="60.3885%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.08%)</title><rect x="60.1385%" y="245" width="0.0779%" height="15" fill="rgb(207,178,40)" fg:x="6949" fg:w="9"/><text x="60.3885%" y="255.50"></text></g><g><title>__rust_dealloc (14 samples, 0.12%)</title><rect x="60.2164%" y="261" width="0.1212%" height="15" fill="rgb(221,136,13)" fg:x="6958" fg:w="14"/><text x="60.4664%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (173 samples, 1.50%)</title><rect x="60.1385%" y="293" width="1.4972%" height="15" fill="rgb(249,199,10)" fg:x="6949" fg:w="173"/><text x="60.3885%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (173 samples, 1.50%)</title><rect x="60.1385%" y="277" width="1.4972%" height="15" fill="rgb(249,222,13)" fg:x="6949" fg:w="173"/><text x="60.3885%" y="287.50"></text></g><g><title>cfree (150 samples, 1.30%)</title><rect x="60.3375%" y="261" width="1.2981%" height="15" fill="rgb(244,185,38)" fg:x="6972" fg:w="150"/><text x="60.5875%" y="271.50"></text></g><g><title>[libc.so.6] (112 samples, 0.97%)</title><rect x="60.6664%" y="245" width="0.9693%" height="15" fill="rgb(236,202,9)" fg:x="7010" fg:w="112"/><text x="60.9164%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (214 samples, 1.85%)</title><rect x="60.1298%" y="357" width="1.8520%" height="15" fill="rgb(250,229,37)" fg:x="6948" fg:w="214"/><text x="60.3798%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (214 samples, 1.85%)</title><rect x="60.1298%" y="341" width="1.8520%" height="15" fill="rgb(206,174,23)" fg:x="6948" fg:w="214"/><text x="60.3798%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (214 samples, 1.85%)</title><rect x="60.1298%" y="325" width="1.8520%" height="15" fill="rgb(211,33,43)" fg:x="6948" fg:w="214"/><text x="60.3798%" y="335.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (214 samples, 1.85%)</title><rect x="60.1298%" y="309" width="1.8520%" height="15" fill="rgb(245,58,50)" fg:x="6948" fg:w="214"/><text x="60.3798%" y="319.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (40 samples, 0.35%)</title><rect x="61.6357%" y="293" width="0.3462%" height="15" fill="rgb(244,68,36)" fg:x="7122" fg:w="40"/><text x="61.8857%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.03%)</title><rect x="61.9559%" y="277" width="0.0260%" height="15" fill="rgb(232,229,15)" fg:x="7159" fg:w="3"/><text x="62.2059%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (3 samples, 0.03%)</title><rect x="61.9559%" y="261" width="0.0260%" height="15" fill="rgb(254,30,23)" fg:x="7159" fg:w="3"/><text x="62.2059%" y="271.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.10%)</title><rect x="62.0251%" y="277" width="0.0952%" height="15" fill="rgb(235,160,14)" fg:x="7167" fg:w="11"/><text x="62.2751%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11 samples, 0.10%)</title><rect x="62.0251%" y="261" width="0.0952%" height="15" fill="rgb(212,155,44)" fg:x="7167" fg:w="11"/><text x="62.2751%" y="271.50"></text></g><g><title>__rust_dealloc (16 samples, 0.14%)</title><rect x="62.1203%" y="277" width="0.1385%" height="15" fill="rgb(226,2,50)" fg:x="7178" fg:w="16"/><text x="62.3703%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (213 samples, 1.84%)</title><rect x="61.9991%" y="309" width="1.8434%" height="15" fill="rgb(234,177,6)" fg:x="7164" fg:w="213"/><text x="62.2491%" y="319.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (213 samples, 1.84%)</title><rect x="61.9991%" y="293" width="1.8434%" height="15" fill="rgb(217,24,9)" fg:x="7164" fg:w="213"/><text x="62.2491%" y="303.50">a..</text></g><g><title>cfree (183 samples, 1.58%)</title><rect x="62.2588%" y="277" width="1.5837%" height="15" fill="rgb(220,13,46)" fg:x="7194" fg:w="183"/><text x="62.5088%" y="287.50"></text></g><g><title>[libc.so.6] (129 samples, 1.12%)</title><rect x="62.7261%" y="261" width="1.1164%" height="15" fill="rgb(239,221,27)" fg:x="7248" fg:w="129"/><text x="62.9761%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (222 samples, 1.92%)</title><rect x="61.9818%" y="357" width="1.9212%" height="15" fill="rgb(222,198,25)" fg:x="7162" fg:w="222"/><text x="62.2318%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (222 samples, 1.92%)</title><rect x="61.9818%" y="341" width="1.9212%" height="15" fill="rgb(211,99,13)" fg:x="7162" fg:w="222"/><text x="62.2318%" y="351.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (222 samples, 1.92%)</title><rect x="61.9818%" y="325" width="1.9212%" height="15" fill="rgb(232,111,31)" fg:x="7162" fg:w="222"/><text x="62.2318%" y="335.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (7 samples, 0.06%)</title><rect x="63.8425%" y="309" width="0.0606%" height="15" fill="rgb(245,82,37)" fg:x="7377" fg:w="7"/><text x="64.0925%" y="319.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (4,027 samples, 34.85%)</title><rect x="64.6733%" y="309" width="34.8507%" height="15" fill="rgb(227,149,46)" fg:x="7473" fg:w="4027"/><text x="64.9233%" y="319.50">&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,027 samples, 34.85%)</title><rect x="64.6733%" y="293" width="34.8507%" height="15" fill="rgb(218,36,50)" fg:x="7473" fg:w="4027"/><text x="64.9233%" y="303.50">core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;:..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (4,027 samples, 34.85%)</title><rect x="64.6733%" y="277" width="34.8507%" height="15" fill="rgb(226,80,48)" fg:x="7473" fg:w="4027"/><text x="64.9233%" y="287.50">core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,027 samples, 34.85%)</title><rect x="64.6733%" y="261" width="34.8507%" height="15" fill="rgb(238,224,15)" fg:x="7473" fg:w="4027"/><text x="64.9233%" y="271.50">core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;:..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4,027 samples, 34.85%)</title><rect x="64.6733%" y="245" width="34.8507%" height="15" fill="rgb(241,136,10)" fg:x="7473" fg:w="4027"/><text x="64.9233%" y="255.50">core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4,027 samples, 34.85%)</title><rect x="64.6733%" y="229" width="34.8507%" height="15" fill="rgb(208,32,45)" fg:x="7473" fg:w="4027"/><text x="64.9233%" y="239.50">&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal</text></g><g><title>[libc.so.6] (3,481 samples, 30.13%)</title><rect x="69.3985%" y="213" width="30.1255%" height="15" fill="rgb(207,135,9)" fg:x="8019" fg:w="3481"/><text x="69.6485%" y="223.50">[libc.so.6]</text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (4,154 samples, 35.95%)</title><rect x="63.9117%" y="357" width="35.9498%" height="15" fill="rgb(206,86,44)" fg:x="7385" fg:w="4154"/><text x="64.1617%" y="367.50">core::slice::&lt;impl [T]&gt;::contains</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (4,154 samples, 35.95%)</title><rect x="63.9117%" y="341" width="35.9498%" height="15" fill="rgb(245,177,15)" fg:x="7385" fg:w="4154"/><text x="64.1617%" y="351.50">&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (4,154 samples, 35.95%)</title><rect x="63.9117%" y="325" width="35.9498%" height="15" fill="rgb(206,64,50)" fg:x="7385" fg:w="4154"/><text x="64.1617%" y="335.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterato..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.34%)</title><rect x="99.5240%" y="309" width="0.3375%" height="15" fill="rgb(234,36,40)" fg:x="11500" fg:w="39"/><text x="99.7740%" y="319.50"></text></g><g><title>day16::compute (11,475 samples, 99.31%)</title><rect x="0.6577%" y="373" width="99.3077%" height="15" fill="rgb(213,64,8)" fg:x="76" fg:w="11475"/><text x="0.9077%" y="383.50">day16::compute</text></g><g><title>day16::MazeState::build (12 samples, 0.10%)</title><rect x="99.8615%" y="357" width="0.1039%" height="15" fill="rgb(210,75,36)" fg:x="11539" fg:w="12"/><text x="100.1115%" y="367.50"></text></g><g><title>all (11,555 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(229,88,21)" fg:x="0" fg:w="11555"/><text x="0.2500%" y="703.50"></text></g><g><title>day16 (11,555 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(252,204,47)" fg:x="0" fg:w="11555"/><text x="0.2500%" y="687.50">day16</text></g><g><title>_start (11,547 samples, 99.93%)</title><rect x="0.0692%" y="661" width="99.9308%" height="15" fill="rgb(208,77,27)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="671.50">_start</text></g><g><title>__libc_start_main (11,547 samples, 99.93%)</title><rect x="0.0692%" y="645" width="99.9308%" height="15" fill="rgb(221,76,26)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="655.50">__libc_start_main</text></g><g><title>[libc.so.6] (11,547 samples, 99.93%)</title><rect x="0.0692%" y="629" width="99.9308%" height="15" fill="rgb(225,139,18)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="639.50">[libc.so.6]</text></g><g><title>main (11,547 samples, 99.93%)</title><rect x="0.0692%" y="613" width="99.9308%" height="15" fill="rgb(230,137,11)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="623.50">main</text></g><g><title>std::rt::lang_start_internal (11,547 samples, 99.93%)</title><rect x="0.0692%" y="597" width="99.9308%" height="15" fill="rgb(212,28,1)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="607.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (11,547 samples, 99.93%)</title><rect x="0.0692%" y="581" width="99.9308%" height="15" fill="rgb(248,164,17)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (11,547 samples, 99.93%)</title><rect x="0.0692%" y="565" width="99.9308%" height="15" fill="rgb(222,171,42)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (11,547 samples, 99.93%)</title><rect x="0.0692%" y="549" width="99.9308%" height="15" fill="rgb(243,84,45)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="559.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (11,547 samples, 99.93%)</title><rect x="0.0692%" y="533" width="99.9308%" height="15" fill="rgb(252,49,23)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="543.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (11,547 samples, 99.93%)</title><rect x="0.0692%" y="517" width="99.9308%" height="15" fill="rgb(215,19,7)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (11,547 samples, 99.93%)</title><rect x="0.0692%" y="501" width="99.9308%" height="15" fill="rgb(238,81,41)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (11,547 samples, 99.93%)</title><rect x="0.0692%" y="485" width="99.9308%" height="15" fill="rgb(210,199,37)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="495.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (11,547 samples, 99.93%)</title><rect x="0.0692%" y="469" width="99.9308%" height="15" fill="rgb(244,192,49)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="479.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (11,547 samples, 99.93%)</title><rect x="0.0692%" y="453" width="99.9308%" height="15" fill="rgb(226,211,11)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="463.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (11,547 samples, 99.93%)</title><rect x="0.0692%" y="437" width="99.9308%" height="15" fill="rgb(236,162,54)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="447.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (11,547 samples, 99.93%)</title><rect x="0.0692%" y="421" width="99.9308%" height="15" fill="rgb(220,229,9)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>day16::main (11,547 samples, 99.93%)</title><rect x="0.0692%" y="405" width="99.9308%" height="15" fill="rgb(250,87,22)" fg:x="8" fg:w="11547"/><text x="0.3192%" y="415.50">day16::main</text></g><g><title>day16::solve_part_two (11,488 samples, 99.42%)</title><rect x="0.5798%" y="389" width="99.4202%" height="15" fill="rgb(239,43,17)" fg:x="67" fg:w="11488"/><text x="0.8298%" y="399.50">day16::solve_part_two</text></g><g><title>day16::distance (4 samples, 0.03%)</title><rect x="99.9654%" y="373" width="0.0346%" height="15" fill="rgb(231,177,25)" fg:x="11551" fg:w="4"/><text x="100.2154%" y="383.50"></text></g></svg></svg>