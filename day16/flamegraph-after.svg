<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="35099"><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.02%)</title><rect x="0.0000%" y="725" width="0.0171%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="735.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.0057%" y="709" width="0.0114%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="4"/><text x="0.2557%" y="719.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.0057%" y="693" width="0.0114%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="4"/><text x="0.2557%" y="703.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.0057%" y="677" width="0.0114%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="4"/><text x="0.2557%" y="687.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.0057%" y="661" width="0.0114%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="4"/><text x="0.2557%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.02%)</title><rect x="0.0000%" y="741" width="0.0199%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="7"/><text x="0.2500%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.01%)</title><rect x="0.0370%" y="437" width="0.0142%" height="15" fill="rgb(207,160,47)" fg:x="13" fg:w="5"/><text x="0.2870%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.01%)</title><rect x="0.0370%" y="421" width="0.0142%" height="15" fill="rgb(228,23,34)" fg:x="13" fg:w="5"/><text x="0.2870%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.01%)</title><rect x="0.0370%" y="405" width="0.0142%" height="15" fill="rgb(218,30,26)" fg:x="13" fg:w="5"/><text x="0.2870%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.01%)</title><rect x="0.0370%" y="389" width="0.0142%" height="15" fill="rgb(220,122,19)" fg:x="13" fg:w="5"/><text x="0.2870%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.01%)</title><rect x="0.0370%" y="373" width="0.0142%" height="15" fill="rgb(250,228,42)" fg:x="13" fg:w="5"/><text x="0.2870%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.01%)</title><rect x="0.0370%" y="357" width="0.0142%" height="15" fill="rgb(240,193,28)" fg:x="13" fg:w="5"/><text x="0.2870%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.01%)</title><rect x="0.0370%" y="341" width="0.0142%" height="15" fill="rgb(216,20,37)" fg:x="13" fg:w="5"/><text x="0.2870%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.01%)</title><rect x="0.0399%" y="325" width="0.0114%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="4"/><text x="0.2899%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.01%)</title><rect x="0.0399%" y="309" width="0.0114%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="4"/><text x="0.2899%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="0.0541%" y="341" width="0.0114%" height="15" fill="rgb(231,73,38)" fg:x="19" fg:w="4"/><text x="0.3041%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="0.0541%" y="325" width="0.0114%" height="15" fill="rgb(225,20,46)" fg:x="19" fg:w="4"/><text x="0.3041%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.01%)</title><rect x="0.0541%" y="309" width="0.0114%" height="15" fill="rgb(210,31,41)" fg:x="19" fg:w="4"/><text x="0.3041%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.01%)</title><rect x="0.0541%" y="293" width="0.0114%" height="15" fill="rgb(221,200,47)" fg:x="19" fg:w="4"/><text x="0.3041%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.01%)</title><rect x="0.0541%" y="277" width="0.0114%" height="15" fill="rgb(226,26,5)" fg:x="19" fg:w="4"/><text x="0.3041%" y="287.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.01%)</title><rect x="0.0541%" y="261" width="0.0114%" height="15" fill="rgb(249,33,26)" fg:x="19" fg:w="4"/><text x="0.3041%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="0.0513%" y="421" width="0.0171%" height="15" fill="rgb(235,183,28)" fg:x="18" fg:w="6"/><text x="0.3013%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.01%)</title><rect x="0.0541%" y="405" width="0.0142%" height="15" fill="rgb(221,5,38)" fg:x="19" fg:w="5"/><text x="0.3041%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.01%)</title><rect x="0.0541%" y="389" width="0.0142%" height="15" fill="rgb(247,18,42)" fg:x="19" fg:w="5"/><text x="0.3041%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.01%)</title><rect x="0.0541%" y="373" width="0.0142%" height="15" fill="rgb(241,131,45)" fg:x="19" fg:w="5"/><text x="0.3041%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.01%)</title><rect x="0.0541%" y="357" width="0.0142%" height="15" fill="rgb(249,31,29)" fg:x="19" fg:w="5"/><text x="0.3041%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.02%)</title><rect x="0.0684%" y="357" width="0.0199%" height="15" fill="rgb(225,111,53)" fg:x="24" fg:w="7"/><text x="0.3184%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.02%)</title><rect x="0.0684%" y="341" width="0.0199%" height="15" fill="rgb(238,160,17)" fg:x="24" fg:w="7"/><text x="0.3184%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.02%)</title><rect x="0.0684%" y="325" width="0.0199%" height="15" fill="rgb(214,148,48)" fg:x="24" fg:w="7"/><text x="0.3184%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.02%)</title><rect x="0.0684%" y="309" width="0.0199%" height="15" fill="rgb(232,36,49)" fg:x="24" fg:w="7"/><text x="0.3184%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.02%)</title><rect x="0.0684%" y="293" width="0.0199%" height="15" fill="rgb(209,103,24)" fg:x="24" fg:w="7"/><text x="0.3184%" y="303.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.02%)</title><rect x="0.0712%" y="277" width="0.0171%" height="15" fill="rgb(229,88,8)" fg:x="25" fg:w="6"/><text x="0.3212%" y="287.50"></text></g><g><title>malloc (5 samples, 0.01%)</title><rect x="0.0741%" y="261" width="0.0142%" height="15" fill="rgb(213,181,19)" fg:x="26" fg:w="5"/><text x="0.3241%" y="271.50"></text></g><g><title>[libc.so.6] (5 samples, 0.01%)</title><rect x="0.0741%" y="245" width="0.0142%" height="15" fill="rgb(254,191,54)" fg:x="26" fg:w="5"/><text x="0.3241%" y="255.50"></text></g><g><title>&lt;day16::MazeState as core::clone::Clone&gt;::clone (14 samples, 0.04%)</title><rect x="0.0513%" y="437" width="0.0399%" height="15" fill="rgb(241,83,37)" fg:x="18" fg:w="14"/><text x="0.3013%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.02%)</title><rect x="0.0684%" y="421" width="0.0228%" height="15" fill="rgb(233,36,39)" fg:x="24" fg:w="8"/><text x="0.3184%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.02%)</title><rect x="0.0684%" y="405" width="0.0228%" height="15" fill="rgb(226,3,54)" fg:x="24" fg:w="8"/><text x="0.3184%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.02%)</title><rect x="0.0684%" y="389" width="0.0228%" height="15" fill="rgb(245,192,40)" fg:x="24" fg:w="8"/><text x="0.3184%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.02%)</title><rect x="0.0684%" y="373" width="0.0228%" height="15" fill="rgb(238,167,29)" fg:x="24" fg:w="8"/><text x="0.3184%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.01%)</title><rect x="0.0912%" y="373" width="0.0142%" height="15" fill="rgb(232,182,51)" fg:x="32" fg:w="5"/><text x="0.3412%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.01%)</title><rect x="0.0912%" y="357" width="0.0142%" height="15" fill="rgb(231,60,39)" fg:x="32" fg:w="5"/><text x="0.3412%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (6 samples, 0.02%)</title><rect x="0.0912%" y="437" width="0.0171%" height="15" fill="rgb(208,69,12)" fg:x="32" fg:w="6"/><text x="0.3412%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6 samples, 0.02%)</title><rect x="0.0912%" y="421" width="0.0171%" height="15" fill="rgb(235,93,37)" fg:x="32" fg:w="6"/><text x="0.3412%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6 samples, 0.02%)</title><rect x="0.0912%" y="405" width="0.0171%" height="15" fill="rgb(213,116,39)" fg:x="32" fg:w="6"/><text x="0.3412%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 0.02%)</title><rect x="0.0912%" y="389" width="0.0171%" height="15" fill="rgb(222,207,29)" fg:x="32" fg:w="6"/><text x="0.3412%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (5 samples, 0.01%)</title><rect x="0.1168%" y="437" width="0.0142%" height="15" fill="rgb(206,96,30)" fg:x="41" fg:w="5"/><text x="0.3668%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.01%)</title><rect x="0.1168%" y="421" width="0.0142%" height="15" fill="rgb(218,138,4)" fg:x="41" fg:w="5"/><text x="0.3668%" y="431.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop::{{closure}} (5 samples, 0.01%)</title><rect x="0.1168%" y="405" width="0.0142%" height="15" fill="rgb(250,191,14)" fg:x="41" fg:w="5"/><text x="0.3668%" y="415.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_down_to_bottom (5 samples, 0.01%)</title><rect x="0.1168%" y="389" width="0.0142%" height="15" fill="rgb(239,60,40)" fg:x="41" fg:w="5"/><text x="0.3668%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (28 samples, 0.08%)</title><rect x="0.1396%" y="405" width="0.0798%" height="15" fill="rgb(206,27,48)" fg:x="49" fg:w="28"/><text x="0.3896%" y="415.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (28 samples, 0.08%)</title><rect x="0.1396%" y="389" width="0.0798%" height="15" fill="rgb(225,35,8)" fg:x="49" fg:w="28"/><text x="0.3896%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (30 samples, 0.09%)</title><rect x="0.1368%" y="421" width="0.0855%" height="15" fill="rgb(250,213,24)" fg:x="48" fg:w="30"/><text x="0.3868%" y="431.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (33 samples, 0.09%)</title><rect x="0.1311%" y="437" width="0.0940%" height="15" fill="rgb(247,123,22)" fg:x="46" fg:w="33"/><text x="0.3811%" y="447.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="0.2365%" y="293" width="0.0114%" height="15" fill="rgb(231,138,38)" fg:x="83" fg:w="4"/><text x="0.4865%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.03%)</title><rect x="0.2251%" y="437" width="0.0256%" height="15" fill="rgb(231,145,46)" fg:x="79" fg:w="9"/><text x="0.4751%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.03%)</title><rect x="0.2251%" y="421" width="0.0256%" height="15" fill="rgb(251,118,11)" fg:x="79" fg:w="9"/><text x="0.4751%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.03%)</title><rect x="0.2251%" y="405" width="0.0256%" height="15" fill="rgb(217,147,25)" fg:x="79" fg:w="9"/><text x="0.4751%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.03%)</title><rect x="0.2251%" y="389" width="0.0256%" height="15" fill="rgb(247,81,37)" fg:x="79" fg:w="9"/><text x="0.4751%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.03%)</title><rect x="0.2251%" y="373" width="0.0256%" height="15" fill="rgb(209,12,38)" fg:x="79" fg:w="9"/><text x="0.4751%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.03%)</title><rect x="0.2251%" y="357" width="0.0256%" height="15" fill="rgb(227,1,9)" fg:x="79" fg:w="9"/><text x="0.4751%" y="367.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.03%)</title><rect x="0.2251%" y="341" width="0.0256%" height="15" fill="rgb(248,47,43)" fg:x="79" fg:w="9"/><text x="0.4751%" y="351.50"></text></g><g><title>realloc (9 samples, 0.03%)</title><rect x="0.2251%" y="325" width="0.0256%" height="15" fill="rgb(221,10,30)" fg:x="79" fg:w="9"/><text x="0.4751%" y="335.50"></text></g><g><title>[libc.so.6] (7 samples, 0.02%)</title><rect x="0.2308%" y="309" width="0.0199%" height="15" fill="rgb(210,229,1)" fg:x="81" fg:w="7"/><text x="0.4808%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.05%)</title><rect x="0.2792%" y="213" width="0.0484%" height="15" fill="rgb(222,148,37)" fg:x="98" fg:w="17"/><text x="0.5292%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.05%)</title><rect x="0.2792%" y="197" width="0.0484%" height="15" fill="rgb(234,67,33)" fg:x="98" fg:w="17"/><text x="0.5292%" y="207.50"></text></g><g><title>cfree (17 samples, 0.05%)</title><rect x="0.2792%" y="181" width="0.0484%" height="15" fill="rgb(247,98,35)" fg:x="98" fg:w="17"/><text x="0.5292%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (18 samples, 0.05%)</title><rect x="0.2792%" y="277" width="0.0513%" height="15" fill="rgb(247,138,52)" fg:x="98" fg:w="18"/><text x="0.5292%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (18 samples, 0.05%)</title><rect x="0.2792%" y="261" width="0.0513%" height="15" fill="rgb(213,79,30)" fg:x="98" fg:w="18"/><text x="0.5292%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (18 samples, 0.05%)</title><rect x="0.2792%" y="245" width="0.0513%" height="15" fill="rgb(246,177,23)" fg:x="98" fg:w="18"/><text x="0.5292%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.05%)</title><rect x="0.2792%" y="229" width="0.0513%" height="15" fill="rgb(230,62,27)" fg:x="98" fg:w="18"/><text x="0.5292%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;day16::MazeState&gt;&gt; (34 samples, 0.10%)</title><rect x="0.2764%" y="437" width="0.0969%" height="15" fill="rgb(216,154,8)" fg:x="97" fg:w="34"/><text x="0.5264%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;day16::MazeState,std::collections::hash::map::RandomState&gt;&gt; (34 samples, 0.10%)</title><rect x="0.2764%" y="421" width="0.0969%" height="15" fill="rgb(244,35,45)" fg:x="97" fg:w="34"/><text x="0.5264%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;day16::MazeState,(),std::collections::hash::map::RandomState&gt;&gt; (34 samples, 0.10%)</title><rect x="0.2764%" y="405" width="0.0969%" height="15" fill="rgb(251,115,12)" fg:x="97" fg:w="34"/><text x="0.5264%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(day16::MazeState,())&gt;&gt; (34 samples, 0.10%)</title><rect x="0.2764%" y="389" width="0.0969%" height="15" fill="rgb(240,54,50)" fg:x="97" fg:w="34"/><text x="0.5264%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.10%)</title><rect x="0.2764%" y="373" width="0.0969%" height="15" fill="rgb(233,84,52)" fg:x="97" fg:w="34"/><text x="0.5264%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (34 samples, 0.10%)</title><rect x="0.2764%" y="357" width="0.0969%" height="15" fill="rgb(207,117,47)" fg:x="97" fg:w="34"/><text x="0.5264%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (33 samples, 0.09%)</title><rect x="0.2792%" y="341" width="0.0940%" height="15" fill="rgb(249,43,39)" fg:x="98" fg:w="33"/><text x="0.5292%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (33 samples, 0.09%)</title><rect x="0.2792%" y="325" width="0.0940%" height="15" fill="rgb(209,38,44)" fg:x="98" fg:w="33"/><text x="0.5292%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(day16::MazeState,())&gt; (33 samples, 0.09%)</title><rect x="0.2792%" y="309" width="0.0940%" height="15" fill="rgb(236,212,23)" fg:x="98" fg:w="33"/><text x="0.5292%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;day16::MazeState&gt; (33 samples, 0.09%)</title><rect x="0.2792%" y="293" width="0.0940%" height="15" fill="rgb(242,79,21)" fg:x="98" fg:w="33"/><text x="0.5292%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (15 samples, 0.04%)</title><rect x="0.3305%" y="277" width="0.0427%" height="15" fill="rgb(211,96,35)" fg:x="116" fg:w="15"/><text x="0.5805%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (15 samples, 0.04%)</title><rect x="0.3305%" y="261" width="0.0427%" height="15" fill="rgb(253,215,40)" fg:x="116" fg:w="15"/><text x="0.5805%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.04%)</title><rect x="0.3305%" y="245" width="0.0427%" height="15" fill="rgb(211,81,21)" fg:x="116" fg:w="15"/><text x="0.5805%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.04%)</title><rect x="0.3305%" y="229" width="0.0427%" height="15" fill="rgb(208,190,38)" fg:x="116" fg:w="15"/><text x="0.5805%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.04%)</title><rect x="0.3305%" y="213" width="0.0427%" height="15" fill="rgb(235,213,38)" fg:x="116" fg:w="15"/><text x="0.5805%" y="223.50"></text></g><g><title>cfree (15 samples, 0.04%)</title><rect x="0.3305%" y="197" width="0.0427%" height="15" fill="rgb(237,122,38)" fg:x="116" fg:w="15"/><text x="0.5805%" y="207.50"></text></g><g><title>[libc.so.6] (7 samples, 0.02%)</title><rect x="0.3533%" y="181" width="0.0199%" height="15" fill="rgb(244,218,35)" fg:x="124" fg:w="7"/><text x="0.6033%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (11 samples, 0.03%)</title><rect x="0.3732%" y="437" width="0.0313%" height="15" fill="rgb(240,68,47)" fg:x="131" fg:w="11"/><text x="0.6232%" y="447.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (11 samples, 0.03%)</title><rect x="0.3732%" y="421" width="0.0313%" height="15" fill="rgb(210,16,53)" fg:x="131" fg:w="11"/><text x="0.6232%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (11 samples, 0.03%)</title><rect x="0.3732%" y="405" width="0.0313%" height="15" fill="rgb(235,124,12)" fg:x="131" fg:w="11"/><text x="0.6232%" y="415.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (11 samples, 0.03%)</title><rect x="0.3732%" y="389" width="0.0313%" height="15" fill="rgb(224,169,11)" fg:x="131" fg:w="11"/><text x="0.6232%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (11 samples, 0.03%)</title><rect x="0.3732%" y="373" width="0.0313%" height="15" fill="rgb(250,166,2)" fg:x="131" fg:w="11"/><text x="0.6232%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (11 samples, 0.03%)</title><rect x="0.3732%" y="357" width="0.0313%" height="15" fill="rgb(242,216,29)" fg:x="131" fg:w="11"/><text x="0.6232%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (11 samples, 0.03%)</title><rect x="0.3732%" y="341" width="0.0313%" height="15" fill="rgb(230,116,27)" fg:x="131" fg:w="11"/><text x="0.6232%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (11 samples, 0.03%)</title><rect x="0.3732%" y="325" width="0.0313%" height="15" fill="rgb(228,99,48)" fg:x="131" fg:w="11"/><text x="0.6232%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (11 samples, 0.03%)</title><rect x="0.3732%" y="309" width="0.0313%" height="15" fill="rgb(253,11,6)" fg:x="131" fg:w="11"/><text x="0.6232%" y="319.50"></text></g><g><title>[libc.so.6] (11 samples, 0.03%)</title><rect x="0.3732%" y="293" width="0.0313%" height="15" fill="rgb(247,143,39)" fg:x="131" fg:w="11"/><text x="0.6232%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (5 samples, 0.01%)</title><rect x="0.4160%" y="309" width="0.0142%" height="15" fill="rgb(236,97,10)" fg:x="146" fg:w="5"/><text x="0.6660%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (5 samples, 0.01%)</title><rect x="0.4160%" y="293" width="0.0142%" height="15" fill="rgb(233,208,19)" fg:x="146" fg:w="5"/><text x="0.6660%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (5 samples, 0.01%)</title><rect x="0.4160%" y="277" width="0.0142%" height="15" fill="rgb(216,164,2)" fg:x="146" fg:w="5"/><text x="0.6660%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (5 samples, 0.01%)</title><rect x="0.4160%" y="261" width="0.0142%" height="15" fill="rgb(220,129,5)" fg:x="146" fg:w="5"/><text x="0.6660%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (5 samples, 0.01%)</title><rect x="0.4160%" y="245" width="0.0142%" height="15" fill="rgb(242,17,10)" fg:x="146" fg:w="5"/><text x="0.6660%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.02%)</title><rect x="0.4302%" y="181" width="0.0199%" height="15" fill="rgb(242,107,0)" fg:x="151" fg:w="7"/><text x="0.6802%" y="191.50"></text></g><g><title>core::hash::Hash::hash_slice (11 samples, 0.03%)</title><rect x="0.4302%" y="277" width="0.0313%" height="15" fill="rgb(251,28,31)" fg:x="151" fg:w="11"/><text x="0.6802%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (11 samples, 0.03%)</title><rect x="0.4302%" y="261" width="0.0313%" height="15" fill="rgb(233,223,10)" fg:x="151" fg:w="11"/><text x="0.6802%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (11 samples, 0.03%)</title><rect x="0.4302%" y="245" width="0.0313%" height="15" fill="rgb(215,21,27)" fg:x="151" fg:w="11"/><text x="0.6802%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (11 samples, 0.03%)</title><rect x="0.4302%" y="229" width="0.0313%" height="15" fill="rgb(232,23,21)" fg:x="151" fg:w="11"/><text x="0.6802%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (11 samples, 0.03%)</title><rect x="0.4302%" y="213" width="0.0313%" height="15" fill="rgb(244,5,23)" fg:x="151" fg:w="11"/><text x="0.6802%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (11 samples, 0.03%)</title><rect x="0.4302%" y="197" width="0.0313%" height="15" fill="rgb(226,81,46)" fg:x="151" fg:w="11"/><text x="0.6802%" y="207.50"></text></g><g><title>core::hash::Hasher::write_u8 (4 samples, 0.01%)</title><rect x="0.4502%" y="181" width="0.0114%" height="15" fill="rgb(247,70,30)" fg:x="158" fg:w="4"/><text x="0.7002%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (14 samples, 0.04%)</title><rect x="0.4302%" y="309" width="0.0399%" height="15" fill="rgb(212,68,19)" fg:x="151" fg:w="14"/><text x="0.6802%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (14 samples, 0.04%)</title><rect x="0.4302%" y="293" width="0.0399%" height="15" fill="rgb(240,187,13)" fg:x="151" fg:w="14"/><text x="0.6802%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (25 samples, 0.07%)</title><rect x="0.4046%" y="373" width="0.0712%" height="15" fill="rgb(223,113,26)" fg:x="142" fg:w="25"/><text x="0.6546%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25 samples, 0.07%)</title><rect x="0.4046%" y="357" width="0.0712%" height="15" fill="rgb(206,192,2)" fg:x="142" fg:w="25"/><text x="0.6546%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (22 samples, 0.06%)</title><rect x="0.4131%" y="341" width="0.0627%" height="15" fill="rgb(241,108,4)" fg:x="145" fg:w="22"/><text x="0.6631%" y="351.50"></text></g><g><title>&lt;day16::MazeState as core::hash::Hash&gt;::hash (22 samples, 0.06%)</title><rect x="0.4131%" y="325" width="0.0627%" height="15" fill="rgb(247,173,49)" fg:x="145" fg:w="22"/><text x="0.6631%" y="335.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (28 samples, 0.08%)</title><rect x="0.4046%" y="437" width="0.0798%" height="15" fill="rgb(224,114,35)" fg:x="142" fg:w="28"/><text x="0.6546%" y="447.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (28 samples, 0.08%)</title><rect x="0.4046%" y="421" width="0.0798%" height="15" fill="rgb(245,159,27)" fg:x="142" fg:w="28"/><text x="0.6546%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (28 samples, 0.08%)</title><rect x="0.4046%" y="405" width="0.0798%" height="15" fill="rgb(245,172,44)" fg:x="142" fg:w="28"/><text x="0.6546%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (28 samples, 0.08%)</title><rect x="0.4046%" y="389" width="0.0798%" height="15" fill="rgb(236,23,11)" fg:x="142" fg:w="28"/><text x="0.6546%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.03%)</title><rect x="0.5043%" y="197" width="0.0285%" height="15" fill="rgb(205,117,38)" fg:x="177" fg:w="10"/><text x="0.7543%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.01%)</title><rect x="0.5214%" y="181" width="0.0114%" height="15" fill="rgb(237,72,25)" fg:x="183" fg:w="4"/><text x="0.7714%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (20 samples, 0.06%)</title><rect x="0.5014%" y="325" width="0.0570%" height="15" fill="rgb(244,70,9)" fg:x="176" fg:w="20"/><text x="0.7514%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (20 samples, 0.06%)</title><rect x="0.5014%" y="309" width="0.0570%" height="15" fill="rgb(217,125,39)" fg:x="176" fg:w="20"/><text x="0.7514%" y="319.50"></text></g><g><title>core::hash::Hash::hash_slice (20 samples, 0.06%)</title><rect x="0.5014%" y="293" width="0.0570%" height="15" fill="rgb(235,36,10)" fg:x="176" fg:w="20"/><text x="0.7514%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (19 samples, 0.05%)</title><rect x="0.5043%" y="277" width="0.0541%" height="15" fill="rgb(251,123,47)" fg:x="177" fg:w="19"/><text x="0.7543%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (19 samples, 0.05%)</title><rect x="0.5043%" y="261" width="0.0541%" height="15" fill="rgb(221,13,13)" fg:x="177" fg:w="19"/><text x="0.7543%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (19 samples, 0.05%)</title><rect x="0.5043%" y="245" width="0.0541%" height="15" fill="rgb(238,131,9)" fg:x="177" fg:w="19"/><text x="0.7543%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (19 samples, 0.05%)</title><rect x="0.5043%" y="229" width="0.0541%" height="15" fill="rgb(211,50,8)" fg:x="177" fg:w="19"/><text x="0.7543%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (19 samples, 0.05%)</title><rect x="0.5043%" y="213" width="0.0541%" height="15" fill="rgb(245,182,24)" fg:x="177" fg:w="19"/><text x="0.7543%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u8 (9 samples, 0.03%)</title><rect x="0.5328%" y="197" width="0.0256%" height="15" fill="rgb(242,14,37)" fg:x="187" fg:w="9"/><text x="0.7828%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.03%)</title><rect x="0.5328%" y="181" width="0.0256%" height="15" fill="rgb(246,228,12)" fg:x="187" fg:w="9"/><text x="0.7828%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.01%)</title><rect x="0.5470%" y="165" width="0.0114%" height="15" fill="rgb(213,55,15)" fg:x="192" fg:w="4"/><text x="0.7970%" y="175.50"></text></g><g><title>hashbrown::map::make_insert_hash (31 samples, 0.09%)</title><rect x="0.4843%" y="389" width="0.0883%" height="15" fill="rgb(209,9,3)" fg:x="170" fg:w="31"/><text x="0.7343%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (31 samples, 0.09%)</title><rect x="0.4843%" y="373" width="0.0883%" height="15" fill="rgb(230,59,30)" fg:x="170" fg:w="31"/><text x="0.7343%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (29 samples, 0.08%)</title><rect x="0.4900%" y="357" width="0.0826%" height="15" fill="rgb(209,121,21)" fg:x="172" fg:w="29"/><text x="0.7400%" y="367.50"></text></g><g><title>&lt;day16::MazeState as core::hash::Hash&gt;::hash (29 samples, 0.08%)</title><rect x="0.4900%" y="341" width="0.0826%" height="15" fill="rgb(220,109,13)" fg:x="172" fg:w="29"/><text x="0.7400%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (5 samples, 0.01%)</title><rect x="0.5584%" y="325" width="0.0142%" height="15" fill="rgb(232,18,1)" fg:x="196" fg:w="5"/><text x="0.8084%" y="335.50"></text></g><g><title>core::hash::Hasher::write_usize (5 samples, 0.01%)</title><rect x="0.5584%" y="309" width="0.0142%" height="15" fill="rgb(215,41,42)" fg:x="196" fg:w="5"/><text x="0.8084%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.01%)</title><rect x="0.5584%" y="293" width="0.0142%" height="15" fill="rgb(224,123,36)" fg:x="196" fg:w="5"/><text x="0.8084%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.01%)</title><rect x="0.5584%" y="277" width="0.0142%" height="15" fill="rgb(240,125,3)" fg:x="196" fg:w="5"/><text x="0.8084%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.01%)</title><rect x="0.5584%" y="261" width="0.0142%" height="15" fill="rgb(205,98,50)" fg:x="196" fg:w="5"/><text x="0.8084%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.01%)</title><rect x="0.5812%" y="309" width="0.0114%" height="15" fill="rgb(205,185,37)" fg:x="204" fg:w="4"/><text x="0.8312%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.01%)</title><rect x="0.5955%" y="245" width="0.0142%" height="15" fill="rgb(238,207,15)" fg:x="209" fg:w="5"/><text x="0.8455%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.01%)</title><rect x="0.5955%" y="229" width="0.0142%" height="15" fill="rgb(213,199,42)" fg:x="209" fg:w="5"/><text x="0.8455%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.01%)</title><rect x="0.5955%" y="213" width="0.0142%" height="15" fill="rgb(235,201,11)" fg:x="209" fg:w="5"/><text x="0.8455%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (34 samples, 0.10%)</title><rect x="0.6097%" y="213" width="0.0969%" height="15" fill="rgb(207,46,11)" fg:x="214" fg:w="34"/><text x="0.8597%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (34 samples, 0.10%)</title><rect x="0.6097%" y="197" width="0.0969%" height="15" fill="rgb(241,35,35)" fg:x="214" fg:w="34"/><text x="0.8597%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (34 samples, 0.10%)</title><rect x="0.6097%" y="181" width="0.0969%" height="15" fill="rgb(243,32,47)" fg:x="214" fg:w="34"/><text x="0.8597%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (34 samples, 0.10%)</title><rect x="0.6097%" y="165" width="0.0969%" height="15" fill="rgb(247,202,23)" fg:x="214" fg:w="34"/><text x="0.8597%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (34 samples, 0.10%)</title><rect x="0.6097%" y="149" width="0.0969%" height="15" fill="rgb(219,102,11)" fg:x="214" fg:w="34"/><text x="0.8597%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (34 samples, 0.10%)</title><rect x="0.6097%" y="133" width="0.0969%" height="15" fill="rgb(243,110,44)" fg:x="214" fg:w="34"/><text x="0.8597%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (32 samples, 0.09%)</title><rect x="0.6154%" y="117" width="0.0912%" height="15" fill="rgb(222,74,54)" fg:x="216" fg:w="32"/><text x="0.8654%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.02%)</title><rect x="0.7693%" y="85" width="0.0228%" height="15" fill="rgb(216,99,12)" fg:x="270" fg:w="8"/><text x="1.0193%" y="95.50"></text></g><g><title>core::hash::Hash::hash_slice (36 samples, 0.10%)</title><rect x="0.7066%" y="181" width="0.1026%" height="15" fill="rgb(226,22,26)" fg:x="248" fg:w="36"/><text x="0.9566%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (14 samples, 0.04%)</title><rect x="0.7693%" y="165" width="0.0399%" height="15" fill="rgb(217,163,10)" fg:x="270" fg:w="14"/><text x="1.0193%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (14 samples, 0.04%)</title><rect x="0.7693%" y="149" width="0.0399%" height="15" fill="rgb(213,25,53)" fg:x="270" fg:w="14"/><text x="1.0193%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (14 samples, 0.04%)</title><rect x="0.7693%" y="133" width="0.0399%" height="15" fill="rgb(252,105,26)" fg:x="270" fg:w="14"/><text x="1.0193%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (14 samples, 0.04%)</title><rect x="0.7693%" y="117" width="0.0399%" height="15" fill="rgb(220,39,43)" fg:x="270" fg:w="14"/><text x="1.0193%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (14 samples, 0.04%)</title><rect x="0.7693%" y="101" width="0.0399%" height="15" fill="rgb(229,68,48)" fg:x="270" fg:w="14"/><text x="1.0193%" y="111.50"></text></g><g><title>core::hash::Hasher::write_u8 (6 samples, 0.02%)</title><rect x="0.7920%" y="85" width="0.0171%" height="15" fill="rgb(252,8,32)" fg:x="278" fg:w="6"/><text x="1.0420%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="0.7920%" y="69" width="0.0171%" height="15" fill="rgb(223,20,43)" fg:x="278" fg:w="6"/><text x="1.0420%" y="79.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.01%)</title><rect x="0.7977%" y="53" width="0.0114%" height="15" fill="rgb(229,81,49)" fg:x="280" fg:w="4"/><text x="1.0477%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (41 samples, 0.12%)</title><rect x="0.7066%" y="213" width="0.1168%" height="15" fill="rgb(236,28,36)" fg:x="248" fg:w="41"/><text x="0.9566%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (41 samples, 0.12%)</title><rect x="0.7066%" y="197" width="0.1168%" height="15" fill="rgb(249,185,26)" fg:x="248" fg:w="41"/><text x="0.9566%" y="207.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (5 samples, 0.01%)</title><rect x="0.8091%" y="181" width="0.0142%" height="15" fill="rgb(249,174,33)" fg:x="284" fg:w="5"/><text x="1.0591%" y="191.50"></text></g><g><title>core::hash::Hasher::write_usize (5 samples, 0.01%)</title><rect x="0.8091%" y="165" width="0.0142%" height="15" fill="rgb(233,201,37)" fg:x="284" fg:w="5"/><text x="1.0591%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.01%)</title><rect x="0.8091%" y="149" width="0.0142%" height="15" fill="rgb(221,78,26)" fg:x="284" fg:w="5"/><text x="1.0591%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.01%)</title><rect x="0.8091%" y="133" width="0.0142%" height="15" fill="rgb(250,127,30)" fg:x="284" fg:w="5"/><text x="1.0591%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.01%)</title><rect x="0.8091%" y="117" width="0.0142%" height="15" fill="rgb(230,49,44)" fg:x="284" fg:w="5"/><text x="1.0591%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="0.8234%" y="181" width="0.0171%" height="15" fill="rgb(229,67,23)" fg:x="289" fg:w="6"/><text x="1.0734%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="0.8234%" y="165" width="0.0171%" height="15" fill="rgb(249,83,47)" fg:x="289" fg:w="6"/><text x="1.0734%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="0.8234%" y="149" width="0.0171%" height="15" fill="rgb(215,43,3)" fg:x="289" fg:w="6"/><text x="1.0734%" y="159.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (87 samples, 0.25%)</title><rect x="0.5955%" y="293" width="0.2479%" height="15" fill="rgb(238,154,13)" fg:x="209" fg:w="87"/><text x="0.8455%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (87 samples, 0.25%)</title><rect x="0.5955%" y="277" width="0.2479%" height="15" fill="rgb(219,56,2)" fg:x="209" fg:w="87"/><text x="0.8455%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (87 samples, 0.25%)</title><rect x="0.5955%" y="261" width="0.2479%" height="15" fill="rgb(233,0,4)" fg:x="209" fg:w="87"/><text x="0.8455%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (82 samples, 0.23%)</title><rect x="0.6097%" y="245" width="0.2336%" height="15" fill="rgb(235,30,7)" fg:x="214" fg:w="82"/><text x="0.8597%" y="255.50"></text></g><g><title>&lt;day16::MazeState as core::hash::Hash&gt;::hash (82 samples, 0.23%)</title><rect x="0.6097%" y="229" width="0.2336%" height="15" fill="rgb(250,79,13)" fg:x="214" fg:w="82"/><text x="0.8597%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (7 samples, 0.02%)</title><rect x="0.8234%" y="213" width="0.0199%" height="15" fill="rgb(211,146,34)" fg:x="289" fg:w="7"/><text x="1.0734%" y="223.50"></text></g><g><title>core::hash::Hasher::write_usize (7 samples, 0.02%)</title><rect x="0.8234%" y="197" width="0.0199%" height="15" fill="rgb(228,22,38)" fg:x="289" fg:w="7"/><text x="1.0734%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (88 samples, 0.25%)</title><rect x="0.5955%" y="309" width="0.2507%" height="15" fill="rgb(235,168,5)" fg:x="209" fg:w="88"/><text x="0.8455%" y="319.50"></text></g><g><title>day16::compute (289 samples, 0.82%)</title><rect x="0.0256%" y="453" width="0.8234%" height="15" fill="rgb(221,155,16)" fg:x="9" fg:w="289"/><text x="0.2756%" y="463.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (128 samples, 0.36%)</title><rect x="0.4843%" y="437" width="0.3647%" height="15" fill="rgb(215,215,53)" fg:x="170" fg:w="128"/><text x="0.7343%" y="447.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (128 samples, 0.36%)</title><rect x="0.4843%" y="421" width="0.3647%" height="15" fill="rgb(223,4,10)" fg:x="170" fg:w="128"/><text x="0.7343%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (128 samples, 0.36%)</title><rect x="0.4843%" y="405" width="0.3647%" height="15" fill="rgb(234,103,6)" fg:x="170" fg:w="128"/><text x="0.7343%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (96 samples, 0.27%)</title><rect x="0.5755%" y="389" width="0.2735%" height="15" fill="rgb(227,97,0)" fg:x="202" fg:w="96"/><text x="0.8255%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (95 samples, 0.27%)</title><rect x="0.5784%" y="373" width="0.2707%" height="15" fill="rgb(234,150,53)" fg:x="203" fg:w="95"/><text x="0.8284%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (95 samples, 0.27%)</title><rect x="0.5784%" y="357" width="0.2707%" height="15" fill="rgb(228,201,54)" fg:x="203" fg:w="95"/><text x="0.8284%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (95 samples, 0.27%)</title><rect x="0.5784%" y="341" width="0.2707%" height="15" fill="rgb(222,22,37)" fg:x="203" fg:w="95"/><text x="0.8284%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (95 samples, 0.27%)</title><rect x="0.5784%" y="325" width="0.2707%" height="15" fill="rgb(237,53,32)" fg:x="203" fg:w="95"/><text x="0.8284%" y="335.50"></text></g><g><title>day16::solve_part_one (298 samples, 0.85%)</title><rect x="0.0228%" y="469" width="0.8490%" height="15" fill="rgb(233,25,53)" fg:x="8" fg:w="298"/><text x="0.2728%" y="479.50"></text></g><g><title>day16::distance (8 samples, 0.02%)</title><rect x="0.8490%" y="453" width="0.0228%" height="15" fill="rgb(210,40,34)" fg:x="298" fg:w="8"/><text x="1.0990%" y="463.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (4 samples, 0.01%)</title><rect x="0.8604%" y="437" width="0.0114%" height="15" fill="rgb(241,220,44)" fg:x="302" fg:w="4"/><text x="1.1104%" y="447.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (4 samples, 0.01%)</title><rect x="0.8604%" y="421" width="0.0114%" height="15" fill="rgb(235,28,35)" fg:x="302" fg:w="4"/><text x="1.1104%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.03%)</title><rect x="0.8775%" y="357" width="0.0285%" height="15" fill="rgb(210,56,17)" fg:x="308" fg:w="10"/><text x="1.1275%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (10 samples, 0.03%)</title><rect x="0.8775%" y="341" width="0.0285%" height="15" fill="rgb(224,130,29)" fg:x="308" fg:w="10"/><text x="1.1275%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (10 samples, 0.03%)</title><rect x="0.8775%" y="325" width="0.0285%" height="15" fill="rgb(235,212,8)" fg:x="308" fg:w="10"/><text x="1.1275%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (8 samples, 0.02%)</title><rect x="0.8832%" y="309" width="0.0228%" height="15" fill="rgb(223,33,50)" fg:x="310" fg:w="8"/><text x="1.1332%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (8 samples, 0.02%)</title><rect x="0.8832%" y="293" width="0.0228%" height="15" fill="rgb(219,149,13)" fg:x="310" fg:w="8"/><text x="1.1332%" y="303.50"></text></g><g><title>day16::solve_part_two::{{closure}} (8 samples, 0.02%)</title><rect x="0.8832%" y="277" width="0.0228%" height="15" fill="rgb(250,156,29)" fg:x="310" fg:w="8"/><text x="1.1332%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (8 samples, 0.02%)</title><rect x="0.8832%" y="261" width="0.0228%" height="15" fill="rgb(216,193,19)" fg:x="310" fg:w="8"/><text x="1.1332%" y="271.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (8 samples, 0.02%)</title><rect x="0.8832%" y="245" width="0.0228%" height="15" fill="rgb(216,135,14)" fg:x="310" fg:w="8"/><text x="1.1332%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (8 samples, 0.02%)</title><rect x="0.8832%" y="229" width="0.0228%" height="15" fill="rgb(241,47,5)" fg:x="310" fg:w="8"/><text x="1.1332%" y="239.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (8 samples, 0.02%)</title><rect x="0.8832%" y="213" width="0.0228%" height="15" fill="rgb(233,42,35)" fg:x="310" fg:w="8"/><text x="1.1332%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8 samples, 0.02%)</title><rect x="0.8832%" y="197" width="0.0228%" height="15" fill="rgb(231,13,6)" fg:x="310" fg:w="8"/><text x="1.1332%" y="207.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (8 samples, 0.02%)</title><rect x="0.8832%" y="181" width="0.0228%" height="15" fill="rgb(207,181,40)" fg:x="310" fg:w="8"/><text x="1.1332%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8 samples, 0.02%)</title><rect x="0.8832%" y="165" width="0.0228%" height="15" fill="rgb(254,173,49)" fg:x="310" fg:w="8"/><text x="1.1332%" y="175.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (8 samples, 0.02%)</title><rect x="0.8832%" y="149" width="0.0228%" height="15" fill="rgb(221,1,38)" fg:x="310" fg:w="8"/><text x="1.1332%" y="159.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8 samples, 0.02%)</title><rect x="0.8832%" y="133" width="0.0228%" height="15" fill="rgb(206,124,46)" fg:x="310" fg:w="8"/><text x="1.1332%" y="143.50"></text></g><g><title>[libc.so.6] (8 samples, 0.02%)</title><rect x="0.8832%" y="117" width="0.0228%" height="15" fill="rgb(249,21,11)" fg:x="310" fg:w="8"/><text x="1.1332%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.02%)</title><rect x="0.9060%" y="293" width="0.0199%" height="15" fill="rgb(222,201,40)" fg:x="318" fg:w="7"/><text x="1.1560%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (7 samples, 0.02%)</title><rect x="0.9060%" y="277" width="0.0199%" height="15" fill="rgb(235,61,29)" fg:x="318" fg:w="7"/><text x="1.1560%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (7 samples, 0.02%)</title><rect x="0.9060%" y="261" width="0.0199%" height="15" fill="rgb(219,207,3)" fg:x="318" fg:w="7"/><text x="1.1560%" y="271.50"></text></g><g><title>alloc::alloc::realloc (7 samples, 0.02%)</title><rect x="0.9060%" y="245" width="0.0199%" height="15" fill="rgb(222,56,46)" fg:x="318" fg:w="7"/><text x="1.1560%" y="255.50"></text></g><g><title>realloc (7 samples, 0.02%)</title><rect x="0.9060%" y="229" width="0.0199%" height="15" fill="rgb(239,76,54)" fg:x="318" fg:w="7"/><text x="1.1560%" y="239.50"></text></g><g><title>[libc.so.6] (7 samples, 0.02%)</title><rect x="0.9060%" y="213" width="0.0199%" height="15" fill="rgb(231,124,27)" fg:x="318" fg:w="7"/><text x="1.1560%" y="223.50"></text></g><g><title>[libc.so.6] (7 samples, 0.02%)</title><rect x="0.9060%" y="197" width="0.0199%" height="15" fill="rgb(249,195,6)" fg:x="318" fg:w="7"/><text x="1.1560%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (18 samples, 0.05%)</title><rect x="0.8775%" y="389" width="0.0513%" height="15" fill="rgb(237,174,47)" fg:x="308" fg:w="18"/><text x="1.1275%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (18 samples, 0.05%)</title><rect x="0.8775%" y="373" width="0.0513%" height="15" fill="rgb(206,201,31)" fg:x="308" fg:w="18"/><text x="1.1275%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (8 samples, 0.02%)</title><rect x="0.9060%" y="357" width="0.0228%" height="15" fill="rgb(231,57,52)" fg:x="318" fg:w="8"/><text x="1.1560%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.02%)</title><rect x="0.9060%" y="341" width="0.0228%" height="15" fill="rgb(248,177,22)" fg:x="318" fg:w="8"/><text x="1.1560%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.02%)</title><rect x="0.9060%" y="325" width="0.0228%" height="15" fill="rgb(215,211,37)" fg:x="318" fg:w="8"/><text x="1.1560%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 0.02%)</title><rect x="0.9060%" y="309" width="0.0228%" height="15" fill="rgb(241,128,51)" fg:x="318" fg:w="8"/><text x="1.1560%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (23 samples, 0.07%)</title><rect x="0.8775%" y="437" width="0.0655%" height="15" fill="rgb(227,165,31)" fg:x="308" fg:w="23"/><text x="1.1275%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (23 samples, 0.07%)</title><rect x="0.8775%" y="421" width="0.0655%" height="15" fill="rgb(228,167,24)" fg:x="308" fg:w="23"/><text x="1.1275%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (23 samples, 0.07%)</title><rect x="0.8775%" y="405" width="0.0655%" height="15" fill="rgb(228,143,12)" fg:x="308" fg:w="23"/><text x="1.1275%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (65 samples, 0.19%)</title><rect x="0.8775%" y="453" width="0.1852%" height="15" fill="rgb(249,149,8)" fg:x="308" fg:w="65"/><text x="1.1275%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (42 samples, 0.12%)</title><rect x="0.9430%" y="437" width="0.1197%" height="15" fill="rgb(243,35,44)" fg:x="331" fg:w="42"/><text x="1.1930%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (42 samples, 0.12%)</title><rect x="0.9430%" y="421" width="0.1197%" height="15" fill="rgb(246,89,9)" fg:x="331" fg:w="42"/><text x="1.1930%" y="431.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (42 samples, 0.12%)</title><rect x="0.9430%" y="405" width="0.1197%" height="15" fill="rgb(233,213,13)" fg:x="331" fg:w="42"/><text x="1.1930%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (42 samples, 0.12%)</title><rect x="0.9430%" y="389" width="0.1197%" height="15" fill="rgb(233,141,41)" fg:x="331" fg:w="42"/><text x="1.1930%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (42 samples, 0.12%)</title><rect x="0.9430%" y="373" width="0.1197%" height="15" fill="rgb(239,167,4)" fg:x="331" fg:w="42"/><text x="1.1930%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (42 samples, 0.12%)</title><rect x="0.9430%" y="357" width="0.1197%" height="15" fill="rgb(209,217,16)" fg:x="331" fg:w="42"/><text x="1.1930%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (42 samples, 0.12%)</title><rect x="0.9430%" y="341" width="0.1197%" height="15" fill="rgb(219,88,35)" fg:x="331" fg:w="42"/><text x="1.1930%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (42 samples, 0.12%)</title><rect x="0.9430%" y="325" width="0.1197%" height="15" fill="rgb(220,193,23)" fg:x="331" fg:w="42"/><text x="1.1930%" y="335.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (42 samples, 0.12%)</title><rect x="0.9430%" y="309" width="0.1197%" height="15" fill="rgb(230,90,52)" fg:x="331" fg:w="42"/><text x="1.1930%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (42 samples, 0.12%)</title><rect x="0.9430%" y="293" width="0.1197%" height="15" fill="rgb(252,106,19)" fg:x="331" fg:w="42"/><text x="1.1930%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (42 samples, 0.12%)</title><rect x="0.9430%" y="277" width="0.1197%" height="15" fill="rgb(206,74,20)" fg:x="331" fg:w="42"/><text x="1.1930%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (42 samples, 0.12%)</title><rect x="0.9430%" y="261" width="0.1197%" height="15" fill="rgb(230,138,44)" fg:x="331" fg:w="42"/><text x="1.1930%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (42 samples, 0.12%)</title><rect x="0.9430%" y="245" width="0.1197%" height="15" fill="rgb(235,182,43)" fg:x="331" fg:w="42"/><text x="1.1930%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (42 samples, 0.12%)</title><rect x="0.9430%" y="229" width="0.1197%" height="15" fill="rgb(242,16,51)" fg:x="331" fg:w="42"/><text x="1.1930%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (42 samples, 0.12%)</title><rect x="0.9430%" y="213" width="0.1197%" height="15" fill="rgb(248,9,4)" fg:x="331" fg:w="42"/><text x="1.1930%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (42 samples, 0.12%)</title><rect x="0.9430%" y="197" width="0.1197%" height="15" fill="rgb(210,31,22)" fg:x="331" fg:w="42"/><text x="1.1930%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (42 samples, 0.12%)</title><rect x="0.9430%" y="181" width="0.1197%" height="15" fill="rgb(239,54,39)" fg:x="331" fg:w="42"/><text x="1.1930%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (42 samples, 0.12%)</title><rect x="0.9430%" y="165" width="0.1197%" height="15" fill="rgb(230,99,41)" fg:x="331" fg:w="42"/><text x="1.1930%" y="175.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (42 samples, 0.12%)</title><rect x="0.9430%" y="149" width="0.1197%" height="15" fill="rgb(253,106,12)" fg:x="331" fg:w="42"/><text x="1.1930%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.12%)</title><rect x="0.9430%" y="133" width="0.1197%" height="15" fill="rgb(213,46,41)" fg:x="331" fg:w="42"/><text x="1.1930%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.12%)</title><rect x="0.9430%" y="117" width="0.1197%" height="15" fill="rgb(215,133,35)" fg:x="331" fg:w="42"/><text x="1.1930%" y="127.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.12%)</title><rect x="0.9430%" y="101" width="0.1197%" height="15" fill="rgb(213,28,5)" fg:x="331" fg:w="42"/><text x="1.1930%" y="111.50"></text></g><g><title>malloc (42 samples, 0.12%)</title><rect x="0.9430%" y="85" width="0.1197%" height="15" fill="rgb(215,77,49)" fg:x="331" fg:w="42"/><text x="1.1930%" y="95.50"></text></g><g><title>[libc.so.6] (42 samples, 0.12%)</title><rect x="0.9430%" y="69" width="0.1197%" height="15" fill="rgb(248,100,22)" fg:x="331" fg:w="42"/><text x="1.1930%" y="79.50"></text></g><g><title>[libc.so.6] (42 samples, 0.12%)</title><rect x="0.9430%" y="53" width="0.1197%" height="15" fill="rgb(208,67,9)" fg:x="331" fg:w="42"/><text x="1.1930%" y="63.50"></text></g><g><title>[libc.so.6] (18 samples, 0.05%)</title><rect x="1.0114%" y="37" width="0.0513%" height="15" fill="rgb(219,133,21)" fg:x="355" fg:w="18"/><text x="1.2614%" y="47.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (8 samples, 0.02%)</title><rect x="2.6724%" y="373" width="0.0228%" height="15" fill="rgb(246,46,29)" fg:x="938" fg:w="8"/><text x="2.9224%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (8 samples, 0.02%)</title><rect x="2.6724%" y="357" width="0.0228%" height="15" fill="rgb(246,185,52)" fg:x="938" fg:w="8"/><text x="2.9224%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (6 samples, 0.02%)</title><rect x="2.6781%" y="341" width="0.0171%" height="15" fill="rgb(252,136,11)" fg:x="940" fg:w="6"/><text x="2.9281%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.02%)</title><rect x="2.6781%" y="325" width="0.0171%" height="15" fill="rgb(219,138,53)" fg:x="940" fg:w="6"/><text x="2.9281%" y="335.50"></text></g><g><title>&lt;&amp;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (10 samples, 0.03%)</title><rect x="2.6724%" y="437" width="0.0285%" height="15" fill="rgb(211,51,23)" fg:x="938" fg:w="10"/><text x="2.9224%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (10 samples, 0.03%)</title><rect x="2.6724%" y="421" width="0.0285%" height="15" fill="rgb(247,221,28)" fg:x="938" fg:w="10"/><text x="2.9224%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (10 samples, 0.03%)</title><rect x="2.6724%" y="405" width="0.0285%" height="15" fill="rgb(251,222,45)" fg:x="938" fg:w="10"/><text x="2.9224%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (10 samples, 0.03%)</title><rect x="2.6724%" y="389" width="0.0285%" height="15" fill="rgb(217,162,53)" fg:x="938" fg:w="10"/><text x="2.9224%" y="399.50"></text></g><g><title>__rdl_alloc (29 samples, 0.08%)</title><rect x="2.9232%" y="261" width="0.0826%" height="15" fill="rgb(229,93,14)" fg:x="1026" fg:w="29"/><text x="3.1732%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (25 samples, 0.07%)</title><rect x="2.9346%" y="245" width="0.0712%" height="15" fill="rgb(209,67,49)" fg:x="1030" fg:w="25"/><text x="3.1846%" y="255.50"></text></g><g><title>__rust_alloc (13 samples, 0.04%)</title><rect x="3.0058%" y="261" width="0.0370%" height="15" fill="rgb(213,87,29)" fg:x="1055" fg:w="13"/><text x="3.2558%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (427 samples, 1.22%)</title><rect x="2.8747%" y="357" width="1.2166%" height="15" fill="rgb(205,151,52)" fg:x="1009" fg:w="427"/><text x="3.1247%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (427 samples, 1.22%)</title><rect x="2.8747%" y="341" width="1.2166%" height="15" fill="rgb(253,215,39)" fg:x="1009" fg:w="427"/><text x="3.1247%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (427 samples, 1.22%)</title><rect x="2.8747%" y="325" width="1.2166%" height="15" fill="rgb(221,220,41)" fg:x="1009" fg:w="427"/><text x="3.1247%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (416 samples, 1.19%)</title><rect x="2.9061%" y="309" width="1.1852%" height="15" fill="rgb(218,133,21)" fg:x="1020" fg:w="416"/><text x="3.1561%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (416 samples, 1.19%)</title><rect x="2.9061%" y="293" width="1.1852%" height="15" fill="rgb(221,193,43)" fg:x="1020" fg:w="416"/><text x="3.1561%" y="303.50"></text></g><g><title>alloc::alloc::alloc (416 samples, 1.19%)</title><rect x="2.9061%" y="277" width="1.1852%" height="15" fill="rgb(240,128,52)" fg:x="1020" fg:w="416"/><text x="3.1561%" y="287.50"></text></g><g><title>malloc (368 samples, 1.05%)</title><rect x="3.0428%" y="261" width="1.0485%" height="15" fill="rgb(253,114,12)" fg:x="1068" fg:w="368"/><text x="3.2928%" y="271.50"></text></g><g><title>[libc.so.6] (250 samples, 0.71%)</title><rect x="3.3790%" y="245" width="0.7123%" height="15" fill="rgb(215,223,47)" fg:x="1186" fg:w="250"/><text x="3.6290%" y="255.50"></text></g><g><title>[libc.so.6] (19 samples, 0.05%)</title><rect x="4.0372%" y="229" width="0.0541%" height="15" fill="rgb(248,225,23)" fg:x="1417" fg:w="19"/><text x="4.2872%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (549 samples, 1.56%)</title><rect x="2.7009%" y="437" width="1.5641%" height="15" fill="rgb(250,108,0)" fg:x="948" fg:w="549"/><text x="2.9509%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (488 samples, 1.39%)</title><rect x="2.8747%" y="421" width="1.3904%" height="15" fill="rgb(228,208,7)" fg:x="1009" fg:w="488"/><text x="3.1247%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (488 samples, 1.39%)</title><rect x="2.8747%" y="405" width="1.3904%" height="15" fill="rgb(244,45,10)" fg:x="1009" fg:w="488"/><text x="3.1247%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (488 samples, 1.39%)</title><rect x="2.8747%" y="389" width="1.3904%" height="15" fill="rgb(207,125,25)" fg:x="1009" fg:w="488"/><text x="3.1247%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (488 samples, 1.39%)</title><rect x="2.8747%" y="373" width="1.3904%" height="15" fill="rgb(210,195,18)" fg:x="1009" fg:w="488"/><text x="3.1247%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (61 samples, 0.17%)</title><rect x="4.0913%" y="357" width="0.1738%" height="15" fill="rgb(249,80,12)" fg:x="1436" fg:w="61"/><text x="4.3413%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (61 samples, 0.17%)</title><rect x="4.0913%" y="341" width="0.1738%" height="15" fill="rgb(221,65,9)" fg:x="1436" fg:w="61"/><text x="4.3413%" y="351.50"></text></g><g><title>[libc.so.6] (60 samples, 0.17%)</title><rect x="4.0941%" y="325" width="0.1709%" height="15" fill="rgb(235,49,36)" fg:x="1437" fg:w="60"/><text x="4.3441%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (14 samples, 0.04%)</title><rect x="4.2651%" y="437" width="0.0399%" height="15" fill="rgb(225,32,20)" fg:x="1497" fg:w="14"/><text x="4.5151%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (13 samples, 0.04%)</title><rect x="4.3164%" y="373" width="0.0370%" height="15" fill="rgb(215,141,46)" fg:x="1515" fg:w="13"/><text x="4.5664%" y="383.50"></text></g><g><title>__rdl_alloc (80 samples, 0.23%)</title><rect x="4.6953%" y="277" width="0.2279%" height="15" fill="rgb(250,160,47)" fg:x="1648" fg:w="80"/><text x="4.9453%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (54 samples, 0.15%)</title><rect x="4.7694%" y="261" width="0.1539%" height="15" fill="rgb(216,222,40)" fg:x="1674" fg:w="54"/><text x="5.0194%" y="271.50"></text></g><g><title>__rust_alloc (71 samples, 0.20%)</title><rect x="4.9232%" y="277" width="0.2023%" height="15" fill="rgb(234,217,39)" fg:x="1728" fg:w="71"/><text x="5.1732%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (998 samples, 2.84%)</title><rect x="4.6583%" y="325" width="2.8434%" height="15" fill="rgb(207,178,40)" fg:x="1635" fg:w="998"/><text x="4.9083%" y="335.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (998 samples, 2.84%)</title><rect x="4.6583%" y="309" width="2.8434%" height="15" fill="rgb(221,136,13)" fg:x="1635" fg:w="998"/><text x="4.9083%" y="319.50">al..</text></g><g><title>alloc::alloc::alloc (997 samples, 2.84%)</title><rect x="4.6611%" y="293" width="2.8405%" height="15" fill="rgb(249,199,10)" fg:x="1636" fg:w="997"/><text x="4.9111%" y="303.50">al..</text></g><g><title>malloc (834 samples, 2.38%)</title><rect x="5.1255%" y="277" width="2.3761%" height="15" fill="rgb(249,222,13)" fg:x="1799" fg:w="834"/><text x="5.3755%" y="287.50">ma..</text></g><g><title>[libc.so.6] (568 samples, 1.62%)</title><rect x="5.8834%" y="261" width="1.6183%" height="15" fill="rgb(244,185,38)" fg:x="2065" fg:w="568"/><text x="6.1334%" y="271.50"></text></g><g><title>[libc.so.6] (50 samples, 0.14%)</title><rect x="7.3592%" y="245" width="0.1425%" height="15" fill="rgb(236,202,9)" fg:x="2583" fg:w="50"/><text x="7.6092%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,141 samples, 3.25%)</title><rect x="4.3534%" y="373" width="3.2508%" height="15" fill="rgb(250,229,37)" fg:x="1528" fg:w="1141"/><text x="4.6034%" y="383.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,127 samples, 3.21%)</title><rect x="4.3933%" y="357" width="3.2109%" height="15" fill="rgb(206,174,23)" fg:x="1542" fg:w="1127"/><text x="4.6433%" y="367.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,127 samples, 3.21%)</title><rect x="4.3933%" y="341" width="3.2109%" height="15" fill="rgb(211,33,43)" fg:x="1542" fg:w="1127"/><text x="4.6433%" y="351.50">all..</text></g><g><title>core::alloc::layout::Layout::array (36 samples, 0.10%)</title><rect x="7.5016%" y="325" width="0.1026%" height="15" fill="rgb(245,58,50)" fg:x="2633" fg:w="36"/><text x="7.7516%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (36 samples, 0.10%)</title><rect x="7.5016%" y="309" width="0.1026%" height="15" fill="rgb(244,68,36)" fg:x="2633" fg:w="36"/><text x="7.7516%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,493 samples, 4.25%)</title><rect x="4.3050%" y="437" width="4.2537%" height="15" fill="rgb(232,229,15)" fg:x="1511" fg:w="1493"/><text x="4.5550%" y="447.50">&lt;allo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,489 samples, 4.24%)</title><rect x="4.3164%" y="421" width="4.2423%" height="15" fill="rgb(254,30,23)" fg:x="1515" fg:w="1489"/><text x="4.5664%" y="431.50">alloc..</text></g><g><title>alloc::slice::hack::to_vec (1,489 samples, 4.24%)</title><rect x="4.3164%" y="405" width="4.2423%" height="15" fill="rgb(235,160,14)" fg:x="1515" fg:w="1489"/><text x="4.5664%" y="415.50">alloc..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,489 samples, 4.24%)</title><rect x="4.3164%" y="389" width="4.2423%" height="15" fill="rgb(212,155,44)" fg:x="1515" fg:w="1489"/><text x="4.5664%" y="399.50">&lt;T as..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (335 samples, 0.95%)</title><rect x="7.6042%" y="373" width="0.9544%" height="15" fill="rgb(226,2,50)" fg:x="2669" fg:w="335"/><text x="7.8542%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (335 samples, 0.95%)</title><rect x="7.6042%" y="357" width="0.9544%" height="15" fill="rgb(234,177,6)" fg:x="2669" fg:w="335"/><text x="7.8542%" y="367.50"></text></g><g><title>[libc.so.6] (327 samples, 0.93%)</title><rect x="7.6270%" y="341" width="0.9317%" height="15" fill="rgb(217,24,9)" fg:x="2677" fg:w="327"/><text x="7.8770%" y="351.50"></text></g><g><title>__rdl_alloc (19 samples, 0.05%)</title><rect x="8.8692%" y="245" width="0.0541%" height="15" fill="rgb(220,13,46)" fg:x="3113" fg:w="19"/><text x="9.1192%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.02%)</title><rect x="8.9062%" y="229" width="0.0171%" height="15" fill="rgb(239,221,27)" fg:x="3126" fg:w="6"/><text x="9.1562%" y="239.50"></text></g><g><title>__rust_alloc (18 samples, 0.05%)</title><rect x="8.9233%" y="245" width="0.0513%" height="15" fill="rgb(222,198,25)" fg:x="3132" fg:w="18"/><text x="9.1733%" y="255.50"></text></g><g><title>[libc.so.6] (32 samples, 0.09%)</title><rect x="10.7268%" y="213" width="0.0912%" height="15" fill="rgb(211,99,13)" fg:x="3765" fg:w="32"/><text x="10.9768%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (708 samples, 2.02%)</title><rect x="8.8037%" y="341" width="2.0172%" height="15" fill="rgb(232,111,31)" fg:x="3090" fg:w="708"/><text x="9.0537%" y="351.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (708 samples, 2.02%)</title><rect x="8.8037%" y="325" width="2.0172%" height="15" fill="rgb(245,82,37)" fg:x="3090" fg:w="708"/><text x="9.0537%" y="335.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (708 samples, 2.02%)</title><rect x="8.8037%" y="309" width="2.0172%" height="15" fill="rgb(227,149,46)" fg:x="3090" fg:w="708"/><text x="9.0537%" y="319.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (691 samples, 1.97%)</title><rect x="8.8521%" y="293" width="1.9687%" height="15" fill="rgb(218,36,50)" fg:x="3107" fg:w="691"/><text x="9.1021%" y="303.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (691 samples, 1.97%)</title><rect x="8.8521%" y="277" width="1.9687%" height="15" fill="rgb(226,80,48)" fg:x="3107" fg:w="691"/><text x="9.1021%" y="287.50">a..</text></g><g><title>alloc::alloc::alloc (691 samples, 1.97%)</title><rect x="8.8521%" y="261" width="1.9687%" height="15" fill="rgb(238,224,15)" fg:x="3107" fg:w="691"/><text x="9.1021%" y="271.50">a..</text></g><g><title>malloc (648 samples, 1.85%)</title><rect x="8.9746%" y="245" width="1.8462%" height="15" fill="rgb(241,136,10)" fg:x="3150" fg:w="648"/><text x="9.2246%" y="255.50">m..</text></g><g><title>[libc.so.6] (458 samples, 1.30%)</title><rect x="9.5159%" y="229" width="1.3049%" height="15" fill="rgb(208,32,45)" fg:x="3340" fg:w="458"/><text x="9.7659%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (870 samples, 2.48%)</title><rect x="8.6185%" y="421" width="2.4787%" height="15" fill="rgb(207,135,9)" fg:x="3025" fg:w="870"/><text x="8.8685%" y="431.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (805 samples, 2.29%)</title><rect x="8.8037%" y="405" width="2.2935%" height="15" fill="rgb(206,86,44)" fg:x="3090" fg:w="805"/><text x="9.0537%" y="415.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (805 samples, 2.29%)</title><rect x="8.8037%" y="389" width="2.2935%" height="15" fill="rgb(245,177,15)" fg:x="3090" fg:w="805"/><text x="9.0537%" y="399.50">a..</text></g><g><title>alloc::slice::hack::to_vec (805 samples, 2.29%)</title><rect x="8.8037%" y="373" width="2.2935%" height="15" fill="rgb(206,64,50)" fg:x="3090" fg:w="805"/><text x="9.0537%" y="383.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (805 samples, 2.29%)</title><rect x="8.8037%" y="357" width="2.2935%" height="15" fill="rgb(234,36,40)" fg:x="3090" fg:w="805"/><text x="9.0537%" y="367.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (97 samples, 0.28%)</title><rect x="10.8208%" y="341" width="0.2764%" height="15" fill="rgb(213,64,8)" fg:x="3798" fg:w="97"/><text x="11.0708%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (97 samples, 0.28%)</title><rect x="10.8208%" y="325" width="0.2764%" height="15" fill="rgb(210,75,36)" fg:x="3798" fg:w="97"/><text x="11.0708%" y="335.50"></text></g><g><title>[libc.so.6] (95 samples, 0.27%)</title><rect x="10.8265%" y="309" width="0.2707%" height="15" fill="rgb(229,88,21)" fg:x="3800" fg:w="95"/><text x="11.0765%" y="319.50"></text></g><g><title>__rdl_alloc (92 samples, 0.26%)</title><rect x="11.2339%" y="261" width="0.2621%" height="15" fill="rgb(252,204,47)" fg:x="3943" fg:w="92"/><text x="11.4839%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (85 samples, 0.24%)</title><rect x="11.2539%" y="245" width="0.2422%" height="15" fill="rgb(208,77,27)" fg:x="3950" fg:w="85"/><text x="11.5039%" y="255.50"></text></g><g><title>__rust_alloc (39 samples, 0.11%)</title><rect x="11.4961%" y="261" width="0.1111%" height="15" fill="rgb(221,76,26)" fg:x="4035" fg:w="39"/><text x="11.7461%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,173 samples, 3.34%)</title><rect x="11.2111%" y="309" width="3.3420%" height="15" fill="rgb(225,139,18)" fg:x="3935" fg:w="1173"/><text x="11.4611%" y="319.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,173 samples, 3.34%)</title><rect x="11.2111%" y="293" width="3.3420%" height="15" fill="rgb(230,137,11)" fg:x="3935" fg:w="1173"/><text x="11.4611%" y="303.50">all..</text></g><g><title>alloc::alloc::alloc (1,171 samples, 3.34%)</title><rect x="11.2168%" y="277" width="3.3363%" height="15" fill="rgb(212,28,1)" fg:x="3937" fg:w="1171"/><text x="11.4668%" y="287.50">all..</text></g><g><title>malloc (1,034 samples, 2.95%)</title><rect x="11.6072%" y="261" width="2.9460%" height="15" fill="rgb(248,164,17)" fg:x="4074" fg:w="1034"/><text x="11.8572%" y="271.50">ma..</text></g><g><title>[libc.so.6] (809 samples, 2.30%)</title><rect x="12.2482%" y="245" width="2.3049%" height="15" fill="rgb(222,171,42)" fg:x="4299" fg:w="809"/><text x="12.4982%" y="255.50">[..</text></g><g><title>[libc.so.6] (56 samples, 0.16%)</title><rect x="14.3936%" y="229" width="0.1595%" height="15" fill="rgb(243,84,45)" fg:x="5052" fg:w="56"/><text x="14.6436%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,196 samples, 3.41%)</title><rect x="11.1485%" y="357" width="3.4075%" height="15" fill="rgb(252,49,23)" fg:x="3913" fg:w="1196"/><text x="11.3985%" y="367.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,196 samples, 3.41%)</title><rect x="11.1485%" y="341" width="3.4075%" height="15" fill="rgb(215,19,7)" fg:x="3913" fg:w="1196"/><text x="11.3985%" y="351.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,196 samples, 3.41%)</title><rect x="11.1485%" y="325" width="3.4075%" height="15" fill="rgb(238,81,41)" fg:x="3913" fg:w="1196"/><text x="11.3985%" y="335.50">all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,403 samples, 4.00%)</title><rect x="11.0972%" y="421" width="3.9973%" height="15" fill="rgb(210,199,37)" fg:x="3895" fg:w="1403"/><text x="11.3472%" y="431.50">&lt;all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,385 samples, 3.95%)</title><rect x="11.1485%" y="405" width="3.9460%" height="15" fill="rgb(244,192,49)" fg:x="3913" fg:w="1385"/><text x="11.3985%" y="415.50">allo..</text></g><g><title>alloc::slice::hack::to_vec (1,385 samples, 3.95%)</title><rect x="11.1485%" y="389" width="3.9460%" height="15" fill="rgb(226,211,11)" fg:x="3913" fg:w="1385"/><text x="11.3985%" y="399.50">allo..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,385 samples, 3.95%)</title><rect x="11.1485%" y="373" width="3.9460%" height="15" fill="rgb(236,162,54)" fg:x="3913" fg:w="1385"/><text x="11.3985%" y="383.50">&lt;T a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (189 samples, 0.54%)</title><rect x="14.5560%" y="357" width="0.5385%" height="15" fill="rgb(220,229,9)" fg:x="5109" fg:w="189"/><text x="14.8060%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (189 samples, 0.54%)</title><rect x="14.5560%" y="341" width="0.5385%" height="15" fill="rgb(250,87,22)" fg:x="5109" fg:w="189"/><text x="14.8060%" y="351.50"></text></g><g><title>[libc.so.6] (187 samples, 0.53%)</title><rect x="14.5617%" y="325" width="0.5328%" height="15" fill="rgb(239,43,17)" fg:x="5111" fg:w="187"/><text x="14.8117%" y="335.50"></text></g><g><title>&lt;day16::MazeState as core::clone::Clone&gt;::clone (2,299 samples, 6.55%)</title><rect x="8.5586%" y="437" width="6.5500%" height="15" fill="rgb(231,177,25)" fg:x="3004" fg:w="2299"/><text x="8.8086%" y="447.50">&lt;day16::M..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (5 samples, 0.01%)</title><rect x="15.0944%" y="421" width="0.0142%" height="15" fill="rgb(219,179,1)" fg:x="5298" fg:w="5"/><text x="15.3444%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11 samples, 0.03%)</title><rect x="15.6358%" y="277" width="0.0313%" height="15" fill="rgb(238,219,53)" fg:x="5488" fg:w="11"/><text x="15.8858%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (60 samples, 0.17%)</title><rect x="15.5674%" y="293" width="0.1709%" height="15" fill="rgb(232,167,36)" fg:x="5464" fg:w="60"/><text x="15.8174%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (25 samples, 0.07%)</title><rect x="15.6671%" y="277" width="0.0712%" height="15" fill="rgb(244,19,51)" fg:x="5499" fg:w="25"/><text x="15.9171%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (92 samples, 0.26%)</title><rect x="15.8267%" y="277" width="0.2621%" height="15" fill="rgb(224,6,22)" fg:x="5555" fg:w="92"/><text x="16.0767%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (328 samples, 0.93%)</title><rect x="15.3053%" y="341" width="0.9345%" height="15" fill="rgb(224,145,5)" fg:x="5372" fg:w="328"/><text x="15.5553%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (328 samples, 0.93%)</title><rect x="15.3053%" y="325" width="0.9345%" height="15" fill="rgb(234,130,49)" fg:x="5372" fg:w="328"/><text x="15.5553%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (328 samples, 0.93%)</title><rect x="15.3053%" y="309" width="0.9345%" height="15" fill="rgb(254,6,2)" fg:x="5372" fg:w="328"/><text x="15.5553%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (176 samples, 0.50%)</title><rect x="15.7383%" y="293" width="0.5014%" height="15" fill="rgb(208,96,46)" fg:x="5524" fg:w="176"/><text x="15.9883%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (53 samples, 0.15%)</title><rect x="16.0888%" y="277" width="0.1510%" height="15" fill="rgb(239,3,39)" fg:x="5647" fg:w="53"/><text x="16.3388%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (72 samples, 0.21%)</title><rect x="16.2398%" y="341" width="0.2051%" height="15" fill="rgb(233,210,1)" fg:x="5700" fg:w="72"/><text x="16.4898%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (23 samples, 0.07%)</title><rect x="16.3794%" y="325" width="0.0655%" height="15" fill="rgb(244,137,37)" fg:x="5749" fg:w="23"/><text x="16.6294%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (23 samples, 0.07%)</title><rect x="16.3794%" y="309" width="0.0655%" height="15" fill="rgb(240,136,2)" fg:x="5749" fg:w="23"/><text x="16.6294%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (23 samples, 0.07%)</title><rect x="16.3794%" y="293" width="0.0655%" height="15" fill="rgb(239,18,37)" fg:x="5749" fg:w="23"/><text x="16.6294%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (67 samples, 0.19%)</title><rect x="16.4592%" y="245" width="0.1909%" height="15" fill="rgb(218,185,22)" fg:x="5777" fg:w="67"/><text x="16.7092%" y="255.50"></text></g><g><title>core::hash::sip::u8to64_le (35 samples, 0.10%)</title><rect x="16.5503%" y="229" width="0.0997%" height="15" fill="rgb(225,218,4)" fg:x="5809" fg:w="35"/><text x="16.8003%" y="239.50"></text></g><g><title>core::cmp::min (7 samples, 0.02%)</title><rect x="16.8808%" y="213" width="0.0199%" height="15" fill="rgb(230,182,32)" fg:x="5925" fg:w="7"/><text x="17.1308%" y="223.50"></text></g><g><title>core::cmp::Ord::min (7 samples, 0.02%)</title><rect x="16.8808%" y="197" width="0.0199%" height="15" fill="rgb(242,56,43)" fg:x="5925" fg:w="7"/><text x="17.1308%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (621 samples, 1.77%)</title><rect x="15.2141%" y="373" width="1.7693%" height="15" fill="rgb(233,99,24)" fg:x="5340" fg:w="621"/><text x="15.4641%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (616 samples, 1.76%)</title><rect x="15.2284%" y="357" width="1.7550%" height="15" fill="rgb(234,209,42)" fg:x="5345" fg:w="616"/><text x="15.4784%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (189 samples, 0.54%)</title><rect x="16.4449%" y="341" width="0.5385%" height="15" fill="rgb(227,7,12)" fg:x="5772" fg:w="189"/><text x="16.6949%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (187 samples, 0.53%)</title><rect x="16.4506%" y="325" width="0.5328%" height="15" fill="rgb(245,203,43)" fg:x="5774" fg:w="187"/><text x="16.7006%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (187 samples, 0.53%)</title><rect x="16.4506%" y="309" width="0.5328%" height="15" fill="rgb(238,205,33)" fg:x="5774" fg:w="187"/><text x="16.7006%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (187 samples, 0.53%)</title><rect x="16.4506%" y="293" width="0.5328%" height="15" fill="rgb(231,56,7)" fg:x="5774" fg:w="187"/><text x="16.7006%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (187 samples, 0.53%)</title><rect x="16.4506%" y="277" width="0.5328%" height="15" fill="rgb(244,186,29)" fg:x="5774" fg:w="187"/><text x="16.7006%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (187 samples, 0.53%)</title><rect x="16.4506%" y="261" width="0.5328%" height="15" fill="rgb(234,111,31)" fg:x="5774" fg:w="187"/><text x="16.7006%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (117 samples, 0.33%)</title><rect x="16.6500%" y="245" width="0.3333%" height="15" fill="rgb(241,149,10)" fg:x="5844" fg:w="117"/><text x="16.9000%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (104 samples, 0.30%)</title><rect x="16.6871%" y="229" width="0.2963%" height="15" fill="rgb(249,206,44)" fg:x="5857" fg:w="104"/><text x="16.9371%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (29 samples, 0.08%)</title><rect x="16.9008%" y="213" width="0.0826%" height="15" fill="rgb(251,153,30)" fg:x="5932" fg:w="29"/><text x="17.1508%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.11%)</title><rect x="17.0632%" y="325" width="0.1111%" height="15" fill="rgb(239,152,38)" fg:x="5989" fg:w="39"/><text x="17.3132%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (39 samples, 0.11%)</title><rect x="17.0632%" y="309" width="0.1111%" height="15" fill="rgb(249,139,47)" fg:x="5989" fg:w="39"/><text x="17.3132%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (392 samples, 1.12%)</title><rect x="17.1743%" y="309" width="1.1168%" height="15" fill="rgb(244,64,35)" fg:x="6028" fg:w="392"/><text x="17.4243%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (380 samples, 1.08%)</title><rect x="17.2085%" y="293" width="1.0827%" height="15" fill="rgb(216,46,15)" fg:x="6040" fg:w="380"/><text x="17.4585%" y="303.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (380 samples, 1.08%)</title><rect x="17.2085%" y="277" width="1.0827%" height="15" fill="rgb(250,74,19)" fg:x="6040" fg:w="380"/><text x="17.4585%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (380 samples, 1.08%)</title><rect x="17.2085%" y="261" width="1.0827%" height="15" fill="rgb(249,42,33)" fg:x="6040" fg:w="380"/><text x="17.4585%" y="271.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (380 samples, 1.08%)</title><rect x="17.2085%" y="245" width="1.0827%" height="15" fill="rgb(242,149,17)" fg:x="6040" fg:w="380"/><text x="17.4585%" y="255.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (380 samples, 1.08%)</title><rect x="17.2085%" y="229" width="1.0827%" height="15" fill="rgb(244,29,21)" fg:x="6040" fg:w="380"/><text x="17.4585%" y="239.50"></text></g><g><title>[libc.so.6] (232 samples, 0.66%)</title><rect x="17.6301%" y="213" width="0.6610%" height="15" fill="rgb(220,130,37)" fg:x="6188" fg:w="232"/><text x="17.8801%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (6 samples, 0.02%)</title><rect x="18.2911%" y="309" width="0.0171%" height="15" fill="rgb(211,67,2)" fg:x="6420" fg:w="6"/><text x="18.5411%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (6 samples, 0.02%)</title><rect x="18.2911%" y="293" width="0.0171%" height="15" fill="rgb(235,68,52)" fg:x="6420" fg:w="6"/><text x="18.5411%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (6 samples, 0.02%)</title><rect x="18.2911%" y="277" width="0.0171%" height="15" fill="rgb(246,142,3)" fg:x="6420" fg:w="6"/><text x="18.5411%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.02%)</title><rect x="18.2911%" y="261" width="0.0171%" height="15" fill="rgb(241,25,7)" fg:x="6420" fg:w="6"/><text x="18.5411%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (411 samples, 1.17%)</title><rect x="17.1743%" y="325" width="1.1710%" height="15" fill="rgb(242,119,39)" fg:x="6028" fg:w="411"/><text x="17.4243%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (13 samples, 0.04%)</title><rect x="18.3082%" y="309" width="0.0370%" height="15" fill="rgb(241,98,45)" fg:x="6426" fg:w="13"/><text x="18.5582%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (13 samples, 0.04%)</title><rect x="18.3082%" y="293" width="0.0370%" height="15" fill="rgb(254,28,30)" fg:x="6426" fg:w="13"/><text x="18.5582%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13 samples, 0.04%)</title><rect x="18.3082%" y="277" width="0.0370%" height="15" fill="rgb(241,142,54)" fg:x="6426" fg:w="13"/><text x="18.5582%" y="287.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (13 samples, 0.04%)</title><rect x="18.3082%" y="261" width="0.0370%" height="15" fill="rgb(222,85,15)" fg:x="6426" fg:w="13"/><text x="18.5582%" y="271.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (13 samples, 0.04%)</title><rect x="18.3082%" y="245" width="0.0370%" height="15" fill="rgb(210,85,47)" fg:x="6426" fg:w="13"/><text x="18.5582%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (60 samples, 0.17%)</title><rect x="18.3453%" y="325" width="0.1709%" height="15" fill="rgb(224,206,25)" fg:x="6439" fg:w="60"/><text x="18.5953%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (43 samples, 0.12%)</title><rect x="18.5162%" y="325" width="0.1225%" height="15" fill="rgb(243,201,19)" fg:x="6499" fg:w="43"/><text x="18.7662%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (43 samples, 0.12%)</title><rect x="18.5162%" y="309" width="0.1225%" height="15" fill="rgb(236,59,4)" fg:x="6499" fg:w="43"/><text x="18.7662%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 0.12%)</title><rect x="18.5162%" y="293" width="0.1225%" height="15" fill="rgb(254,179,45)" fg:x="6499" fg:w="43"/><text x="18.7662%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1,259 samples, 3.59%)</title><rect x="15.1087%" y="437" width="3.5870%" height="15" fill="rgb(226,14,10)" fg:x="5303" fg:w="1259"/><text x="15.3587%" y="447.50">&lt;std..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,259 samples, 3.59%)</title><rect x="15.1087%" y="421" width="3.5870%" height="15" fill="rgb(244,27,41)" fg:x="5303" fg:w="1259"/><text x="15.3587%" y="431.50">std:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,259 samples, 3.59%)</title><rect x="15.1087%" y="405" width="3.5870%" height="15" fill="rgb(235,35,32)" fg:x="5303" fg:w="1259"/><text x="15.3587%" y="415.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,259 samples, 3.59%)</title><rect x="15.1087%" y="389" width="3.5870%" height="15" fill="rgb(218,68,31)" fg:x="5303" fg:w="1259"/><text x="15.3587%" y="399.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (601 samples, 1.71%)</title><rect x="16.9834%" y="373" width="1.7123%" height="15" fill="rgb(207,120,37)" fg:x="5961" fg:w="601"/><text x="17.2334%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (601 samples, 1.71%)</title><rect x="16.9834%" y="357" width="1.7123%" height="15" fill="rgb(227,98,0)" fg:x="5961" fg:w="601"/><text x="17.2334%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (601 samples, 1.71%)</title><rect x="16.9834%" y="341" width="1.7123%" height="15" fill="rgb(207,7,3)" fg:x="5961" fg:w="601"/><text x="17.2334%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (20 samples, 0.06%)</title><rect x="18.6387%" y="325" width="0.0570%" height="15" fill="rgb(206,98,19)" fg:x="6542" fg:w="20"/><text x="18.8887%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (20 samples, 0.06%)</title><rect x="18.6387%" y="309" width="0.0570%" height="15" fill="rgb(217,5,26)" fg:x="6542" fg:w="20"/><text x="18.8887%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (14 samples, 0.04%)</title><rect x="18.8324%" y="389" width="0.0399%" height="15" fill="rgb(235,190,38)" fg:x="6610" fg:w="14"/><text x="19.0824%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (39 samples, 0.11%)</title><rect x="18.9208%" y="373" width="0.1111%" height="15" fill="rgb(247,86,24)" fg:x="6641" fg:w="39"/><text x="19.1708%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (39 samples, 0.11%)</title><rect x="18.9208%" y="357" width="0.1111%" height="15" fill="rgb(205,101,16)" fg:x="6641" fg:w="39"/><text x="19.1708%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (39 samples, 0.11%)</title><rect x="18.9208%" y="341" width="0.1111%" height="15" fill="rgb(246,168,33)" fg:x="6641" fg:w="39"/><text x="19.1708%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (144 samples, 0.41%)</title><rect x="19.0319%" y="373" width="0.4103%" height="15" fill="rgb(231,114,1)" fg:x="6680" fg:w="144"/><text x="19.2819%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (296 samples, 0.84%)</title><rect x="18.6957%" y="437" width="0.8433%" height="15" fill="rgb(207,184,53)" fg:x="6562" fg:w="296"/><text x="18.9457%" y="447.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (296 samples, 0.84%)</title><rect x="18.6957%" y="421" width="0.8433%" height="15" fill="rgb(224,95,51)" fg:x="6562" fg:w="296"/><text x="18.9457%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (296 samples, 0.84%)</title><rect x="18.6957%" y="405" width="0.8433%" height="15" fill="rgb(212,188,45)" fg:x="6562" fg:w="296"/><text x="18.9457%" y="415.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (234 samples, 0.67%)</title><rect x="18.8723%" y="389" width="0.6667%" height="15" fill="rgb(223,154,38)" fg:x="6624" fg:w="234"/><text x="19.1223%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (32 samples, 0.09%)</title><rect x="19.4478%" y="373" width="0.0912%" height="15" fill="rgb(251,22,52)" fg:x="6826" fg:w="32"/><text x="19.6978%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (32 samples, 0.09%)</title><rect x="19.4478%" y="357" width="0.0912%" height="15" fill="rgb(229,209,22)" fg:x="6826" fg:w="32"/><text x="19.6978%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (32 samples, 0.09%)</title><rect x="19.4478%" y="341" width="0.0912%" height="15" fill="rgb(234,138,34)" fg:x="6826" fg:w="32"/><text x="19.6978%" y="351.50"></text></g><g><title>__rdl_dealloc (12 samples, 0.03%)</title><rect x="19.5390%" y="437" width="0.0342%" height="15" fill="rgb(212,95,11)" fg:x="6858" fg:w="12"/><text x="19.7890%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12 samples, 0.03%)</title><rect x="19.5390%" y="421" width="0.0342%" height="15" fill="rgb(240,179,47)" fg:x="6858" fg:w="12"/><text x="19.7890%" y="431.50"></text></g><g><title>__rust_dealloc (30 samples, 0.09%)</title><rect x="19.5732%" y="437" width="0.0855%" height="15" fill="rgb(240,163,11)" fg:x="6870" fg:w="30"/><text x="19.8232%" y="447.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::is_empty (4 samples, 0.01%)</title><rect x="19.6587%" y="437" width="0.0114%" height="15" fill="rgb(236,37,12)" fg:x="6900" fg:w="4"/><text x="19.9087%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (16 samples, 0.05%)</title><rect x="19.8724%" y="421" width="0.0456%" height="15" fill="rgb(232,164,16)" fg:x="6975" fg:w="16"/><text x="20.1224%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.01%)</title><rect x="19.9037%" y="405" width="0.0142%" height="15" fill="rgb(244,205,15)" fg:x="6986" fg:w="5"/><text x="20.1537%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (5 samples, 0.01%)</title><rect x="19.9037%" y="389" width="0.0142%" height="15" fill="rgb(223,117,47)" fg:x="6986" fg:w="5"/><text x="20.1537%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::is_empty (11 samples, 0.03%)</title><rect x="20.1630%" y="389" width="0.0313%" height="15" fill="rgb(244,107,35)" fg:x="7077" fg:w="11"/><text x="20.4130%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (5 samples, 0.01%)</title><rect x="20.5277%" y="357" width="0.0142%" height="15" fill="rgb(205,140,8)" fg:x="7205" fg:w="5"/><text x="20.7777%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (5 samples, 0.01%)</title><rect x="20.5277%" y="341" width="0.0142%" height="15" fill="rgb(228,84,46)" fg:x="7205" fg:w="5"/><text x="20.7777%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.01%)</title><rect x="20.5277%" y="325" width="0.0142%" height="15" fill="rgb(254,188,9)" fg:x="7205" fg:w="5"/><text x="20.7777%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.01%)</title><rect x="20.5277%" y="309" width="0.0142%" height="15" fill="rgb(206,112,54)" fg:x="7205" fg:w="5"/><text x="20.7777%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (5 samples, 0.01%)</title><rect x="20.5277%" y="293" width="0.0142%" height="15" fill="rgb(216,84,49)" fg:x="7205" fg:w="5"/><text x="20.7777%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.02%)</title><rect x="20.5419%" y="341" width="0.0199%" height="15" fill="rgb(214,194,35)" fg:x="7210" fg:w="7"/><text x="20.7919%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (9 samples, 0.03%)</title><rect x="20.5419%" y="357" width="0.0256%" height="15" fill="rgb(249,28,3)" fg:x="7210" fg:w="9"/><text x="20.7919%" y="367.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (250 samples, 0.71%)</title><rect x="20.5675%" y="357" width="0.7123%" height="15" fill="rgb(222,56,52)" fg:x="7219" fg:w="250"/><text x="20.8175%" y="367.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (250 samples, 0.71%)</title><rect x="20.5675%" y="341" width="0.7123%" height="15" fill="rgb(245,217,50)" fg:x="7219" fg:w="250"/><text x="20.8175%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (71 samples, 0.20%)</title><rect x="21.2855%" y="325" width="0.2023%" height="15" fill="rgb(213,201,24)" fg:x="7471" fg:w="71"/><text x="21.5355%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (362 samples, 1.03%)</title><rect x="20.4650%" y="373" width="1.0314%" height="15" fill="rgb(248,116,28)" fg:x="7183" fg:w="362"/><text x="20.7150%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;day16::MazeState&gt;&gt; (74 samples, 0.21%)</title><rect x="21.2855%" y="357" width="0.2108%" height="15" fill="rgb(219,72,43)" fg:x="7471" fg:w="74"/><text x="21.5355%" y="367.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (74 samples, 0.21%)</title><rect x="21.2855%" y="341" width="0.2108%" height="15" fill="rgb(209,138,14)" fg:x="7471" fg:w="74"/><text x="21.5355%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (344 samples, 0.98%)</title><rect x="21.4992%" y="357" width="0.9801%" height="15" fill="rgb(222,18,33)" fg:x="7546" fg:w="344"/><text x="21.7492%" y="367.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (486 samples, 1.38%)</title><rect x="21.4992%" y="373" width="1.3847%" height="15" fill="rgb(213,199,7)" fg:x="7546" fg:w="486"/><text x="21.7492%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (142 samples, 0.40%)</title><rect x="22.4793%" y="357" width="0.4046%" height="15" fill="rgb(250,110,10)" fg:x="7890" fg:w="142"/><text x="22.7293%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (142 samples, 0.40%)</title><rect x="22.4793%" y="341" width="0.4046%" height="15" fill="rgb(248,123,6)" fg:x="7890" fg:w="142"/><text x="22.7293%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (100 samples, 0.28%)</title><rect x="22.8838%" y="373" width="0.2849%" height="15" fill="rgb(206,91,31)" fg:x="8032" fg:w="100"/><text x="23.1338%" y="383.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (100 samples, 0.28%)</title><rect x="22.8838%" y="357" width="0.2849%" height="15" fill="rgb(211,154,13)" fg:x="8032" fg:w="100"/><text x="23.1338%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (70 samples, 0.20%)</title><rect x="23.1688%" y="373" width="0.1994%" height="15" fill="rgb(225,148,7)" fg:x="8132" fg:w="70"/><text x="23.4188%" y="383.50"></text></g><g><title>core::cmp::PartialOrd::le (70 samples, 0.20%)</title><rect x="23.1688%" y="357" width="0.1994%" height="15" fill="rgb(220,160,43)" fg:x="8132" fg:w="70"/><text x="23.4188%" y="367.50"></text></g><g><title>&lt;day16::MazeState as core::cmp::PartialOrd&gt;::partial_cmp (61 samples, 0.17%)</title><rect x="23.1944%" y="341" width="0.1738%" height="15" fill="rgb(213,52,39)" fg:x="8141" fg:w="61"/><text x="23.4444%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_down_to_bottom (1,146 samples, 3.27%)</title><rect x="20.1943%" y="389" width="3.2651%" height="15" fill="rgb(243,137,7)" fg:x="7088" fg:w="1146"/><text x="20.4443%" y="399.50">all..</text></g><g><title>core::mem::drop (32 samples, 0.09%)</title><rect x="23.3682%" y="373" width="0.0912%" height="15" fill="rgb(230,79,13)" fg:x="8202" fg:w="32"/><text x="23.6182%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;day16::MazeState&gt;&gt; (32 samples, 0.09%)</title><rect x="23.3682%" y="357" width="0.0912%" height="15" fill="rgb(247,105,23)" fg:x="8202" fg:w="32"/><text x="23.6182%" y="367.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.09%)</title><rect x="23.3682%" y="341" width="0.0912%" height="15" fill="rgb(223,179,41)" fg:x="8202" fg:w="32"/><text x="23.6182%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.09%)</title><rect x="23.3682%" y="325" width="0.0912%" height="15" fill="rgb(218,9,34)" fg:x="8202" fg:w="32"/><text x="23.6182%" y="335.50"></text></g><g><title>core::ptr::read (28 samples, 0.08%)</title><rect x="23.4594%" y="325" width="0.0798%" height="15" fill="rgb(222,106,8)" fg:x="8234" fg:w="28"/><text x="23.7094%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (1,396 samples, 3.98%)</title><rect x="19.6729%" y="437" width="3.9773%" height="15" fill="rgb(211,220,0)" fg:x="6905" fg:w="1396"/><text x="19.9229%" y="447.50">allo..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,310 samples, 3.73%)</title><rect x="19.9179%" y="421" width="3.7323%" height="15" fill="rgb(229,52,16)" fg:x="6991" fg:w="1310"/><text x="20.1679%" y="431.50">core..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop::{{closure}} (1,237 samples, 3.52%)</title><rect x="20.1259%" y="405" width="3.5243%" height="15" fill="rgb(212,155,18)" fg:x="7064" fg:w="1237"/><text x="20.3759%" y="415.50">all..</text></g><g><title>core::mem::swap (67 samples, 0.19%)</title><rect x="23.4594%" y="389" width="0.1909%" height="15" fill="rgb(242,21,14)" fg:x="8234" fg:w="67"/><text x="23.7094%" y="399.50"></text></g><g><title>core::ptr::swap_nonoverlapping (67 samples, 0.19%)</title><rect x="23.4594%" y="373" width="0.1909%" height="15" fill="rgb(222,19,48)" fg:x="8234" fg:w="67"/><text x="23.7094%" y="383.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (67 samples, 0.19%)</title><rect x="23.4594%" y="357" width="0.1909%" height="15" fill="rgb(232,45,27)" fg:x="8234" fg:w="67"/><text x="23.7094%" y="367.50"></text></g><g><title>core::mem::swap_simple (67 samples, 0.19%)</title><rect x="23.4594%" y="341" width="0.1909%" height="15" fill="rgb(249,103,42)" fg:x="8234" fg:w="67"/><text x="23.7094%" y="351.50"></text></g><g><title>core::ptr::write (39 samples, 0.11%)</title><rect x="23.5391%" y="325" width="0.1111%" height="15" fill="rgb(246,81,33)" fg:x="8262" fg:w="39"/><text x="23.7891%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (12 samples, 0.03%)</title><rect x="23.9295%" y="405" width="0.0342%" height="15" fill="rgb(252,33,42)" fg:x="8399" fg:w="12"/><text x="24.1795%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (12 samples, 0.03%)</title><rect x="23.9295%" y="389" width="0.0342%" height="15" fill="rgb(209,212,41)" fg:x="8399" fg:w="12"/><text x="24.1795%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (12 samples, 0.03%)</title><rect x="23.9295%" y="373" width="0.0342%" height="15" fill="rgb(207,154,6)" fg:x="8399" fg:w="12"/><text x="24.1795%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (12 samples, 0.03%)</title><rect x="23.9295%" y="357" width="0.0342%" height="15" fill="rgb(223,64,47)" fg:x="8399" fg:w="12"/><text x="24.1795%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (12 samples, 0.03%)</title><rect x="23.9295%" y="341" width="0.0342%" height="15" fill="rgb(211,161,38)" fg:x="8399" fg:w="12"/><text x="24.1795%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (51 samples, 0.15%)</title><rect x="23.9636%" y="389" width="0.1453%" height="15" fill="rgb(219,138,40)" fg:x="8411" fg:w="51"/><text x="24.2136%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (65 samples, 0.19%)</title><rect x="23.9636%" y="405" width="0.1852%" height="15" fill="rgb(241,228,46)" fg:x="8411" fg:w="65"/><text x="24.2136%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (14 samples, 0.04%)</title><rect x="24.1089%" y="389" width="0.0399%" height="15" fill="rgb(223,209,38)" fg:x="8462" fg:w="14"/><text x="24.3589%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (14 samples, 0.04%)</title><rect x="24.1089%" y="373" width="0.0399%" height="15" fill="rgb(236,164,45)" fg:x="8462" fg:w="14"/><text x="24.3589%" y="383.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (313 samples, 0.89%)</title><rect x="24.1488%" y="389" width="0.8918%" height="15" fill="rgb(231,15,5)" fg:x="8476" fg:w="313"/><text x="24.3988%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (314 samples, 0.89%)</title><rect x="24.1488%" y="405" width="0.8946%" height="15" fill="rgb(252,35,15)" fg:x="8476" fg:w="314"/><text x="24.3988%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (23 samples, 0.07%)</title><rect x="25.0434%" y="405" width="0.0655%" height="15" fill="rgb(248,181,18)" fg:x="8790" fg:w="23"/><text x="25.2934%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::le (23 samples, 0.07%)</title><rect x="25.0434%" y="389" width="0.0655%" height="15" fill="rgb(233,39,42)" fg:x="8790" fg:w="23"/><text x="25.2934%" y="399.50"></text></g><g><title>&lt;day16::MazeState as core::cmp::PartialOrd&gt;::partial_cmp (20 samples, 0.06%)</title><rect x="25.0520%" y="373" width="0.0570%" height="15" fill="rgb(238,110,33)" fg:x="8793" fg:w="20"/><text x="25.3020%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (57 samples, 0.16%)</title><rect x="25.1090%" y="373" width="0.1624%" height="15" fill="rgb(233,195,10)" fg:x="8813" fg:w="57"/><text x="25.3590%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (506 samples, 1.44%)</title><rect x="23.8782%" y="421" width="1.4416%" height="15" fill="rgb(254,105,3)" fg:x="8381" fg:w="506"/><text x="24.1282%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;day16::MazeState&gt;&gt; (74 samples, 0.21%)</title><rect x="25.1090%" y="405" width="0.2108%" height="15" fill="rgb(221,225,9)" fg:x="8813" fg:w="74"/><text x="25.3590%" y="415.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (74 samples, 0.21%)</title><rect x="25.1090%" y="389" width="0.2108%" height="15" fill="rgb(224,227,45)" fg:x="8813" fg:w="74"/><text x="25.3590%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (17 samples, 0.05%)</title><rect x="25.2714%" y="373" width="0.0484%" height="15" fill="rgb(229,198,43)" fg:x="8870" fg:w="17"/><text x="25.5214%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (17 samples, 0.05%)</title><rect x="25.2714%" y="357" width="0.0484%" height="15" fill="rgb(206,209,35)" fg:x="8870" fg:w="17"/><text x="25.5214%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (17 samples, 0.05%)</title><rect x="25.2714%" y="341" width="0.0484%" height="15" fill="rgb(245,195,53)" fg:x="8870" fg:w="17"/><text x="25.5214%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (17 samples, 0.05%)</title><rect x="25.2714%" y="325" width="0.0484%" height="15" fill="rgb(240,92,26)" fg:x="8870" fg:w="17"/><text x="25.5214%" y="335.50"></text></g><g><title>[libc.so.6] (27 samples, 0.08%)</title><rect x="25.3540%" y="277" width="0.0769%" height="15" fill="rgb(207,40,23)" fg:x="8899" fg:w="27"/><text x="25.6040%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (29 samples, 0.08%)</title><rect x="25.3511%" y="357" width="0.0826%" height="15" fill="rgb(223,111,35)" fg:x="8898" fg:w="29"/><text x="25.6011%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (29 samples, 0.08%)</title><rect x="25.3511%" y="341" width="0.0826%" height="15" fill="rgb(229,147,28)" fg:x="8898" fg:w="29"/><text x="25.6011%" y="351.50"></text></g><g><title>alloc::alloc::realloc (29 samples, 0.08%)</title><rect x="25.3511%" y="325" width="0.0826%" height="15" fill="rgb(211,29,28)" fg:x="8898" fg:w="29"/><text x="25.6011%" y="335.50"></text></g><g><title>realloc (28 samples, 0.08%)</title><rect x="25.3540%" y="309" width="0.0798%" height="15" fill="rgb(228,72,33)" fg:x="8899" fg:w="28"/><text x="25.6040%" y="319.50"></text></g><g><title>[libc.so.6] (28 samples, 0.08%)</title><rect x="25.3540%" y="293" width="0.0798%" height="15" fill="rgb(205,214,31)" fg:x="8899" fg:w="28"/><text x="25.6040%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (30 samples, 0.09%)</title><rect x="25.3511%" y="373" width="0.0855%" height="15" fill="rgb(224,111,15)" fg:x="8898" fg:w="30"/><text x="25.6011%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (32 samples, 0.09%)</title><rect x="25.3511%" y="405" width="0.0912%" height="15" fill="rgb(253,21,26)" fg:x="8898" fg:w="32"/><text x="25.6011%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (32 samples, 0.09%)</title><rect x="25.3511%" y="389" width="0.0912%" height="15" fill="rgb(245,139,43)" fg:x="8898" fg:w="32"/><text x="25.6011%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (700 samples, 1.99%)</title><rect x="23.6502%" y="437" width="1.9944%" height="15" fill="rgb(252,170,7)" fg:x="8301" fg:w="700"/><text x="23.9002%" y="447.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (114 samples, 0.32%)</title><rect x="25.3198%" y="421" width="0.3248%" height="15" fill="rgb(231,118,14)" fg:x="8887" fg:w="114"/><text x="25.5698%" y="431.50"></text></g><g><title>core::ptr::write (68 samples, 0.19%)</title><rect x="25.4509%" y="405" width="0.1937%" height="15" fill="rgb(238,83,0)" fg:x="8933" fg:w="68"/><text x="25.7009%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (59 samples, 0.17%)</title><rect x="25.7557%" y="389" width="0.1681%" height="15" fill="rgb(221,39,39)" fg:x="9040" fg:w="59"/><text x="26.0057%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (11 samples, 0.03%)</title><rect x="25.9238%" y="389" width="0.0313%" height="15" fill="rgb(222,119,46)" fg:x="9099" fg:w="11"/><text x="26.1738%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (11 samples, 0.03%)</title><rect x="25.9552%" y="389" width="0.0313%" height="15" fill="rgb(222,165,49)" fg:x="9110" fg:w="11"/><text x="26.2052%" y="399.50"></text></g><g><title>__rdl_realloc (70 samples, 0.20%)</title><rect x="26.1574%" y="325" width="0.1994%" height="15" fill="rgb(219,113,52)" fg:x="9181" fg:w="70"/><text x="26.4074%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (49 samples, 0.14%)</title><rect x="26.2173%" y="309" width="0.1396%" height="15" fill="rgb(214,7,15)" fg:x="9202" fg:w="49"/><text x="26.4673%" y="319.50"></text></g><g><title>__rust_realloc (22 samples, 0.06%)</title><rect x="26.3569%" y="325" width="0.0627%" height="15" fill="rgb(235,32,4)" fg:x="9251" fg:w="22"/><text x="26.6069%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,601 samples, 4.56%)</title><rect x="26.0976%" y="373" width="4.5614%" height="15" fill="rgb(238,90,54)" fg:x="9160" fg:w="1601"/><text x="26.3476%" y="383.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::grow_impl (1,601 samples, 4.56%)</title><rect x="26.0976%" y="357" width="4.5614%" height="15" fill="rgb(213,208,19)" fg:x="9160" fg:w="1601"/><text x="26.3476%" y="367.50">alloc..</text></g><g><title>alloc::alloc::realloc (1,591 samples, 4.53%)</title><rect x="26.1261%" y="341" width="4.5329%" height="15" fill="rgb(233,156,4)" fg:x="9170" fg:w="1591"/><text x="26.3761%" y="351.50">alloc..</text></g><g><title>realloc (1,488 samples, 4.24%)</title><rect x="26.4196%" y="325" width="4.2394%" height="15" fill="rgb(207,194,5)" fg:x="9273" fg:w="1488"/><text x="26.6696%" y="335.50">reall..</text></g><g><title>[libc.so.6] (1,378 samples, 3.93%)</title><rect x="26.7330%" y="309" width="3.9260%" height="15" fill="rgb(206,111,30)" fg:x="9383" fg:w="1378"/><text x="26.9830%" y="319.50">[lib..</text></g><g><title>[libc.so.6] (1,152 samples, 3.28%)</title><rect x="27.3768%" y="293" width="3.2821%" height="15" fill="rgb(243,70,54)" fg:x="9609" fg:w="1152"/><text x="27.6268%" y="303.50">[li..</text></g><g><title>[libc.so.6] (52 samples, 0.15%)</title><rect x="30.5108%" y="277" width="0.1482%" height="15" fill="rgb(242,28,8)" fg:x="10709" fg:w="52"/><text x="30.7608%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,663 samples, 4.74%)</title><rect x="25.9865%" y="389" width="4.7380%" height="15" fill="rgb(219,106,18)" fg:x="9121" fg:w="1663"/><text x="26.2365%" y="399.50">alloc:..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (23 samples, 0.07%)</title><rect x="30.6590%" y="373" width="0.0655%" height="15" fill="rgb(244,222,10)" fg:x="10761" fg:w="23"/><text x="30.9090%" y="383.50"></text></g><g><title>core::cmp::max (17 samples, 0.05%)</title><rect x="30.7274%" y="389" width="0.0484%" height="15" fill="rgb(236,179,52)" fg:x="10785" fg:w="17"/><text x="30.9774%" y="399.50"></text></g><g><title>core::cmp::Ord::max (17 samples, 0.05%)</title><rect x="30.7274%" y="373" width="0.0484%" height="15" fill="rgb(213,23,39)" fg:x="10785" fg:w="17"/><text x="30.9774%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,787 samples, 5.09%)</title><rect x="25.7215%" y="421" width="5.0913%" height="15" fill="rgb(238,48,10)" fg:x="9028" fg:w="1787"/><text x="25.9715%" y="431.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,784 samples, 5.08%)</title><rect x="25.7301%" y="405" width="5.0828%" height="15" fill="rgb(251,196,23)" fg:x="9031" fg:w="1784"/><text x="25.9801%" y="415.50">alloc:..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (13 samples, 0.04%)</title><rect x="30.7758%" y="389" width="0.0370%" height="15" fill="rgb(250,152,24)" fg:x="10802" fg:w="13"/><text x="31.0258%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (13 samples, 0.04%)</title><rect x="30.7758%" y="373" width="0.0370%" height="15" fill="rgb(209,150,17)" fg:x="10802" fg:w="13"/><text x="31.0258%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (19 samples, 0.05%)</title><rect x="30.8185%" y="421" width="0.0541%" height="15" fill="rgb(234,202,34)" fg:x="10817" fg:w="19"/><text x="31.0685%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (19 samples, 0.05%)</title><rect x="30.8185%" y="405" width="0.0541%" height="15" fill="rgb(253,148,53)" fg:x="10817" fg:w="19"/><text x="31.0685%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,858 samples, 5.29%)</title><rect x="25.6446%" y="437" width="5.2936%" height="15" fill="rgb(218,129,16)" fg:x="9001" fg:w="1858"/><text x="25.8946%" y="447.50">alloc:..</text></g><g><title>core::ptr::write (23 samples, 0.07%)</title><rect x="30.8727%" y="421" width="0.0655%" height="15" fill="rgb(216,85,19)" fg:x="10836" fg:w="23"/><text x="31.1227%" y="431.50"></text></g><g><title>cfree (583 samples, 1.66%)</title><rect x="30.9382%" y="437" width="1.6610%" height="15" fill="rgb(235,228,7)" fg:x="10859" fg:w="583"/><text x="31.1882%" y="447.50"></text></g><g><title>[libc.so.6] (442 samples, 1.26%)</title><rect x="31.3399%" y="421" width="1.2593%" height="15" fill="rgb(245,175,0)" fg:x="11000" fg:w="442"/><text x="31.5899%" y="431.50"></text></g><g><title>[libc.so.6] (15 samples, 0.04%)</title><rect x="32.5565%" y="405" width="0.0427%" height="15" fill="rgb(208,168,36)" fg:x="11427" fg:w="15"/><text x="32.8065%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (79 samples, 0.23%)</title><rect x="32.5992%" y="437" width="0.2251%" height="15" fill="rgb(246,171,24)" fg:x="11442" fg:w="79"/><text x="32.8492%" y="447.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&lt;&amp;usize&gt;&gt;::sum (79 samples, 0.23%)</title><rect x="32.5992%" y="421" width="0.2251%" height="15" fill="rgb(215,142,24)" fg:x="11442" fg:w="79"/><text x="32.8492%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (78 samples, 0.22%)</title><rect x="32.6021%" y="405" width="0.2222%" height="15" fill="rgb(250,187,7)" fg:x="11443" fg:w="78"/><text x="32.8521%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (78 samples, 0.22%)</title><rect x="32.6021%" y="389" width="0.2222%" height="15" fill="rgb(228,66,33)" fg:x="11443" fg:w="78"/><text x="32.8521%" y="399.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (68 samples, 0.19%)</title><rect x="32.6306%" y="373" width="0.1937%" height="15" fill="rgb(234,215,21)" fg:x="11453" fg:w="68"/><text x="32.8806%" y="383.50"></text></g><g><title>day16::compute::{{closure}} (67 samples, 0.19%)</title><rect x="32.6334%" y="357" width="0.1909%" height="15" fill="rgb(222,191,20)" fg:x="11454" fg:w="67"/><text x="32.8834%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (67 samples, 0.19%)</title><rect x="32.6334%" y="341" width="0.1909%" height="15" fill="rgb(245,79,54)" fg:x="11454" fg:w="67"/><text x="32.8834%" y="351.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (67 samples, 0.19%)</title><rect x="32.6334%" y="325" width="0.1909%" height="15" fill="rgb(240,10,37)" fg:x="11454" fg:w="67"/><text x="32.8834%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (67 samples, 0.19%)</title><rect x="32.6334%" y="309" width="0.1909%" height="15" fill="rgb(214,192,32)" fg:x="11454" fg:w="67"/><text x="32.8834%" y="319.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (65 samples, 0.19%)</title><rect x="32.6391%" y="293" width="0.1852%" height="15" fill="rgb(209,36,54)" fg:x="11456" fg:w="65"/><text x="32.8891%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (65 samples, 0.19%)</title><rect x="32.6391%" y="277" width="0.1852%" height="15" fill="rgb(220,10,11)" fg:x="11456" fg:w="65"/><text x="32.8891%" y="287.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (65 samples, 0.19%)</title><rect x="32.6391%" y="261" width="0.1852%" height="15" fill="rgb(221,106,17)" fg:x="11456" fg:w="65"/><text x="32.8891%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (65 samples, 0.19%)</title><rect x="32.6391%" y="245" width="0.1852%" height="15" fill="rgb(251,142,44)" fg:x="11456" fg:w="65"/><text x="32.8891%" y="255.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (65 samples, 0.19%)</title><rect x="32.6391%" y="229" width="0.1852%" height="15" fill="rgb(238,13,15)" fg:x="11456" fg:w="65"/><text x="32.8891%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (65 samples, 0.19%)</title><rect x="32.6391%" y="213" width="0.1852%" height="15" fill="rgb(208,107,27)" fg:x="11456" fg:w="65"/><text x="32.8891%" y="223.50"></text></g><g><title>[libc.so.6] (62 samples, 0.18%)</title><rect x="32.6477%" y="197" width="0.1766%" height="15" fill="rgb(205,136,37)" fg:x="11459" fg:w="62"/><text x="32.8977%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (284 samples, 0.81%)</title><rect x="32.8243%" y="437" width="0.8091%" height="15" fill="rgb(250,205,27)" fg:x="11521" fg:w="284"/><text x="33.0743%" y="447.50"></text></g><g><title>__rust_dealloc (14 samples, 0.04%)</title><rect x="33.6505%" y="341" width="0.0399%" height="15" fill="rgb(210,80,43)" fg:x="11811" fg:w="14"/><text x="33.9005%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (145 samples, 0.41%)</title><rect x="33.6420%" y="373" width="0.4131%" height="15" fill="rgb(247,160,36)" fg:x="11808" fg:w="145"/><text x="33.8920%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (145 samples, 0.41%)</title><rect x="33.6420%" y="357" width="0.4131%" height="15" fill="rgb(234,13,49)" fg:x="11808" fg:w="145"/><text x="33.8920%" y="367.50"></text></g><g><title>cfree (128 samples, 0.36%)</title><rect x="33.6904%" y="341" width="0.3647%" height="15" fill="rgb(234,122,0)" fg:x="11825" fg:w="128"/><text x="33.9404%" y="351.50"></text></g><g><title>[libc.so.6] (89 samples, 0.25%)</title><rect x="33.8015%" y="325" width="0.2536%" height="15" fill="rgb(207,146,38)" fg:x="11864" fg:w="89"/><text x="34.0515%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (183 samples, 0.52%)</title><rect x="33.6363%" y="437" width="0.5214%" height="15" fill="rgb(207,177,25)" fg:x="11806" fg:w="183"/><text x="33.8863%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (183 samples, 0.52%)</title><rect x="33.6363%" y="421" width="0.5214%" height="15" fill="rgb(211,178,42)" fg:x="11806" fg:w="183"/><text x="33.8863%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (183 samples, 0.52%)</title><rect x="33.6363%" y="405" width="0.5214%" height="15" fill="rgb(230,69,54)" fg:x="11806" fg:w="183"/><text x="33.8863%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (183 samples, 0.52%)</title><rect x="33.6363%" y="389" width="0.5214%" height="15" fill="rgb(214,135,41)" fg:x="11806" fg:w="183"/><text x="33.8863%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (36 samples, 0.10%)</title><rect x="34.0551%" y="373" width="0.1026%" height="15" fill="rgb(237,67,25)" fg:x="11953" fg:w="36"/><text x="34.3051%" y="383.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.02%)</title><rect x="34.1691%" y="357" width="0.0171%" height="15" fill="rgb(222,189,50)" fg:x="11993" fg:w="6"/><text x="34.4191%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.02%)</title><rect x="34.1691%" y="341" width="0.0171%" height="15" fill="rgb(245,148,34)" fg:x="11993" fg:w="6"/><text x="34.4191%" y="351.50"></text></g><g><title>__rust_dealloc (16 samples, 0.05%)</title><rect x="34.1862%" y="357" width="0.0456%" height="15" fill="rgb(222,29,6)" fg:x="11999" fg:w="16"/><text x="34.4362%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (204 samples, 0.58%)</title><rect x="34.1662%" y="389" width="0.5812%" height="15" fill="rgb(221,189,43)" fg:x="11992" fg:w="204"/><text x="34.4162%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (204 samples, 0.58%)</title><rect x="34.1662%" y="373" width="0.5812%" height="15" fill="rgb(207,36,27)" fg:x="11992" fg:w="204"/><text x="34.4162%" y="383.50"></text></g><g><title>cfree (181 samples, 0.52%)</title><rect x="34.2317%" y="357" width="0.5157%" height="15" fill="rgb(217,90,24)" fg:x="12015" fg:w="181"/><text x="34.4817%" y="367.50"></text></g><g><title>[libc.so.6] (117 samples, 0.33%)</title><rect x="34.4141%" y="341" width="0.3333%" height="15" fill="rgb(224,66,35)" fg:x="12079" fg:w="117"/><text x="34.6641%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (211 samples, 0.60%)</title><rect x="34.1577%" y="437" width="0.6012%" height="15" fill="rgb(221,13,50)" fg:x="11989" fg:w="211"/><text x="34.4077%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (211 samples, 0.60%)</title><rect x="34.1577%" y="421" width="0.6012%" height="15" fill="rgb(236,68,49)" fg:x="11989" fg:w="211"/><text x="34.4077%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (211 samples, 0.60%)</title><rect x="34.1577%" y="405" width="0.6012%" height="15" fill="rgb(229,146,28)" fg:x="11989" fg:w="211"/><text x="34.4077%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.01%)</title><rect x="34.7474%" y="389" width="0.0114%" height="15" fill="rgb(225,31,38)" fg:x="12196" fg:w="4"/><text x="34.9974%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (12 samples, 0.03%)</title><rect x="34.7902%" y="309" width="0.0342%" height="15" fill="rgb(250,208,3)" fg:x="12211" fg:w="12"/><text x="35.0402%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (4 samples, 0.01%)</title><rect x="34.8244%" y="309" width="0.0114%" height="15" fill="rgb(246,54,23)" fg:x="12223" fg:w="4"/><text x="35.0744%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.12%)</title><rect x="34.7645%" y="341" width="0.1225%" height="15" fill="rgb(243,76,11)" fg:x="12202" fg:w="43"/><text x="35.0145%" y="351.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (39 samples, 0.11%)</title><rect x="34.7759%" y="325" width="0.1111%" height="15" fill="rgb(245,21,50)" fg:x="12206" fg:w="39"/><text x="35.0259%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (18 samples, 0.05%)</title><rect x="34.8358%" y="309" width="0.0513%" height="15" fill="rgb(228,9,43)" fg:x="12227" fg:w="18"/><text x="35.0858%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (18 samples, 0.05%)</title><rect x="34.8358%" y="293" width="0.0513%" height="15" fill="rgb(208,100,47)" fg:x="12227" fg:w="18"/><text x="35.0858%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.05%)</title><rect x="34.8358%" y="277" width="0.0513%" height="15" fill="rgb(232,26,8)" fg:x="12227" fg:w="18"/><text x="35.0858%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (408 samples, 1.16%)</title><rect x="34.9155%" y="213" width="1.1624%" height="15" fill="rgb(216,166,38)" fg:x="12255" fg:w="408"/><text x="35.1655%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (408 samples, 1.16%)</title><rect x="34.9155%" y="197" width="1.1624%" height="15" fill="rgb(251,202,51)" fg:x="12255" fg:w="408"/><text x="35.1655%" y="207.50"></text></g><g><title>cfree (408 samples, 1.16%)</title><rect x="34.9155%" y="181" width="1.1624%" height="15" fill="rgb(254,216,34)" fg:x="12255" fg:w="408"/><text x="35.1655%" y="191.50"></text></g><g><title>[libc.so.6] (195 samples, 0.56%)</title><rect x="35.5224%" y="165" width="0.5556%" height="15" fill="rgb(251,32,27)" fg:x="12468" fg:w="195"/><text x="35.7724%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (446 samples, 1.27%)</title><rect x="34.8870%" y="277" width="1.2707%" height="15" fill="rgb(208,127,28)" fg:x="12245" fg:w="446"/><text x="35.1370%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (446 samples, 1.27%)</title><rect x="34.8870%" y="261" width="1.2707%" height="15" fill="rgb(224,137,22)" fg:x="12245" fg:w="446"/><text x="35.1370%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (446 samples, 1.27%)</title><rect x="34.8870%" y="245" width="1.2707%" height="15" fill="rgb(254,70,32)" fg:x="12245" fg:w="446"/><text x="35.1370%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (446 samples, 1.27%)</title><rect x="34.8870%" y="229" width="1.2707%" height="15" fill="rgb(229,75,37)" fg:x="12245" fg:w="446"/><text x="35.1370%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (28 samples, 0.08%)</title><rect x="36.0780%" y="213" width="0.0798%" height="15" fill="rgb(252,64,23)" fg:x="12663" fg:w="28"/><text x="36.3280%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array (11 samples, 0.03%)</title><rect x="36.1264%" y="197" width="0.0313%" height="15" fill="rgb(232,162,48)" fg:x="12680" fg:w="11"/><text x="36.3764%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (11 samples, 0.03%)</title><rect x="36.1264%" y="181" width="0.0313%" height="15" fill="rgb(246,160,12)" fg:x="12680" fg:w="11"/><text x="36.3764%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,171 samples, 3.34%)</title><rect x="36.1577%" y="229" width="3.3363%" height="15" fill="rgb(247,166,0)" fg:x="12691" fg:w="1171"/><text x="36.4077%" y="239.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (1,171 samples, 3.34%)</title><rect x="36.1577%" y="213" width="3.3363%" height="15" fill="rgb(249,219,21)" fg:x="12691" fg:w="1171"/><text x="36.4077%" y="223.50">all..</text></g><g><title>cfree (1,161 samples, 3.31%)</title><rect x="36.1862%" y="197" width="3.3078%" height="15" fill="rgb(205,209,3)" fg:x="12701" fg:w="1161"/><text x="36.4362%" y="207.50">cfr..</text></g><g><title>[libc.so.6] (1,050 samples, 2.99%)</title><rect x="36.5025%" y="181" width="2.9915%" height="15" fill="rgb(243,44,1)" fg:x="12812" fg:w="1050"/><text x="36.7525%" y="191.50">[li..</text></g><g><title>[libc.so.6] (564 samples, 1.61%)</title><rect x="37.8871%" y="165" width="1.6069%" height="15" fill="rgb(206,159,16)" fg:x="13298" fg:w="564"/><text x="38.1371%" y="175.50"></text></g><g><title>[libc.so.6] (130 samples, 0.37%)</title><rect x="39.1236%" y="149" width="0.3704%" height="15" fill="rgb(244,77,30)" fg:x="13732" fg:w="130"/><text x="39.3736%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,623 samples, 4.62%)</title><rect x="34.8870%" y="325" width="4.6241%" height="15" fill="rgb(218,69,12)" fg:x="12245" fg:w="1623"/><text x="35.1370%" y="335.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;(day16::MazeState,())&gt; (1,623 samples, 4.62%)</title><rect x="34.8870%" y="309" width="4.6241%" height="15" fill="rgb(212,87,7)" fg:x="12245" fg:w="1623"/><text x="35.1370%" y="319.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;day16::MazeState&gt; (1,623 samples, 4.62%)</title><rect x="34.8870%" y="293" width="4.6241%" height="15" fill="rgb(245,114,25)" fg:x="12245" fg:w="1623"/><text x="35.1370%" y="303.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (1,177 samples, 3.35%)</title><rect x="36.1577%" y="277" width="3.3534%" height="15" fill="rgb(210,61,42)" fg:x="12691" fg:w="1177"/><text x="36.4077%" y="287.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (1,177 samples, 3.35%)</title><rect x="36.1577%" y="261" width="3.3534%" height="15" fill="rgb(211,52,33)" fg:x="12691" fg:w="1177"/><text x="36.4077%" y="271.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,177 samples, 3.35%)</title><rect x="36.1577%" y="245" width="3.3534%" height="15" fill="rgb(234,58,33)" fg:x="12691" fg:w="1177"/><text x="36.4077%" y="255.50">&lt;al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (6 samples, 0.02%)</title><rect x="39.4940%" y="229" width="0.0171%" height="15" fill="rgb(220,115,36)" fg:x="13862" fg:w="6"/><text x="39.7440%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array (4 samples, 0.01%)</title><rect x="39.4997%" y="213" width="0.0114%" height="15" fill="rgb(243,153,54)" fg:x="13864" fg:w="4"/><text x="39.7497%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (4 samples, 0.01%)</title><rect x="39.4997%" y="197" width="0.0114%" height="15" fill="rgb(251,47,18)" fg:x="13864" fg:w="4"/><text x="39.7497%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,680 samples, 4.79%)</title><rect x="34.7588%" y="373" width="4.7865%" height="15" fill="rgb(242,102,42)" fg:x="12200" fg:w="1680"/><text x="35.0088%" y="383.50">&lt;hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1,680 samples, 4.79%)</title><rect x="34.7588%" y="357" width="4.7865%" height="15" fill="rgb(234,31,38)" fg:x="12200" fg:w="1680"/><text x="35.0088%" y="367.50">hashbr..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1,635 samples, 4.66%)</title><rect x="34.8870%" y="341" width="4.6583%" height="15" fill="rgb(221,117,51)" fg:x="12245" fg:w="1635"/><text x="35.1370%" y="351.50">hashb..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (12 samples, 0.03%)</title><rect x="39.5111%" y="325" width="0.0342%" height="15" fill="rgb(212,20,18)" fg:x="13868" fg:w="12"/><text x="39.7611%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (12 samples, 0.03%)</title><rect x="39.5111%" y="309" width="0.0342%" height="15" fill="rgb(245,133,36)" fg:x="13868" fg:w="12"/><text x="39.7611%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (12 samples, 0.03%)</title><rect x="39.5111%" y="293" width="0.0342%" height="15" fill="rgb(212,6,19)" fg:x="13868" fg:w="12"/><text x="39.7611%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;day16::MazeState&gt;&gt; (1,920 samples, 5.47%)</title><rect x="34.7588%" y="437" width="5.4702%" height="15" fill="rgb(218,1,36)" fg:x="12200" fg:w="1920"/><text x="35.0088%" y="447.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;day16::MazeState,std::collections::hash::map::RandomState&gt;&gt; (1,920 samples, 5.47%)</title><rect x="34.7588%" y="421" width="5.4702%" height="15" fill="rgb(246,84,54)" fg:x="12200" fg:w="1920"/><text x="35.0088%" y="431.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;day16::MazeState,(),std::collections::hash::map::RandomState&gt;&gt; (1,920 samples, 5.47%)</title><rect x="34.7588%" y="405" width="5.4702%" height="15" fill="rgb(242,110,6)" fg:x="12200" fg:w="1920"/><text x="35.0088%" y="415.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(day16::MazeState,())&gt;&gt; (1,920 samples, 5.47%)</title><rect x="34.7588%" y="389" width="5.4702%" height="15" fill="rgb(214,47,5)" fg:x="12200" fg:w="1920"/><text x="35.0088%" y="399.50">core::p..</text></g><g><title>cfree (240 samples, 0.68%)</title><rect x="39.5453%" y="373" width="0.6838%" height="15" fill="rgb(218,159,25)" fg:x="13880" fg:w="240"/><text x="39.7953%" y="383.50"></text></g><g><title>[libc.so.6] (240 samples, 0.68%)</title><rect x="39.5453%" y="357" width="0.6838%" height="15" fill="rgb(215,211,28)" fg:x="13880" fg:w="240"/><text x="39.7953%" y="367.50"></text></g><g><title>[libc.so.6] (237 samples, 0.68%)</title><rect x="39.5538%" y="341" width="0.6752%" height="15" fill="rgb(238,59,32)" fg:x="13883" fg:w="237"/><text x="39.8038%" y="351.50"></text></g><g><title>[libc.so.6] (95 samples, 0.27%)</title><rect x="39.9584%" y="325" width="0.2707%" height="15" fill="rgb(226,82,3)" fg:x="14025" fg:w="95"/><text x="40.2084%" y="335.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (3,488 samples, 9.94%)</title><rect x="40.2747%" y="389" width="9.9376%" height="15" fill="rgb(240,164,32)" fg:x="14136" fg:w="3488"/><text x="40.5247%" y="399.50">&lt;T as core::sl..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3,488 samples, 9.94%)</title><rect x="40.2747%" y="373" width="9.9376%" height="15" fill="rgb(232,46,7)" fg:x="14136" fg:w="3488"/><text x="40.5247%" y="383.50">core::cmp::imp..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (3,488 samples, 9.94%)</title><rect x="40.2747%" y="357" width="9.9376%" height="15" fill="rgb(229,129,53)" fg:x="14136" fg:w="3488"/><text x="40.5247%" y="367.50">core::str::tra..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3,488 samples, 9.94%)</title><rect x="40.2747%" y="341" width="9.9376%" height="15" fill="rgb(234,188,29)" fg:x="14136" fg:w="3488"/><text x="40.5247%" y="351.50">core::cmp::imp..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3,488 samples, 9.94%)</title><rect x="40.2747%" y="325" width="9.9376%" height="15" fill="rgb(246,141,4)" fg:x="14136" fg:w="3488"/><text x="40.5247%" y="335.50">core::slice::c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3,488 samples, 9.94%)</title><rect x="40.2747%" y="309" width="9.9376%" height="15" fill="rgb(229,23,39)" fg:x="14136" fg:w="3488"/><text x="40.5247%" y="319.50">&lt;[A] as core::..</text></g><g><title>[libc.so.6] (3,024 samples, 8.62%)</title><rect x="41.5966%" y="293" width="8.6156%" height="15" fill="rgb(206,12,3)" fg:x="14600" fg:w="3024"/><text x="41.8466%" y="303.50">[libc.so.6]</text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (3,570 samples, 10.17%)</title><rect x="40.2291%" y="437" width="10.1712%" height="15" fill="rgb(252,226,20)" fg:x="14120" fg:w="3570"/><text x="40.4791%" y="447.50">core::slice::&lt;i..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (3,570 samples, 10.17%)</title><rect x="40.2291%" y="421" width="10.1712%" height="15" fill="rgb(216,123,35)" fg:x="14120" fg:w="3570"/><text x="40.4791%" y="431.50">&lt;T as core::sli..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (3,570 samples, 10.17%)</title><rect x="40.2291%" y="405" width="10.1712%" height="15" fill="rgb(212,68,40)" fg:x="14120" fg:w="3570"/><text x="40.4791%" y="415.50">&lt;core::slice::i..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 0.19%)</title><rect x="50.2123%" y="389" width="0.1880%" height="15" fill="rgb(254,125,32)" fg:x="17624" fg:w="66"/><text x="50.4623%" y="399.50"></text></g><g><title>day16::MazeState::build (26 samples, 0.07%)</title><rect x="50.4003%" y="437" width="0.0741%" height="15" fill="rgb(253,97,22)" fg:x="17690" fg:w="26"/><text x="50.6503%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (14 samples, 0.04%)</title><rect x="50.7080%" y="277" width="0.0399%" height="15" fill="rgb(241,101,14)" fg:x="17798" fg:w="14"/><text x="50.9580%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (40 samples, 0.11%)</title><rect x="50.6738%" y="293" width="0.1140%" height="15" fill="rgb(238,103,29)" fg:x="17786" fg:w="40"/><text x="50.9238%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (14 samples, 0.04%)</title><rect x="50.7479%" y="277" width="0.0399%" height="15" fill="rgb(233,195,47)" fg:x="17812" fg:w="14"/><text x="50.9979%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (89 samples, 0.25%)</title><rect x="50.9245%" y="277" width="0.2536%" height="15" fill="rgb(246,218,30)" fg:x="17874" fg:w="89"/><text x="51.1745%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (267 samples, 0.76%)</title><rect x="50.5371%" y="341" width="0.7607%" height="15" fill="rgb(219,145,47)" fg:x="17738" fg:w="267"/><text x="50.7871%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (267 samples, 0.76%)</title><rect x="50.5371%" y="325" width="0.7607%" height="15" fill="rgb(243,12,26)" fg:x="17738" fg:w="267"/><text x="50.7871%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (267 samples, 0.76%)</title><rect x="50.5371%" y="309" width="0.7607%" height="15" fill="rgb(214,87,16)" fg:x="17738" fg:w="267"/><text x="50.7871%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (179 samples, 0.51%)</title><rect x="50.7878%" y="293" width="0.5100%" height="15" fill="rgb(208,99,42)" fg:x="17826" fg:w="179"/><text x="51.0378%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (42 samples, 0.12%)</title><rect x="51.1781%" y="277" width="0.1197%" height="15" fill="rgb(253,99,2)" fg:x="17963" fg:w="42"/><text x="51.4281%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (29 samples, 0.08%)</title><rect x="51.2978%" y="341" width="0.0826%" height="15" fill="rgb(220,168,23)" fg:x="18005" fg:w="29"/><text x="51.5478%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (7 samples, 0.02%)</title><rect x="51.3604%" y="325" width="0.0199%" height="15" fill="rgb(242,38,24)" fg:x="18027" fg:w="7"/><text x="51.6104%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (7 samples, 0.02%)</title><rect x="51.3604%" y="309" width="0.0199%" height="15" fill="rgb(225,182,9)" fg:x="18027" fg:w="7"/><text x="51.6104%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (7 samples, 0.02%)</title><rect x="51.3604%" y="293" width="0.0199%" height="15" fill="rgb(243,178,37)" fg:x="18027" fg:w="7"/><text x="51.6104%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (146 samples, 0.42%)</title><rect x="51.7052%" y="229" width="0.4160%" height="15" fill="rgb(232,139,19)" fg:x="18148" fg:w="146"/><text x="51.9552%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (71 samples, 0.20%)</title><rect x="51.9189%" y="213" width="0.2023%" height="15" fill="rgb(225,201,24)" fg:x="18223" fg:w="71"/><text x="52.1689%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (276 samples, 0.79%)</title><rect x="51.7023%" y="309" width="0.7863%" height="15" fill="rgb(221,47,46)" fg:x="18147" fg:w="276"/><text x="51.9523%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (276 samples, 0.79%)</title><rect x="51.7023%" y="293" width="0.7863%" height="15" fill="rgb(249,23,13)" fg:x="18147" fg:w="276"/><text x="51.9523%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (276 samples, 0.79%)</title><rect x="51.7023%" y="277" width="0.7863%" height="15" fill="rgb(219,9,5)" fg:x="18147" fg:w="276"/><text x="51.9523%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (276 samples, 0.79%)</title><rect x="51.7023%" y="261" width="0.7863%" height="15" fill="rgb(254,171,16)" fg:x="18147" fg:w="276"/><text x="51.9523%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (276 samples, 0.79%)</title><rect x="51.7023%" y="245" width="0.7863%" height="15" fill="rgb(230,171,20)" fg:x="18147" fg:w="276"/><text x="51.9523%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u8 (129 samples, 0.37%)</title><rect x="52.1211%" y="229" width="0.3675%" height="15" fill="rgb(210,71,41)" fg:x="18294" fg:w="129"/><text x="52.3711%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (118 samples, 0.34%)</title><rect x="52.1525%" y="213" width="0.3362%" height="15" fill="rgb(206,173,20)" fg:x="18305" fg:w="118"/><text x="52.4025%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (49 samples, 0.14%)</title><rect x="52.3491%" y="197" width="0.1396%" height="15" fill="rgb(233,88,34)" fg:x="18374" fg:w="49"/><text x="52.5991%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 0.29%)</title><rect x="53.0784%" y="261" width="0.2935%" height="15" fill="rgb(223,209,46)" fg:x="18630" fg:w="103"/><text x="53.3284%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (67 samples, 0.19%)</title><rect x="55.8335%" y="149" width="0.1909%" height="15" fill="rgb(250,43,18)" fg:x="19597" fg:w="67"/><text x="56.0835%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (203 samples, 0.58%)</title><rect x="55.5913%" y="165" width="0.5784%" height="15" fill="rgb(208,13,10)" fg:x="19512" fg:w="203"/><text x="55.8413%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (51 samples, 0.15%)</title><rect x="56.0244%" y="149" width="0.1453%" height="15" fill="rgb(212,200,36)" fg:x="19664" fg:w="51"/><text x="56.2744%" y="159.50"></text></g><g><title>core::cmp::min (40 samples, 0.11%)</title><rect x="56.1697%" y="165" width="0.1140%" height="15" fill="rgb(225,90,30)" fg:x="19715" fg:w="40"/><text x="56.4197%" y="175.50"></text></g><g><title>core::cmp::Ord::min (40 samples, 0.11%)</title><rect x="56.1697%" y="149" width="0.1140%" height="15" fill="rgb(236,182,39)" fg:x="19715" fg:w="40"/><text x="56.4197%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,549 samples, 4.41%)</title><rect x="53.4830%" y="181" width="4.4132%" height="15" fill="rgb(212,144,35)" fg:x="18772" fg:w="1549"/><text x="53.7330%" y="191.50">&lt;core..</text></g><g><title>core::hash::sip::u8to64_le (566 samples, 1.61%)</title><rect x="56.2837%" y="165" width="1.6126%" height="15" fill="rgb(228,63,44)" fg:x="19755" fg:w="566"/><text x="56.5337%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (16 samples, 0.05%)</title><rect x="60.4918%" y="133" width="0.0456%" height="15" fill="rgb(228,109,6)" fg:x="21232" fg:w="16"/><text x="60.7418%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (54 samples, 0.15%)</title><rect x="60.4120%" y="149" width="0.1539%" height="15" fill="rgb(238,117,24)" fg:x="21204" fg:w="54"/><text x="60.6620%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (10 samples, 0.03%)</title><rect x="60.5373%" y="133" width="0.0285%" height="15" fill="rgb(242,26,26)" fg:x="21248" fg:w="10"/><text x="60.7873%" y="143.50"></text></g><g><title>core::cmp::min (41 samples, 0.12%)</title><rect x="60.5658%" y="149" width="0.1168%" height="15" fill="rgb(221,92,48)" fg:x="21258" fg:w="41"/><text x="60.8158%" y="159.50"></text></g><g><title>core::cmp::Ord::min (41 samples, 0.12%)</title><rect x="60.5658%" y="133" width="0.1168%" height="15" fill="rgb(209,209,32)" fg:x="21258" fg:w="41"/><text x="60.8158%" y="143.50"></text></g><g><title>core::hash::Hash::hash_slice (3,485 samples, 9.93%)</title><rect x="52.4887%" y="277" width="9.9291%" height="15" fill="rgb(221,70,22)" fg:x="18423" fg:w="3485"/><text x="52.7387%" y="287.50">core::hash::Ha..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,175 samples, 9.05%)</title><rect x="53.3719%" y="261" width="9.0458%" height="15" fill="rgb(248,145,5)" fg:x="18733" fg:w="3175"/><text x="53.6219%" y="271.50">core::hash::i..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,175 samples, 9.05%)</title><rect x="53.3719%" y="245" width="9.0458%" height="15" fill="rgb(226,116,26)" fg:x="18733" fg:w="3175"/><text x="53.6219%" y="255.50">core::hash::i..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (3,175 samples, 9.05%)</title><rect x="53.3719%" y="229" width="9.0458%" height="15" fill="rgb(244,5,17)" fg:x="18733" fg:w="3175"/><text x="53.6219%" y="239.50">&lt;std::collect..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,175 samples, 9.05%)</title><rect x="53.3719%" y="213" width="9.0458%" height="15" fill="rgb(252,159,33)" fg:x="18733" fg:w="3175"/><text x="53.6219%" y="223.50">&lt;core::hash::..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,175 samples, 9.05%)</title><rect x="53.3719%" y="197" width="9.0458%" height="15" fill="rgb(206,71,0)" fg:x="18733" fg:w="3175"/><text x="53.6219%" y="207.50">&lt;core::hash::..</text></g><g><title>core::hash::Hasher::write_u8 (1,587 samples, 4.52%)</title><rect x="57.8962%" y="181" width="4.5215%" height="15" fill="rgb(233,118,54)" fg:x="20321" fg:w="1587"/><text x="58.1462%" y="191.50">core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,477 samples, 4.21%)</title><rect x="58.2096%" y="165" width="4.2081%" height="15" fill="rgb(234,83,48)" fg:x="20431" fg:w="1477"/><text x="58.4596%" y="175.50">&lt;core..</text></g><g><title>core::hash::sip::u8to64_le (609 samples, 1.74%)</title><rect x="60.6826%" y="149" width="1.7351%" height="15" fill="rgb(228,3,54)" fg:x="21299" fg:w="609"/><text x="60.9326%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.03%)</title><rect x="62.6884%" y="181" width="0.0256%" height="15" fill="rgb(226,155,13)" fg:x="22003" fg:w="9"/><text x="62.9384%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (38 samples, 0.11%)</title><rect x="62.6628%" y="197" width="0.1083%" height="15" fill="rgb(241,28,37)" fg:x="21994" fg:w="38"/><text x="62.9128%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (20 samples, 0.06%)</title><rect x="62.7140%" y="181" width="0.0570%" height="15" fill="rgb(233,93,10)" fg:x="22012" fg:w="20"/><text x="62.9640%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (242 samples, 0.69%)</title><rect x="62.4177%" y="245" width="0.6895%" height="15" fill="rgb(225,113,19)" fg:x="21908" fg:w="242"/><text x="62.6677%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (242 samples, 0.69%)</title><rect x="62.4177%" y="229" width="0.6895%" height="15" fill="rgb(241,2,18)" fg:x="21908" fg:w="242"/><text x="62.6677%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (242 samples, 0.69%)</title><rect x="62.4177%" y="213" width="0.6895%" height="15" fill="rgb(228,207,21)" fg:x="21908" fg:w="242"/><text x="62.6677%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (118 samples, 0.34%)</title><rect x="62.7710%" y="197" width="0.3362%" height="15" fill="rgb(213,211,35)" fg:x="22032" fg:w="118"/><text x="63.0210%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.06%)</title><rect x="63.0502%" y="181" width="0.0570%" height="15" fill="rgb(209,83,10)" fg:x="22130" fg:w="20"/><text x="63.3002%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (3,740 samples, 10.66%)</title><rect x="52.4887%" y="309" width="10.6556%" height="15" fill="rgb(209,164,1)" fg:x="18423" fg:w="3740"/><text x="52.7387%" y="319.50">&lt;alloc::vec::Vec..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3,740 samples, 10.66%)</title><rect x="52.4887%" y="293" width="10.6556%" height="15" fill="rgb(213,184,43)" fg:x="18423" fg:w="3740"/><text x="52.7387%" y="303.50">core::hash::impl..</text></g><g><title>core::hash::Hasher::write_length_prefix (255 samples, 0.73%)</title><rect x="62.4177%" y="277" width="0.7265%" height="15" fill="rgb(231,61,34)" fg:x="21908" fg:w="255"/><text x="62.6677%" y="287.50"></text></g><g><title>core::hash::Hasher::write_usize (255 samples, 0.73%)</title><rect x="62.4177%" y="261" width="0.7265%" height="15" fill="rgb(235,75,3)" fg:x="21908" fg:w="255"/><text x="62.6677%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (13 samples, 0.04%)</title><rect x="63.1072%" y="245" width="0.0370%" height="15" fill="rgb(220,106,47)" fg:x="22150" fg:w="13"/><text x="63.3572%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (30 samples, 0.09%)</title><rect x="63.8280%" y="213" width="0.0855%" height="15" fill="rgb(210,196,33)" fg:x="22403" fg:w="30"/><text x="64.0780%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (101 samples, 0.29%)</title><rect x="63.6998%" y="229" width="0.2878%" height="15" fill="rgb(229,154,42)" fg:x="22358" fg:w="101"/><text x="63.9498%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (26 samples, 0.07%)</title><rect x="63.9135%" y="213" width="0.0741%" height="15" fill="rgb(228,114,26)" fg:x="22433" fg:w="26"/><text x="64.1635%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (40 samples, 0.11%)</title><rect x="63.9876%" y="229" width="0.1140%" height="15" fill="rgb(208,144,1)" fg:x="22459" fg:w="40"/><text x="64.2376%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (326 samples, 0.93%)</title><rect x="63.1784%" y="277" width="0.9288%" height="15" fill="rgb(239,112,37)" fg:x="22175" fg:w="326"/><text x="63.4284%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (326 samples, 0.93%)</title><rect x="63.1784%" y="261" width="0.9288%" height="15" fill="rgb(210,96,50)" fg:x="22175" fg:w="326"/><text x="63.4284%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (312 samples, 0.89%)</title><rect x="63.2183%" y="245" width="0.8889%" height="15" fill="rgb(222,178,2)" fg:x="22189" fg:w="312"/><text x="63.4683%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (4,796 samples, 13.66%)</title><rect x="50.4801%" y="373" width="13.6642%" height="15" fill="rgb(226,74,18)" fg:x="17718" fg:w="4796"/><text x="50.7301%" y="383.50">hashbrown::map::make_..</text></g><g><title>core::hash::BuildHasher::hash_one (4,788 samples, 13.64%)</title><rect x="50.5029%" y="357" width="13.6414%" height="15" fill="rgb(225,67,54)" fg:x="17726" fg:w="4788"/><text x="50.7529%" y="367.50">core::hash::BuildHash..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4,480 samples, 12.76%)</title><rect x="51.3804%" y="341" width="12.7639%" height="15" fill="rgb(251,92,32)" fg:x="18034" fg:w="4480"/><text x="51.6304%" y="351.50">core::hash::impls::..</text></g><g><title>&lt;day16::MazeState as core::hash::Hash&gt;::hash (4,480 samples, 12.76%)</title><rect x="51.3804%" y="325" width="12.7639%" height="15" fill="rgb(228,149,22)" fg:x="18034" fg:w="4480"/><text x="51.6304%" y="335.50">&lt;day16::MazeState a..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (351 samples, 1.00%)</title><rect x="63.1442%" y="309" width="1.0000%" height="15" fill="rgb(243,54,13)" fg:x="22163" fg:w="351"/><text x="63.3942%" y="319.50"></text></g><g><title>core::hash::Hasher::write_usize (339 samples, 0.97%)</title><rect x="63.1784%" y="293" width="0.9658%" height="15" fill="rgb(243,180,28)" fg:x="22175" fg:w="339"/><text x="63.4284%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (13 samples, 0.04%)</title><rect x="64.1072%" y="277" width="0.0370%" height="15" fill="rgb(208,167,24)" fg:x="22501" fg:w="13"/><text x="64.3572%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.13%)</title><rect x="64.4548%" y="325" width="0.1339%" height="15" fill="rgb(245,73,45)" fg:x="22623" fg:w="47"/><text x="64.7048%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (46 samples, 0.13%)</title><rect x="64.4577%" y="309" width="0.1311%" height="15" fill="rgb(237,203,48)" fg:x="22624" fg:w="46"/><text x="64.7077%" y="319.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (25 samples, 0.07%)</title><rect x="64.5887%" y="325" width="0.0712%" height="15" fill="rgb(211,197,16)" fg:x="22670" fg:w="25"/><text x="64.8387%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (22 samples, 0.06%)</title><rect x="64.6600%" y="309" width="0.0627%" height="15" fill="rgb(243,99,51)" fg:x="22695" fg:w="22"/><text x="64.9100%" y="319.50"></text></g><g><title>&lt;day16::MazeState as core::cmp::PartialEq&gt;::eq (22 samples, 0.06%)</title><rect x="64.6600%" y="293" width="0.0627%" height="15" fill="rgb(215,123,29)" fg:x="22695" fg:w="22"/><text x="64.9100%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (24 samples, 0.07%)</title><rect x="64.6600%" y="325" width="0.0684%" height="15" fill="rgb(239,186,37)" fg:x="22695" fg:w="24"/><text x="64.9100%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (20 samples, 0.06%)</title><rect x="64.7283%" y="325" width="0.0570%" height="15" fill="rgb(252,136,39)" fg:x="22719" fg:w="20"/><text x="64.9783%" y="335.50"></text></g><g><title>hashbrown::raw::h2 (93 samples, 0.26%)</title><rect x="64.7853%" y="325" width="0.2650%" height="15" fill="rgb(223,213,32)" fg:x="22739" fg:w="93"/><text x="65.0353%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (70 samples, 0.20%)</title><rect x="65.0503%" y="325" width="0.1994%" height="15" fill="rgb(233,115,5)" fg:x="22832" fg:w="70"/><text x="65.3003%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (70 samples, 0.20%)</title><rect x="65.0503%" y="309" width="0.1994%" height="15" fill="rgb(207,226,44)" fg:x="22832" fg:w="70"/><text x="65.3003%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (70 samples, 0.20%)</title><rect x="65.0503%" y="293" width="0.1994%" height="15" fill="rgb(208,126,0)" fg:x="22832" fg:w="70"/><text x="65.3003%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (18 samples, 0.05%)</title><rect x="65.2497%" y="325" width="0.0513%" height="15" fill="rgb(244,66,21)" fg:x="22902" fg:w="18"/><text x="65.4997%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.05%)</title><rect x="65.2497%" y="309" width="0.0513%" height="15" fill="rgb(222,97,12)" fg:x="22902" fg:w="18"/><text x="65.4997%" y="319.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (5,245 samples, 14.94%)</title><rect x="50.4744%" y="437" width="14.9434%" height="15" fill="rgb(219,213,19)" fg:x="17716" fg:w="5245"/><text x="50.7244%" y="447.50">std::collections::hash:..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (5,245 samples, 14.94%)</title><rect x="50.4744%" y="421" width="14.9434%" height="15" fill="rgb(252,169,30)" fg:x="17716" fg:w="5245"/><text x="50.7244%" y="431.50">hashbrown::set::HashSet..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (5,245 samples, 14.94%)</title><rect x="50.4744%" y="405" width="14.9434%" height="15" fill="rgb(206,32,51)" fg:x="17716" fg:w="5245"/><text x="50.7244%" y="415.50">hashbrown::map::HashMap..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5,245 samples, 14.94%)</title><rect x="50.4744%" y="389" width="14.9434%" height="15" fill="rgb(250,172,42)" fg:x="17716" fg:w="5245"/><text x="50.7244%" y="399.50">hashbrown::map::HashMap..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (447 samples, 1.27%)</title><rect x="64.1443%" y="373" width="1.2735%" height="15" fill="rgb(209,34,43)" fg:x="22514" fg:w="447"/><text x="64.3943%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (439 samples, 1.25%)</title><rect x="64.1671%" y="357" width="1.2507%" height="15" fill="rgb(223,11,35)" fg:x="22522" fg:w="439"/><text x="64.4171%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (387 samples, 1.10%)</title><rect x="64.3152%" y="341" width="1.1026%" height="15" fill="rgb(251,219,26)" fg:x="22574" fg:w="387"/><text x="64.5652%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (41 samples, 0.12%)</title><rect x="65.3010%" y="325" width="0.1168%" height="15" fill="rgb(231,119,3)" fg:x="22920" fg:w="41"/><text x="65.5510%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (41 samples, 0.12%)</title><rect x="65.3010%" y="309" width="0.1168%" height="15" fill="rgb(216,97,11)" fg:x="22920" fg:w="41"/><text x="65.5510%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (41 samples, 0.12%)</title><rect x="65.3010%" y="293" width="0.1168%" height="15" fill="rgb(223,59,9)" fg:x="22920" fg:w="41"/><text x="65.5510%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (27 samples, 0.08%)</title><rect x="66.0931%" y="293" width="0.0769%" height="15" fill="rgb(233,93,31)" fg:x="23198" fg:w="27"/><text x="66.3431%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (49 samples, 0.14%)</title><rect x="66.0446%" y="309" width="0.1396%" height="15" fill="rgb(239,81,33)" fg:x="23181" fg:w="49"/><text x="66.2946%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.01%)</title><rect x="66.1700%" y="293" width="0.0142%" height="15" fill="rgb(213,120,34)" fg:x="23225" fg:w="5"/><text x="66.4200%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (86 samples, 0.25%)</title><rect x="66.2896%" y="293" width="0.2450%" height="15" fill="rgb(243,49,53)" fg:x="23267" fg:w="86"/><text x="66.5396%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (281 samples, 0.80%)</title><rect x="65.8566%" y="357" width="0.8006%" height="15" fill="rgb(247,216,33)" fg:x="23115" fg:w="281"/><text x="66.1066%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (281 samples, 0.80%)</title><rect x="65.8566%" y="341" width="0.8006%" height="15" fill="rgb(226,26,14)" fg:x="23115" fg:w="281"/><text x="66.1066%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (281 samples, 0.80%)</title><rect x="65.8566%" y="325" width="0.8006%" height="15" fill="rgb(215,49,53)" fg:x="23115" fg:w="281"/><text x="66.1066%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (166 samples, 0.47%)</title><rect x="66.1842%" y="309" width="0.4729%" height="15" fill="rgb(245,162,40)" fg:x="23230" fg:w="166"/><text x="66.4342%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (43 samples, 0.12%)</title><rect x="66.5347%" y="293" width="0.1225%" height="15" fill="rgb(229,68,17)" fg:x="23353" fg:w="43"/><text x="66.7847%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (63 samples, 0.18%)</title><rect x="66.6572%" y="357" width="0.1795%" height="15" fill="rgb(213,182,10)" fg:x="23396" fg:w="63"/><text x="66.9072%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (28 samples, 0.08%)</title><rect x="66.7569%" y="341" width="0.0798%" height="15" fill="rgb(245,125,30)" fg:x="23431" fg:w="28"/><text x="67.0069%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (28 samples, 0.08%)</title><rect x="66.7569%" y="325" width="0.0798%" height="15" fill="rgb(232,202,2)" fg:x="23431" fg:w="28"/><text x="67.0069%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (28 samples, 0.08%)</title><rect x="66.7569%" y="309" width="0.0798%" height="15" fill="rgb(237,140,51)" fg:x="23431" fg:w="28"/><text x="67.0069%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (87 samples, 0.25%)</title><rect x="67.1985%" y="245" width="0.2479%" height="15" fill="rgb(236,157,25)" fg:x="23586" fg:w="87"/><text x="67.4485%" y="255.50"></text></g><g><title>core::hash::sip::u8to64_le (41 samples, 0.12%)</title><rect x="67.3296%" y="229" width="0.1168%" height="15" fill="rgb(219,209,0)" fg:x="23632" fg:w="41"/><text x="67.5796%" y="239.50"></text></g><g><title>core::cmp::min (8 samples, 0.02%)</title><rect x="67.6600%" y="213" width="0.0228%" height="15" fill="rgb(240,116,54)" fg:x="23748" fg:w="8"/><text x="67.9100%" y="223.50"></text></g><g><title>core::cmp::Ord::min (8 samples, 0.02%)</title><rect x="67.6600%" y="197" width="0.0228%" height="15" fill="rgb(216,10,36)" fg:x="23748" fg:w="8"/><text x="67.9100%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (222 samples, 0.63%)</title><rect x="67.1899%" y="325" width="0.6325%" height="15" fill="rgb(222,72,44)" fg:x="23583" fg:w="222"/><text x="67.4399%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (222 samples, 0.63%)</title><rect x="67.1899%" y="309" width="0.6325%" height="15" fill="rgb(232,159,9)" fg:x="23583" fg:w="222"/><text x="67.4399%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (222 samples, 0.63%)</title><rect x="67.1899%" y="293" width="0.6325%" height="15" fill="rgb(210,39,32)" fg:x="23583" fg:w="222"/><text x="67.4399%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (222 samples, 0.63%)</title><rect x="67.1899%" y="277" width="0.6325%" height="15" fill="rgb(216,194,45)" fg:x="23583" fg:w="222"/><text x="67.4399%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (222 samples, 0.63%)</title><rect x="67.1899%" y="261" width="0.6325%" height="15" fill="rgb(218,18,35)" fg:x="23583" fg:w="222"/><text x="67.4399%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (132 samples, 0.38%)</title><rect x="67.4464%" y="245" width="0.3761%" height="15" fill="rgb(207,83,51)" fg:x="23673" fg:w="132"/><text x="67.6964%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (114 samples, 0.32%)</title><rect x="67.4976%" y="229" width="0.3248%" height="15" fill="rgb(225,63,43)" fg:x="23691" fg:w="114"/><text x="67.7476%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (49 samples, 0.14%)</title><rect x="67.6828%" y="213" width="0.1396%" height="15" fill="rgb(207,57,36)" fg:x="23756" fg:w="49"/><text x="67.9328%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.24%)</title><rect x="68.2783%" y="277" width="0.2365%" height="15" fill="rgb(216,99,33)" fg:x="23965" fg:w="83"/><text x="68.5283%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (68 samples, 0.19%)</title><rect x="70.9764%" y="165" width="0.1937%" height="15" fill="rgb(225,42,16)" fg:x="24912" fg:w="68"/><text x="71.2264%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (193 samples, 0.55%)</title><rect x="70.7314%" y="181" width="0.5499%" height="15" fill="rgb(220,201,45)" fg:x="24826" fg:w="193"/><text x="70.9814%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (39 samples, 0.11%)</title><rect x="71.1701%" y="165" width="0.1111%" height="15" fill="rgb(225,33,4)" fg:x="24980" fg:w="39"/><text x="71.4201%" y="175.50"></text></g><g><title>core::cmp::min (74 samples, 0.21%)</title><rect x="71.2841%" y="181" width="0.2108%" height="15" fill="rgb(224,33,50)" fg:x="25020" fg:w="74"/><text x="71.5341%" y="191.50"></text></g><g><title>core::cmp::Ord::min (74 samples, 0.21%)</title><rect x="71.2841%" y="165" width="0.2108%" height="15" fill="rgb(246,198,51)" fg:x="25020" fg:w="74"/><text x="71.5341%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,484 samples, 4.23%)</title><rect x="68.6287%" y="197" width="4.2280%" height="15" fill="rgb(205,22,4)" fg:x="24088" fg:w="1484"/><text x="68.8787%" y="207.50">&lt;core..</text></g><g><title>core::hash::sip::u8to64_le (478 samples, 1.36%)</title><rect x="71.4949%" y="181" width="1.3619%" height="15" fill="rgb(206,3,8)" fg:x="25094" fg:w="478"/><text x="71.7449%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (22 samples, 0.06%)</title><rect x="75.3497%" y="149" width="0.0627%" height="15" fill="rgb(251,23,15)" fg:x="26447" fg:w="22"/><text x="75.5997%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (67 samples, 0.19%)</title><rect x="75.2614%" y="165" width="0.1909%" height="15" fill="rgb(252,88,28)" fg:x="26416" fg:w="67"/><text x="75.5114%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (14 samples, 0.04%)</title><rect x="75.4124%" y="149" width="0.0399%" height="15" fill="rgb(212,127,14)" fg:x="26469" fg:w="14"/><text x="75.6624%" y="159.50"></text></g><g><title>core::cmp::min (68 samples, 0.19%)</title><rect x="75.4523%" y="165" width="0.1937%" height="15" fill="rgb(247,145,37)" fg:x="26483" fg:w="68"/><text x="75.7023%" y="175.50"></text></g><g><title>core::cmp::Ord::min (68 samples, 0.19%)</title><rect x="75.4523%" y="149" width="0.1937%" height="15" fill="rgb(209,117,53)" fg:x="26483" fg:w="68"/><text x="75.7023%" y="159.50"></text></g><g><title>core::hash::Hash::hash_slice (3,233 samples, 9.21%)</title><rect x="67.8224%" y="293" width="9.2111%" height="15" fill="rgb(212,90,42)" fg:x="23805" fg:w="3233"/><text x="68.0724%" y="303.50">core::hash::H..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,990 samples, 8.52%)</title><rect x="68.5148%" y="277" width="8.5188%" height="15" fill="rgb(218,164,37)" fg:x="24048" fg:w="2990"/><text x="68.7648%" y="287.50">core::hash::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,990 samples, 8.52%)</title><rect x="68.5148%" y="261" width="8.5188%" height="15" fill="rgb(246,65,34)" fg:x="24048" fg:w="2990"/><text x="68.7648%" y="271.50">core::hash::..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (2,990 samples, 8.52%)</title><rect x="68.5148%" y="245" width="8.5188%" height="15" fill="rgb(231,100,33)" fg:x="24048" fg:w="2990"/><text x="68.7648%" y="255.50">&lt;std::collec..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,990 samples, 8.52%)</title><rect x="68.5148%" y="229" width="8.5188%" height="15" fill="rgb(228,126,14)" fg:x="24048" fg:w="2990"/><text x="68.7648%" y="239.50">&lt;core::hash:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,990 samples, 8.52%)</title><rect x="68.5148%" y="213" width="8.5188%" height="15" fill="rgb(215,173,21)" fg:x="24048" fg:w="2990"/><text x="68.7648%" y="223.50">&lt;core::hash:..</text></g><g><title>core::hash::Hasher::write_u8 (1,466 samples, 4.18%)</title><rect x="72.8568%" y="197" width="4.1768%" height="15" fill="rgb(210,6,40)" fg:x="25572" fg:w="1466"/><text x="73.1068%" y="207.50">core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,366 samples, 3.89%)</title><rect x="73.1417%" y="181" width="3.8918%" height="15" fill="rgb(212,48,18)" fg:x="25672" fg:w="1366"/><text x="73.3917%" y="191.50">&lt;cor..</text></g><g><title>core::hash::sip::u8to64_le (487 samples, 1.39%)</title><rect x="75.6460%" y="165" width="1.3875%" height="15" fill="rgb(230,214,11)" fg:x="26551" fg:w="487"/><text x="75.8960%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (14 samples, 0.04%)</title><rect x="77.3469%" y="197" width="0.0399%" height="15" fill="rgb(254,105,39)" fg:x="27148" fg:w="14"/><text x="77.5969%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (69 samples, 0.20%)</title><rect x="77.2786%" y="213" width="0.1966%" height="15" fill="rgb(245,158,5)" fg:x="27124" fg:w="69"/><text x="77.5286%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (31 samples, 0.09%)</title><rect x="77.3868%" y="197" width="0.0883%" height="15" fill="rgb(249,208,11)" fg:x="27162" fg:w="31"/><text x="77.6368%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (294 samples, 0.84%)</title><rect x="77.0335%" y="261" width="0.8376%" height="15" fill="rgb(210,39,28)" fg:x="27038" fg:w="294"/><text x="77.2835%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (294 samples, 0.84%)</title><rect x="77.0335%" y="245" width="0.8376%" height="15" fill="rgb(211,56,53)" fg:x="27038" fg:w="294"/><text x="77.2835%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (294 samples, 0.84%)</title><rect x="77.0335%" y="229" width="0.8376%" height="15" fill="rgb(226,201,30)" fg:x="27038" fg:w="294"/><text x="77.2835%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (138 samples, 0.39%)</title><rect x="77.4780%" y="213" width="0.3932%" height="15" fill="rgb(239,101,34)" fg:x="27194" fg:w="138"/><text x="77.7280%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.07%)</title><rect x="77.7999%" y="197" width="0.0712%" height="15" fill="rgb(226,209,5)" fg:x="27307" fg:w="25"/><text x="78.0499%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (3,552 samples, 10.12%)</title><rect x="67.8224%" y="325" width="10.1199%" height="15" fill="rgb(250,105,47)" fg:x="23805" fg:w="3552"/><text x="68.0724%" y="335.50">&lt;alloc::vec::Ve..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3,552 samples, 10.12%)</title><rect x="67.8224%" y="309" width="10.1199%" height="15" fill="rgb(230,72,3)" fg:x="23805" fg:w="3552"/><text x="68.0724%" y="319.50">core::hash::imp..</text></g><g><title>core::hash::Hasher::write_length_prefix (319 samples, 0.91%)</title><rect x="77.0335%" y="293" width="0.9089%" height="15" fill="rgb(232,218,39)" fg:x="27038" fg:w="319"/><text x="77.2835%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (319 samples, 0.91%)</title><rect x="77.0335%" y="277" width="0.9089%" height="15" fill="rgb(248,166,6)" fg:x="27038" fg:w="319"/><text x="77.2835%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (25 samples, 0.07%)</title><rect x="77.8712%" y="261" width="0.0712%" height="15" fill="rgb(247,89,20)" fg:x="27332" fg:w="25"/><text x="78.1212%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (67 samples, 0.19%)</title><rect x="78.9196%" y="229" width="0.1909%" height="15" fill="rgb(248,130,54)" fg:x="27700" fg:w="67"/><text x="79.1696%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (138 samples, 0.39%)</title><rect x="78.7943%" y="245" width="0.3932%" height="15" fill="rgb(234,196,4)" fg:x="27656" fg:w="138"/><text x="79.0443%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (27 samples, 0.08%)</title><rect x="79.1105%" y="229" width="0.0769%" height="15" fill="rgb(250,143,31)" fg:x="27767" fg:w="27"/><text x="79.3605%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (46 samples, 0.13%)</title><rect x="79.1874%" y="245" width="0.1311%" height="15" fill="rgb(211,110,34)" fg:x="27794" fg:w="46"/><text x="79.4374%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (478 samples, 1.36%)</title><rect x="77.9595%" y="293" width="1.3619%" height="15" fill="rgb(215,124,48)" fg:x="27363" fg:w="478"/><text x="78.2095%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (478 samples, 1.36%)</title><rect x="77.9595%" y="277" width="1.3619%" height="15" fill="rgb(216,46,13)" fg:x="27363" fg:w="478"/><text x="78.2095%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (473 samples, 1.35%)</title><rect x="77.9737%" y="261" width="1.3476%" height="15" fill="rgb(205,184,25)" fg:x="27368" fg:w="473"/><text x="78.2237%" y="271.50"></text></g><g><title>hashbrown::map::make_insert_hash (4,800 samples, 13.68%)</title><rect x="65.7597%" y="389" width="13.6756%" height="15" fill="rgb(228,1,10)" fg:x="23081" fg:w="4800"/><text x="66.0097%" y="399.50">hashbrown::map::make_..</text></g><g><title>core::hash::BuildHasher::hash_one (4,799 samples, 13.67%)</title><rect x="65.7626%" y="373" width="13.6728%" height="15" fill="rgb(213,116,27)" fg:x="23082" fg:w="4799"/><text x="66.0126%" y="383.50">core::hash::BuildHash..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4,422 samples, 12.60%)</title><rect x="66.8367%" y="357" width="12.5986%" height="15" fill="rgb(241,95,50)" fg:x="23459" fg:w="4422"/><text x="67.0867%" y="367.50">core::hash::impls::..</text></g><g><title>&lt;day16::MazeState as core::hash::Hash&gt;::hash (4,422 samples, 12.60%)</title><rect x="66.8367%" y="341" width="12.5986%" height="15" fill="rgb(238,48,32)" fg:x="23459" fg:w="4422"/><text x="67.0867%" y="351.50">&lt;day16::MazeState a..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (524 samples, 1.49%)</title><rect x="77.9424%" y="325" width="1.4929%" height="15" fill="rgb(235,113,49)" fg:x="27357" fg:w="524"/><text x="78.1924%" y="335.50"></text></g><g><title>core::hash::Hasher::write_usize (518 samples, 1.48%)</title><rect x="77.9595%" y="309" width="1.4758%" height="15" fill="rgb(205,127,43)" fg:x="27363" fg:w="518"/><text x="78.2095%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (40 samples, 0.11%)</title><rect x="79.3213%" y="293" width="0.1140%" height="15" fill="rgb(250,162,2)" fg:x="27841" fg:w="40"/><text x="79.5713%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.14%)</title><rect x="79.7117%" y="341" width="0.1425%" height="15" fill="rgb(220,13,41)" fg:x="27978" fg:w="50"/><text x="79.9617%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (50 samples, 0.14%)</title><rect x="79.7117%" y="325" width="0.1425%" height="15" fill="rgb(249,221,25)" fg:x="27978" fg:w="50"/><text x="79.9617%" y="335.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (24 samples, 0.07%)</title><rect x="79.8541%" y="341" width="0.0684%" height="15" fill="rgb(215,208,19)" fg:x="28028" fg:w="24"/><text x="80.1041%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (13 samples, 0.04%)</title><rect x="79.9225%" y="325" width="0.0370%" height="15" fill="rgb(236,175,2)" fg:x="28052" fg:w="13"/><text x="80.1725%" y="335.50"></text></g><g><title>&lt;day16::MazeState as core::cmp::PartialEq&gt;::eq (13 samples, 0.04%)</title><rect x="79.9225%" y="309" width="0.0370%" height="15" fill="rgb(241,52,2)" fg:x="28052" fg:w="13"/><text x="80.1725%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (15 samples, 0.04%)</title><rect x="79.9225%" y="341" width="0.0427%" height="15" fill="rgb(248,140,14)" fg:x="28052" fg:w="15"/><text x="80.1725%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (11 samples, 0.03%)</title><rect x="79.9652%" y="341" width="0.0313%" height="15" fill="rgb(253,22,42)" fg:x="28067" fg:w="11"/><text x="80.2152%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (109 samples, 0.31%)</title><rect x="79.9966%" y="341" width="0.3106%" height="15" fill="rgb(234,61,47)" fg:x="28078" fg:w="109"/><text x="80.2466%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (36 samples, 0.10%)</title><rect x="80.3071%" y="341" width="0.1026%" height="15" fill="rgb(208,226,15)" fg:x="28187" fg:w="36"/><text x="80.5571%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (36 samples, 0.10%)</title><rect x="80.3071%" y="325" width="0.1026%" height="15" fill="rgb(217,221,4)" fg:x="28187" fg:w="36"/><text x="80.5571%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (36 samples, 0.10%)</title><rect x="80.3071%" y="309" width="0.1026%" height="15" fill="rgb(212,174,34)" fg:x="28187" fg:w="36"/><text x="80.5571%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (27 samples, 0.08%)</title><rect x="80.4097%" y="341" width="0.0769%" height="15" fill="rgb(253,83,4)" fg:x="28223" fg:w="27"/><text x="80.6597%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (27 samples, 0.08%)</title><rect x="80.4097%" y="325" width="0.0769%" height="15" fill="rgb(250,195,49)" fg:x="28223" fg:w="27"/><text x="80.6597%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (386 samples, 1.10%)</title><rect x="79.4353%" y="389" width="1.0997%" height="15" fill="rgb(241,192,25)" fg:x="27881" fg:w="386"/><text x="79.6853%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (362 samples, 1.03%)</title><rect x="79.5037%" y="373" width="1.0314%" height="15" fill="rgb(208,124,10)" fg:x="27905" fg:w="362"/><text x="79.7537%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (330 samples, 0.94%)</title><rect x="79.5949%" y="357" width="0.9402%" height="15" fill="rgb(222,33,0)" fg:x="27937" fg:w="330"/><text x="79.8449%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (17 samples, 0.05%)</title><rect x="80.4866%" y="341" width="0.0484%" height="15" fill="rgb(234,209,28)" fg:x="28250" fg:w="17"/><text x="80.7366%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (17 samples, 0.05%)</title><rect x="80.4866%" y="325" width="0.0484%" height="15" fill="rgb(224,11,23)" fg:x="28250" fg:w="17"/><text x="80.7366%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 0.05%)</title><rect x="80.4866%" y="309" width="0.0484%" height="15" fill="rgb(232,99,1)" fg:x="28250" fg:w="17"/><text x="80.7366%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (143 samples, 0.41%)</title><rect x="80.6319%" y="373" width="0.4074%" height="15" fill="rgb(237,95,45)" fg:x="28301" fg:w="143"/><text x="80.8819%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (143 samples, 0.41%)</title><rect x="80.6319%" y="357" width="0.4074%" height="15" fill="rgb(208,109,11)" fg:x="28301" fg:w="143"/><text x="80.8819%" y="367.50"></text></g><g><title>core::ptr::write (143 samples, 0.41%)</title><rect x="80.6319%" y="341" width="0.4074%" height="15" fill="rgb(216,190,48)" fg:x="28301" fg:w="143"/><text x="80.8819%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (114 samples, 0.32%)</title><rect x="81.0764%" y="309" width="0.3248%" height="15" fill="rgb(251,171,36)" fg:x="28457" fg:w="114"/><text x="81.3264%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8 samples, 0.02%)</title><rect x="81.4012%" y="309" width="0.0228%" height="15" fill="rgb(230,62,22)" fg:x="28571" fg:w="8"/><text x="81.6512%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (8 samples, 0.02%)</title><rect x="81.4012%" y="293" width="0.0228%" height="15" fill="rgb(225,114,35)" fg:x="28571" fg:w="8"/><text x="81.6512%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (8 samples, 0.02%)</title><rect x="81.4012%" y="277" width="0.0228%" height="15" fill="rgb(215,118,42)" fg:x="28571" fg:w="8"/><text x="81.6512%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (9 samples, 0.03%)</title><rect x="81.4325%" y="261" width="0.0256%" height="15" fill="rgb(243,119,21)" fg:x="28582" fg:w="9"/><text x="81.6825%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.03%)</title><rect x="81.4325%" y="245" width="0.0256%" height="15" fill="rgb(252,177,53)" fg:x="28582" fg:w="9"/><text x="81.6825%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.03%)</title><rect x="81.4325%" y="229" width="0.0256%" height="15" fill="rgb(237,209,29)" fg:x="28582" fg:w="9"/><text x="81.6825%" y="239.50"></text></g><g><title>cfree (8 samples, 0.02%)</title><rect x="81.4354%" y="213" width="0.0228%" height="15" fill="rgb(212,65,23)" fg:x="28583" fg:w="8"/><text x="81.6854%" y="223.50"></text></g><g><title>[libc.so.6] (5 samples, 0.01%)</title><rect x="81.4439%" y="197" width="0.0142%" height="15" fill="rgb(230,222,46)" fg:x="28586" fg:w="5"/><text x="81.6939%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (10 samples, 0.03%)</title><rect x="81.4325%" y="309" width="0.0285%" height="15" fill="rgb(215,135,32)" fg:x="28582" fg:w="10"/><text x="81.6825%" y="319.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.03%)</title><rect x="81.4325%" y="293" width="0.0285%" height="15" fill="rgb(246,101,22)" fg:x="28582" fg:w="10"/><text x="81.6825%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (10 samples, 0.03%)</title><rect x="81.4325%" y="277" width="0.0285%" height="15" fill="rgb(206,107,13)" fg:x="28582" fg:w="10"/><text x="81.6825%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (23 samples, 0.07%)</title><rect x="81.8969%" y="181" width="0.0655%" height="15" fill="rgb(250,100,44)" fg:x="28745" fg:w="23"/><text x="82.1469%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (75 samples, 0.21%)</title><rect x="81.8057%" y="197" width="0.2137%" height="15" fill="rgb(231,147,38)" fg:x="28713" fg:w="75"/><text x="82.0557%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (20 samples, 0.06%)</title><rect x="81.9624%" y="181" width="0.0570%" height="15" fill="rgb(229,8,40)" fg:x="28768" fg:w="20"/><text x="82.2124%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (123 samples, 0.35%)</title><rect x="82.1305%" y="181" width="0.3504%" height="15" fill="rgb(221,135,30)" fg:x="28827" fg:w="123"/><text x="82.3805%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (384 samples, 1.09%)</title><rect x="81.5550%" y="245" width="1.0940%" height="15" fill="rgb(249,193,18)" fg:x="28625" fg:w="384"/><text x="81.8050%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (384 samples, 1.09%)</title><rect x="81.5550%" y="229" width="1.0940%" height="15" fill="rgb(209,133,39)" fg:x="28625" fg:w="384"/><text x="81.8050%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (384 samples, 1.09%)</title><rect x="81.5550%" y="213" width="1.0940%" height="15" fill="rgb(232,100,14)" fg:x="28625" fg:w="384"/><text x="81.8050%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (221 samples, 0.63%)</title><rect x="82.0194%" y="197" width="0.6296%" height="15" fill="rgb(224,185,1)" fg:x="28788" fg:w="221"/><text x="82.2694%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (59 samples, 0.17%)</title><rect x="82.4810%" y="181" width="0.1681%" height="15" fill="rgb(223,139,8)" fg:x="28950" fg:w="59"/><text x="82.7310%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (22 samples, 0.06%)</title><rect x="82.6491%" y="245" width="0.0627%" height="15" fill="rgb(232,213,38)" fg:x="29009" fg:w="22"/><text x="82.8991%" y="255.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4 samples, 0.01%)</title><rect x="82.7004%" y="229" width="0.0114%" height="15" fill="rgb(207,94,22)" fg:x="29027" fg:w="4"/><text x="82.9504%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 0.01%)</title><rect x="82.7004%" y="213" width="0.0114%" height="15" fill="rgb(219,183,54)" fg:x="29027" fg:w="4"/><text x="82.9504%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4 samples, 0.01%)</title><rect x="82.7004%" y="197" width="0.0114%" height="15" fill="rgb(216,185,54)" fg:x="29027" fg:w="4"/><text x="82.9504%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (333 samples, 0.95%)</title><rect x="83.1477%" y="133" width="0.9487%" height="15" fill="rgb(254,217,39)" fg:x="29184" fg:w="333"/><text x="83.3977%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (243 samples, 0.69%)</title><rect x="83.4041%" y="117" width="0.6923%" height="15" fill="rgb(240,178,23)" fg:x="29274" fg:w="243"/><text x="83.6541%" y="127.50"></text></g><g><title>core::cmp::min (10 samples, 0.03%)</title><rect x="84.3300%" y="101" width="0.0285%" height="15" fill="rgb(218,11,47)" fg:x="29599" fg:w="10"/><text x="84.5800%" y="111.50"></text></g><g><title>core::cmp::Ord::min (10 samples, 0.03%)</title><rect x="84.3300%" y="85" width="0.0285%" height="15" fill="rgb(218,51,51)" fg:x="29599" fg:w="10"/><text x="84.5800%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (454 samples, 1.29%)</title><rect x="83.1220%" y="213" width="1.2935%" height="15" fill="rgb(238,126,27)" fg:x="29175" fg:w="454"/><text x="83.3720%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (454 samples, 1.29%)</title><rect x="83.1220%" y="197" width="1.2935%" height="15" fill="rgb(249,202,22)" fg:x="29175" fg:w="454"/><text x="83.3720%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (454 samples, 1.29%)</title><rect x="83.1220%" y="181" width="1.2935%" height="15" fill="rgb(254,195,49)" fg:x="29175" fg:w="454"/><text x="83.3720%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (454 samples, 1.29%)</title><rect x="83.1220%" y="165" width="1.2935%" height="15" fill="rgb(208,123,14)" fg:x="29175" fg:w="454"/><text x="83.3720%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (454 samples, 1.29%)</title><rect x="83.1220%" y="149" width="1.2935%" height="15" fill="rgb(224,200,8)" fg:x="29175" fg:w="454"/><text x="83.3720%" y="159.50"></text></g><g><title>core::hash::Hasher::write_u8 (112 samples, 0.32%)</title><rect x="84.0964%" y="133" width="0.3191%" height="15" fill="rgb(217,61,36)" fg:x="29517" fg:w="112"/><text x="84.3464%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (109 samples, 0.31%)</title><rect x="84.1050%" y="117" width="0.3106%" height="15" fill="rgb(206,35,45)" fg:x="29520" fg:w="109"/><text x="84.3550%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (20 samples, 0.06%)</title><rect x="84.3585%" y="101" width="0.0570%" height="15" fill="rgb(217,65,33)" fg:x="29609" fg:w="20"/><text x="84.6085%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (119 samples, 0.34%)</title><rect x="85.2531%" y="165" width="0.3390%" height="15" fill="rgb(222,158,48)" fg:x="29923" fg:w="119"/><text x="85.5031%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (84 samples, 0.24%)</title><rect x="88.4213%" y="53" width="0.2393%" height="15" fill="rgb(254,2,54)" fg:x="31035" fg:w="84"/><text x="88.6713%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (246 samples, 0.70%)</title><rect x="88.0965%" y="69" width="0.7009%" height="15" fill="rgb(250,143,38)" fg:x="30921" fg:w="246"/><text x="88.3465%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (48 samples, 0.14%)</title><rect x="88.6606%" y="53" width="0.1368%" height="15" fill="rgb(248,25,0)" fg:x="31119" fg:w="48"/><text x="88.9106%" y="63.50"></text></g><g><title>core::cmp::min (97 samples, 0.28%)</title><rect x="88.7974%" y="69" width="0.2764%" height="15" fill="rgb(206,152,27)" fg:x="31167" fg:w="97"/><text x="89.0474%" y="79.50"></text></g><g><title>core::cmp::Ord::min (97 samples, 0.28%)</title><rect x="88.7974%" y="53" width="0.2764%" height="15" fill="rgb(240,77,30)" fg:x="31167" fg:w="97"/><text x="89.0474%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,855 samples, 5.29%)</title><rect x="85.7118%" y="85" width="5.2851%" height="15" fill="rgb(231,5,3)" fg:x="30084" fg:w="1855"/><text x="85.9618%" y="95.50">&lt;core:..</text></g><g><title>core::hash::sip::u8to64_le (675 samples, 1.92%)</title><rect x="89.0738%" y="69" width="1.9231%" height="15" fill="rgb(207,226,32)" fg:x="31264" fg:w="675"/><text x="89.3238%" y="79.50">c..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (28 samples, 0.08%)</title><rect x="94.0198%" y="37" width="0.0798%" height="15" fill="rgb(222,207,47)" fg:x="33000" fg:w="28"/><text x="94.2698%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (95 samples, 0.27%)</title><rect x="93.8916%" y="53" width="0.2707%" height="15" fill="rgb(229,115,45)" fg:x="32955" fg:w="95"/><text x="94.1416%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (22 samples, 0.06%)</title><rect x="94.0995%" y="37" width="0.0627%" height="15" fill="rgb(224,191,6)" fg:x="33028" fg:w="22"/><text x="94.3495%" y="47.50"></text></g><g><title>core::cmp::min (77 samples, 0.22%)</title><rect x="94.1622%" y="53" width="0.2194%" height="15" fill="rgb(230,227,24)" fg:x="33050" fg:w="77"/><text x="94.4122%" y="63.50"></text></g><g><title>core::cmp::Ord::min (77 samples, 0.22%)</title><rect x="94.1622%" y="37" width="0.2194%" height="15" fill="rgb(228,80,19)" fg:x="33050" fg:w="77"/><text x="94.4122%" y="47.50"></text></g><g><title>core::hash::Hash::hash_slice (4,070 samples, 11.60%)</title><rect x="84.4155%" y="181" width="11.5958%" height="15" fill="rgb(247,229,0)" fg:x="29629" fg:w="4070"/><text x="84.6655%" y="191.50">core::hash::Hash:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,657 samples, 10.42%)</title><rect x="85.5922%" y="165" width="10.4191%" height="15" fill="rgb(237,194,15)" fg:x="30042" fg:w="3657"/><text x="85.8422%" y="175.50">core::hash::imp..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,657 samples, 10.42%)</title><rect x="85.5922%" y="149" width="10.4191%" height="15" fill="rgb(219,203,20)" fg:x="30042" fg:w="3657"/><text x="85.8422%" y="159.50">core::hash::imp..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (3,657 samples, 10.42%)</title><rect x="85.5922%" y="133" width="10.4191%" height="15" fill="rgb(234,128,8)" fg:x="30042" fg:w="3657"/><text x="85.8422%" y="143.50">&lt;std::collectio..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,657 samples, 10.42%)</title><rect x="85.5922%" y="117" width="10.4191%" height="15" fill="rgb(248,202,8)" fg:x="30042" fg:w="3657"/><text x="85.8422%" y="127.50">&lt;core::hash::si..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,657 samples, 10.42%)</title><rect x="85.5922%" y="101" width="10.4191%" height="15" fill="rgb(206,104,37)" fg:x="30042" fg:w="3657"/><text x="85.8422%" y="111.50">&lt;core::hash::si..</text></g><g><title>core::hash::Hasher::write_u8 (1,760 samples, 5.01%)</title><rect x="90.9969%" y="85" width="5.0144%" height="15" fill="rgb(223,8,27)" fg:x="31939" fg:w="1760"/><text x="91.2469%" y="95.50">core::..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,656 samples, 4.72%)</title><rect x="91.2932%" y="69" width="4.7181%" height="15" fill="rgb(216,217,28)" fg:x="32043" fg:w="1656"/><text x="91.5432%" y="79.50">&lt;core..</text></g><g><title>core::hash::sip::u8to64_le (572 samples, 1.63%)</title><rect x="94.3816%" y="53" width="1.6297%" height="15" fill="rgb(249,199,1)" fg:x="33127" fg:w="572"/><text x="94.6316%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (22 samples, 0.06%)</title><rect x="96.4358%" y="85" width="0.0627%" height="15" fill="rgb(240,85,17)" fg:x="33848" fg:w="22"/><text x="96.6858%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (90 samples, 0.26%)</title><rect x="96.3104%" y="101" width="0.2564%" height="15" fill="rgb(206,108,45)" fg:x="33804" fg:w="90"/><text x="96.5604%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (24 samples, 0.07%)</title><rect x="96.4985%" y="85" width="0.0684%" height="15" fill="rgb(245,210,41)" fg:x="33870" fg:w="24"/><text x="96.7485%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (275 samples, 0.78%)</title><rect x="96.0113%" y="149" width="0.7835%" height="15" fill="rgb(206,13,37)" fg:x="33699" fg:w="275"/><text x="96.2613%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (275 samples, 0.78%)</title><rect x="96.0113%" y="133" width="0.7835%" height="15" fill="rgb(250,61,18)" fg:x="33699" fg:w="275"/><text x="96.2613%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (275 samples, 0.78%)</title><rect x="96.0113%" y="117" width="0.7835%" height="15" fill="rgb(235,172,48)" fg:x="33699" fg:w="275"/><text x="96.2613%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (80 samples, 0.23%)</title><rect x="96.5669%" y="101" width="0.2279%" height="15" fill="rgb(249,201,17)" fg:x="33894" fg:w="80"/><text x="96.8169%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.02%)</title><rect x="96.7748%" y="85" width="0.0199%" height="15" fill="rgb(219,208,6)" fg:x="33967" fg:w="7"/><text x="97.0248%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (4,359 samples, 12.42%)</title><rect x="84.4155%" y="213" width="12.4192%" height="15" fill="rgb(248,31,23)" fg:x="29629" fg:w="4359"/><text x="84.6655%" y="223.50">&lt;alloc::vec::Vec&lt;T,..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4,359 samples, 12.42%)</title><rect x="84.4155%" y="197" width="12.4192%" height="15" fill="rgb(245,15,42)" fg:x="29629" fg:w="4359"/><text x="84.6655%" y="207.50">core::hash::impls::..</text></g><g><title>core::hash::Hasher::write_length_prefix (289 samples, 0.82%)</title><rect x="96.0113%" y="181" width="0.8234%" height="15" fill="rgb(222,217,39)" fg:x="33699" fg:w="289"/><text x="96.2613%" y="191.50"></text></g><g><title>core::hash::Hasher::write_usize (289 samples, 0.82%)</title><rect x="96.0113%" y="165" width="0.8234%" height="15" fill="rgb(210,219,27)" fg:x="33699" fg:w="289"/><text x="96.2613%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (14 samples, 0.04%)</title><rect x="96.7948%" y="149" width="0.0399%" height="15" fill="rgb(252,166,36)" fg:x="33974" fg:w="14"/><text x="97.0448%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (68 samples, 0.19%)</title><rect x="97.6410%" y="117" width="0.1937%" height="15" fill="rgb(245,132,34)" fg:x="34271" fg:w="68"/><text x="97.8910%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (148 samples, 0.42%)</title><rect x="97.4871%" y="133" width="0.4217%" height="15" fill="rgb(236,54,3)" fg:x="34217" fg:w="148"/><text x="97.7371%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (26 samples, 0.07%)</title><rect x="97.8347%" y="117" width="0.0741%" height="15" fill="rgb(241,173,43)" fg:x="34339" fg:w="26"/><text x="98.0847%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (61 samples, 0.17%)</title><rect x="97.9088%" y="133" width="0.1738%" height="15" fill="rgb(215,190,9)" fg:x="34365" fg:w="61"/><text x="98.1588%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (433 samples, 1.23%)</title><rect x="96.8860%" y="181" width="1.2337%" height="15" fill="rgb(242,101,16)" fg:x="34006" fg:w="433"/><text x="97.1360%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (433 samples, 1.23%)</title><rect x="96.8860%" y="165" width="1.2337%" height="15" fill="rgb(223,190,21)" fg:x="34006" fg:w="433"/><text x="97.1360%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (420 samples, 1.20%)</title><rect x="96.9230%" y="149" width="1.1966%" height="15" fill="rgb(215,228,25)" fg:x="34019" fg:w="420"/><text x="97.1730%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.04%)</title><rect x="98.0826%" y="133" width="0.0370%" height="15" fill="rgb(225,36,22)" fg:x="34426" fg:w="13"/><text x="98.3326%" y="143.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (5,879 samples, 16.75%)</title><rect x="81.4610%" y="293" width="16.7498%" height="15" fill="rgb(251,106,46)" fg:x="28592" fg:w="5879"/><text x="81.7110%" y="303.50">hashbrown::map::make_hashe..</text></g><g><title>hashbrown::map::make_hash (5,879 samples, 16.75%)</title><rect x="81.4610%" y="277" width="16.7498%" height="15" fill="rgb(208,90,1)" fg:x="28592" fg:w="5879"/><text x="81.7110%" y="287.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (5,877 samples, 16.74%)</title><rect x="81.4667%" y="261" width="16.7441%" height="15" fill="rgb(243,10,4)" fg:x="28594" fg:w="5877"/><text x="81.7167%" y="271.50">core::hash::BuildHasher::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5,440 samples, 15.50%)</title><rect x="82.7118%" y="245" width="15.4990%" height="15" fill="rgb(212,137,27)" fg:x="29031" fg:w="5440"/><text x="82.9618%" y="255.50">core::hash::impls::&lt;impl..</text></g><g><title>&lt;day16::MazeState as core::hash::Hash&gt;::hash (5,436 samples, 15.49%)</title><rect x="82.7232%" y="229" width="15.4876%" height="15" fill="rgb(231,220,49)" fg:x="29035" fg:w="5436"/><text x="82.9732%" y="239.50">&lt;day16::MazeState as cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (483 samples, 1.38%)</title><rect x="96.8347%" y="213" width="1.3761%" height="15" fill="rgb(237,96,20)" fg:x="33988" fg:w="483"/><text x="97.0847%" y="223.50"></text></g><g><title>core::hash::Hasher::write_usize (465 samples, 1.32%)</title><rect x="96.8860%" y="197" width="1.3248%" height="15" fill="rgb(239,229,30)" fg:x="34006" fg:w="465"/><text x="97.1360%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (32 samples, 0.09%)</title><rect x="98.1196%" y="181" width="0.0912%" height="15" fill="rgb(219,65,33)" fg:x="34439" fg:w="32"/><text x="98.3696%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (13 samples, 0.04%)</title><rect x="98.2108%" y="293" width="0.0370%" height="15" fill="rgb(243,134,7)" fg:x="34471" fg:w="13"/><text x="98.4608%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (13 samples, 0.04%)</title><rect x="98.2108%" y="277" width="0.0370%" height="15" fill="rgb(216,177,54)" fg:x="34471" fg:w="13"/><text x="98.4608%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13 samples, 0.04%)</title><rect x="98.2108%" y="261" width="0.0370%" height="15" fill="rgb(211,160,20)" fg:x="34471" fg:w="13"/><text x="98.4608%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13 samples, 0.04%)</title><rect x="98.2108%" y="245" width="0.0370%" height="15" fill="rgb(239,85,39)" fg:x="34471" fg:w="13"/><text x="98.4608%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (5,900 samples, 16.81%)</title><rect x="81.4610%" y="309" width="16.8096%" height="15" fill="rgb(232,125,22)" fg:x="28592" fg:w="5900"/><text x="81.7110%" y="319.50">hashbrown::raw::RawTable&lt;T..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (8 samples, 0.02%)</title><rect x="98.2478%" y="293" width="0.0228%" height="15" fill="rgb(244,57,34)" fg:x="34484" fg:w="8"/><text x="98.4978%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (8 samples, 0.02%)</title><rect x="98.2478%" y="277" width="0.0228%" height="15" fill="rgb(214,203,32)" fg:x="34484" fg:w="8"/><text x="98.4978%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (8 samples, 0.02%)</title><rect x="98.2478%" y="261" width="0.0228%" height="15" fill="rgb(207,58,43)" fg:x="34484" fg:w="8"/><text x="98.4978%" y="271.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (8 samples, 0.02%)</title><rect x="98.2478%" y="245" width="0.0228%" height="15" fill="rgb(215,193,15)" fg:x="34484" fg:w="8"/><text x="98.4978%" y="255.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (8 samples, 0.02%)</title><rect x="98.2478%" y="229" width="0.0228%" height="15" fill="rgb(232,15,44)" fg:x="34484" fg:w="8"/><text x="98.4978%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket_ptr (37 samples, 0.11%)</title><rect x="98.2706%" y="309" width="0.1054%" height="15" fill="rgb(212,3,48)" fg:x="34492" fg:w="37"/><text x="98.5206%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (5 samples, 0.01%)</title><rect x="98.7464%" y="277" width="0.0142%" height="15" fill="rgb(218,128,7)" fg:x="34659" fg:w="5"/><text x="98.9964%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (70 samples, 0.20%)</title><rect x="98.7606%" y="277" width="0.1994%" height="15" fill="rgb(226,216,39)" fg:x="34664" fg:w="70"/><text x="99.0106%" y="287.50"></text></g><g><title>hashbrown::raw::is_full (22 samples, 0.06%)</title><rect x="98.9601%" y="277" width="0.0627%" height="15" fill="rgb(243,47,51)" fg:x="34734" fg:w="22"/><text x="99.2101%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (11 samples, 0.03%)</title><rect x="99.0228%" y="277" width="0.0313%" height="15" fill="rgb(241,183,40)" fg:x="34756" fg:w="11"/><text x="99.2728%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (11 samples, 0.03%)</title><rect x="99.0228%" y="261" width="0.0313%" height="15" fill="rgb(231,217,32)" fg:x="34756" fg:w="11"/><text x="99.2728%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.03%)</title><rect x="99.0228%" y="245" width="0.0313%" height="15" fill="rgb(229,61,38)" fg:x="34756" fg:w="11"/><text x="99.2728%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (329 samples, 0.94%)</title><rect x="98.3760%" y="293" width="0.9373%" height="15" fill="rgb(225,210,5)" fg:x="34529" fg:w="329"/><text x="98.6260%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (91 samples, 0.26%)</title><rect x="99.0541%" y="277" width="0.2593%" height="15" fill="rgb(231,79,45)" fg:x="34767" fg:w="91"/><text x="99.3041%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (91 samples, 0.26%)</title><rect x="99.0541%" y="261" width="0.2593%" height="15" fill="rgb(224,100,7)" fg:x="34767" fg:w="91"/><text x="99.3041%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (339 samples, 0.97%)</title><rect x="98.3760%" y="309" width="0.9658%" height="15" fill="rgb(241,198,18)" fg:x="34529" fg:w="339"/><text x="98.6260%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (10 samples, 0.03%)</title><rect x="99.3134%" y="293" width="0.0285%" height="15" fill="rgb(252,97,53)" fg:x="34858" fg:w="10"/><text x="99.5634%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (10 samples, 0.03%)</title><rect x="99.3134%" y="277" width="0.0285%" height="15" fill="rgb(220,88,7)" fg:x="34858" fg:w="10"/><text x="99.5634%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (4 samples, 0.01%)</title><rect x="99.3419%" y="277" width="0.0114%" height="15" fill="rgb(213,176,14)" fg:x="34868" fg:w="4"/><text x="99.5919%" y="287.50"></text></g><g><title>core::intrinsics::write_bytes (4 samples, 0.01%)</title><rect x="99.3419%" y="261" width="0.0114%" height="15" fill="rgb(246,73,7)" fg:x="34868" fg:w="4"/><text x="99.5919%" y="271.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="99.3419%" y="245" width="0.0114%" height="15" fill="rgb(245,64,36)" fg:x="34868" fg:w="4"/><text x="99.5919%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (120 samples, 0.34%)</title><rect x="99.3533%" y="277" width="0.3419%" height="15" fill="rgb(245,80,10)" fg:x="34872" fg:w="120"/><text x="99.6033%" y="287.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (117 samples, 0.33%)</title><rect x="99.3618%" y="261" width="0.3333%" height="15" fill="rgb(232,107,50)" fg:x="34875" fg:w="117"/><text x="99.6118%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (117 samples, 0.33%)</title><rect x="99.3618%" y="245" width="0.3333%" height="15" fill="rgb(253,3,0)" fg:x="34875" fg:w="117"/><text x="99.6118%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (117 samples, 0.33%)</title><rect x="99.3618%" y="229" width="0.3333%" height="15" fill="rgb(212,99,53)" fg:x="34875" fg:w="117"/><text x="99.6118%" y="239.50"></text></g><g><title>alloc::alloc::alloc (116 samples, 0.33%)</title><rect x="99.3647%" y="213" width="0.3305%" height="15" fill="rgb(249,111,54)" fg:x="34876" fg:w="116"/><text x="99.6147%" y="223.50"></text></g><g><title>malloc (115 samples, 0.33%)</title><rect x="99.3675%" y="197" width="0.3276%" height="15" fill="rgb(249,55,30)" fg:x="34877" fg:w="115"/><text x="99.6175%" y="207.50"></text></g><g><title>[libc.so.6] (114 samples, 0.32%)</title><rect x="99.3704%" y="181" width="0.3248%" height="15" fill="rgb(237,47,42)" fg:x="34878" fg:w="114"/><text x="99.6204%" y="191.50"></text></g><g><title>[libc.so.6] (82 samples, 0.23%)</title><rect x="99.4615%" y="165" width="0.2336%" height="15" fill="rgb(211,20,18)" fg:x="34910" fg:w="82"/><text x="99.7115%" y="175.50"></text></g><g><title>[libc.so.6] (24 samples, 0.07%)</title><rect x="99.6268%" y="149" width="0.0684%" height="15" fill="rgb(231,203,46)" fg:x="34968" fg:w="24"/><text x="99.8768%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (6,550 samples, 18.66%)</title><rect x="81.0393%" y="373" width="18.6615%" height="15" fill="rgb(237,142,3)" fg:x="28444" fg:w="6550"/><text x="81.2893%" y="383.50">hashbrown::raw::RawTable&lt;T,A&gt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6,550 samples, 18.66%)</title><rect x="81.0393%" y="357" width="18.6615%" height="15" fill="rgb(241,107,1)" fg:x="28444" fg:w="6550"/><text x="81.2893%" y="367.50">hashbrown::raw::RawTable&lt;T,A&gt;..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (6,549 samples, 18.66%)</title><rect x="81.0422%" y="341" width="18.6587%" height="15" fill="rgb(229,83,13)" fg:x="28445" fg:w="6549"/><text x="81.2922%" y="351.50">hashbrown::raw::RawTableInner..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (6,549 samples, 18.66%)</title><rect x="81.0422%" y="325" width="18.6587%" height="15" fill="rgb(241,91,40)" fg:x="28445" fg:w="6549"/><text x="81.2922%" y="335.50">hashbrown::raw::RawTableInner..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (126 samples, 0.36%)</title><rect x="99.3419%" y="309" width="0.3590%" height="15" fill="rgb(225,3,45)" fg:x="34868" fg:w="126"/><text x="99.5919%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (126 samples, 0.36%)</title><rect x="99.3419%" y="293" width="0.3590%" height="15" fill="rgb(244,223,14)" fg:x="34868" fg:w="126"/><text x="99.5919%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (19 samples, 0.05%)</title><rect x="99.7863%" y="357" width="0.0541%" height="15" fill="rgb(224,124,37)" fg:x="35024" fg:w="19"/><text x="100.0363%" y="367.50"></text></g><g><title>hashbrown::raw::is_full (28 samples, 0.08%)</title><rect x="99.8405%" y="357" width="0.0798%" height="15" fill="rgb(251,171,30)" fg:x="35043" fg:w="28"/><text x="100.0905%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.01%)</title><rect x="99.9202%" y="357" width="0.0142%" height="15" fill="rgb(236,46,54)" fg:x="35071" fg:w="5"/><text x="100.1702%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.01%)</title><rect x="99.9202%" y="341" width="0.0142%" height="15" fill="rgb(245,213,5)" fg:x="35071" fg:w="5"/><text x="100.1702%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.01%)</title><rect x="99.9202%" y="325" width="0.0142%" height="15" fill="rgb(230,144,27)" fg:x="35071" fg:w="5"/><text x="100.1702%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (89 samples, 0.25%)</title><rect x="99.7008%" y="373" width="0.2536%" height="15" fill="rgb(220,86,6)" fg:x="34994" fg:w="89"/><text x="99.9508%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (7 samples, 0.02%)</title><rect x="99.9345%" y="357" width="0.0199%" height="15" fill="rgb(240,20,13)" fg:x="35076" fg:w="7"/><text x="100.1845%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.02%)</title><rect x="99.9345%" y="341" width="0.0199%" height="15" fill="rgb(217,89,34)" fg:x="35076" fg:w="7"/><text x="100.1845%" y="351.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (12,133 samples, 34.57%)</title><rect x="65.4178%" y="437" width="34.5679%" height="15" fill="rgb(229,13,5)" fg:x="22961" fg:w="12133"/><text x="65.6678%" y="447.50">std::collections::hash::set::HashSet&lt;T,S&gt;::insert</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (12,133 samples, 34.57%)</title><rect x="65.4178%" y="421" width="34.5679%" height="15" fill="rgb(244,67,35)" fg:x="22961" fg:w="12133"/><text x="65.6678%" y="431.50">hashbrown::set::HashSet&lt;T,S,A&gt;::insert</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (12,085 samples, 34.43%)</title><rect x="65.5546%" y="405" width="34.4312%" height="15" fill="rgb(221,40,2)" fg:x="23009" fg:w="12085"/><text x="65.8046%" y="415.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (6,827 samples, 19.45%)</title><rect x="80.5351%" y="389" width="19.4507%" height="15" fill="rgb(237,157,21)" fg:x="28267" fg:w="6827"/><text x="80.7851%" y="399.50">hashbrown::raw::RawTable&lt;T,A&gt;:..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (11 samples, 0.03%)</title><rect x="99.9544%" y="373" width="0.0313%" height="15" fill="rgb(222,94,11)" fg:x="35083" fg:w="11"/><text x="100.2044%" y="383.50"></text></g><g><title>day16::compute (34,721 samples, 98.92%)</title><rect x="1.0656%" y="453" width="98.9230%" height="15" fill="rgb(249,113,6)" fg:x="374" fg:w="34721"/><text x="1.3156%" y="463.50">day16::compute</text></g><g><title>all (35,099 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(238,137,36)" fg:x="0" fg:w="35099"/><text x="0.2500%" y="783.50"></text></g><g><title>day16 (35,099 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(210,102,26)" fg:x="0" fg:w="35099"/><text x="0.2500%" y="767.50">day16</text></g><g><title>_start (35,091 samples, 99.98%)</title><rect x="0.0228%" y="741" width="99.9772%" height="15" fill="rgb(218,30,30)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="751.50">_start</text></g><g><title>__libc_start_main (35,091 samples, 99.98%)</title><rect x="0.0228%" y="725" width="99.9772%" height="15" fill="rgb(214,67,26)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="735.50">__libc_start_main</text></g><g><title>[libc.so.6] (35,091 samples, 99.98%)</title><rect x="0.0228%" y="709" width="99.9772%" height="15" fill="rgb(251,9,53)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="719.50">[libc.so.6]</text></g><g><title>main (35,091 samples, 99.98%)</title><rect x="0.0228%" y="693" width="99.9772%" height="15" fill="rgb(228,204,25)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (35,091 samples, 99.98%)</title><rect x="0.0228%" y="677" width="99.9772%" height="15" fill="rgb(207,153,8)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="687.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (35,091 samples, 99.98%)</title><rect x="0.0228%" y="661" width="99.9772%" height="15" fill="rgb(242,9,16)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (35,091 samples, 99.98%)</title><rect x="0.0228%" y="645" width="99.9772%" height="15" fill="rgb(217,211,10)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (35,091 samples, 99.98%)</title><rect x="0.0228%" y="629" width="99.9772%" height="15" fill="rgb(219,228,52)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="639.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (35,091 samples, 99.98%)</title><rect x="0.0228%" y="613" width="99.9772%" height="15" fill="rgb(231,92,29)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="623.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (35,091 samples, 99.98%)</title><rect x="0.0228%" y="597" width="99.9772%" height="15" fill="rgb(232,8,23)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (35,091 samples, 99.98%)</title><rect x="0.0228%" y="581" width="99.9772%" height="15" fill="rgb(216,211,34)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (35,091 samples, 99.98%)</title><rect x="0.0228%" y="565" width="99.9772%" height="15" fill="rgb(236,151,0)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="575.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (35,091 samples, 99.98%)</title><rect x="0.0228%" y="549" width="99.9772%" height="15" fill="rgb(209,168,3)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="559.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (35,091 samples, 99.98%)</title><rect x="0.0228%" y="533" width="99.9772%" height="15" fill="rgb(208,129,28)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="543.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (35,091 samples, 99.98%)</title><rect x="0.0228%" y="517" width="99.9772%" height="15" fill="rgb(229,78,22)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (35,091 samples, 99.98%)</title><rect x="0.0228%" y="501" width="99.9772%" height="15" fill="rgb(228,187,13)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>day16::main (35,091 samples, 99.98%)</title><rect x="0.0228%" y="485" width="99.9772%" height="15" fill="rgb(240,119,24)" fg:x="8" fg:w="35091"/><text x="0.2728%" y="495.50">day16::main</text></g><g><title>day16::solve_part_two (34,793 samples, 99.13%)</title><rect x="0.8718%" y="469" width="99.1282%" height="15" fill="rgb(209,194,42)" fg:x="306" fg:w="34793"/><text x="1.1218%" y="479.50">day16::solve_part_two</text></g><g><title>day16::distance (4 samples, 0.01%)</title><rect x="99.9886%" y="453" width="0.0114%" height="15" fill="rgb(247,200,46)" fg:x="35095" fg:w="4"/><text x="100.2386%" y="463.50"></text></g></svg></svg>